{
	"id": "b58fc993d0b5b47932824dcca86b2e56",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.14",
	"solcLongVersion": "0.8.14+commit.80d49f37",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/manifold/lazyclaim/ERC721LazyClaim.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\";\nimport \"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\";\nimport \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\";\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./IERC721LazyClaim.sol\";\n\n/**\n * @title Lazy Claim\n * @author manifold.xyz\n * @notice Lazy claim with optional whitelist ERC721 tokens\n */\ncontract ERC721LazyClaim is IERC165, IERC721LazyClaim, ICreatorExtensionTokenURI, ReentrancyGuard {\n    using Strings for uint256;\n\n    string private constant ARWEAVE_PREFIX = \"https://arweave.net/\";\n    string private constant IPFS_PREFIX = \"ipfs://\";\n    uint256 private constant MINT_INDEX_BITMASK = 0xFF;\n\n    // stores the number of claim instances made by a given creator contract\n    // used to determine the next claimIndex for a creator contract\n    // { contractAddress => claimCount }\n    mapping(address => uint224) private _claimCounts;\n\n    // stores mapping from tokenId to the claim it represents\n    // { contractAddress => { tokenId => Claim } }\n    mapping(address => mapping(uint256 => Claim)) private _claims;\n\n    // ONLY USED FOR NON-MERKLE MINTS: stores the number of tokens minted per wallet per claim, in order to limit maximum\n    // { contractAddress => { claimIndex => { walletAddress => walletMints } } }\n    mapping(address => mapping(uint256 => mapping(address => uint256))) private _mintsPerWallet;\n\n    // ONLY USED FOR MERKLE MINTS: stores mapping from claim to indices minted\n    // { contractAddress => {claimIndex => { claimIndexOffset => index } } }\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) private _claimMintIndices;\n\n    struct TokenClaim {\n        uint224 claimIndex;\n        uint32 mintOrder;\n    }\n    // stores which tokenId corresponds to which claimIndex, used to generate token uris\n    // { contractAddress => { tokenId => TokenClaim } }\n    mapping(address => mapping(uint256 => TokenClaim)) private _tokenClaims;\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\n        return interfaceId == type(IERC721LazyClaim).interfaceId ||\n            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n\n    \n    /**\n     * @notice This extension is shared, not single-creator. So we must ensure\n     * that a claim's initializer is an admin on the creator contract\n     * @param creatorContractAddress    the address of the creator contract to check the admin against\n     */\n    modifier creatorAdminRequired(address creatorContractAddress) {\n        AdminControl creatorCoreContract = AdminControl(creatorContractAddress);\n        require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\");\n        _;\n    }\n\n    /**\n     * See {IERC721LazyClaim-initializeClaim}.\n     */\n    function initializeClaim(\n        address creatorContractAddress,\n        ClaimParameters calldata claimParameters\n    ) external override creatorAdminRequired(creatorContractAddress) returns (uint256) {\n        // Sanity checks\n        require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot initialize with invalid storage protocol\");\n        require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\");\n        require(claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0, \"Cannot provide both mintsPerWallet and merkleRoot\");\n    \n        // Get the index for the new claim\n        _claimCounts[creatorContractAddress]++;\n        uint224 newIndex = _claimCounts[creatorContractAddress];\n\n        // Create the claim\n        _claims[creatorContractAddress][newIndex] = Claim({\n            total: 0,\n            totalMax: claimParameters.totalMax,\n            walletMax: claimParameters.walletMax,\n            startDate: claimParameters.startDate,\n            endDate: claimParameters.endDate,\n            storageProtocol: claimParameters.storageProtocol,\n            identical: claimParameters.identical,\n            merkleRoot: claimParameters.merkleRoot,\n            location: claimParameters.location\n        });\n\n        emit ClaimInitialized(creatorContractAddress, newIndex, msg.sender);\n        return newIndex;\n    }\n\n    /**\n     * See {IERC721LazyClaim-udpateClaim}.\n     */\n    function updateClaim(\n        address creatorContractAddress,\n        uint256 claimIndex,\n        ClaimParameters calldata claimParameters\n    ) external override creatorAdminRequired(creatorContractAddress) {\n        // Sanity checks\n        require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n        require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot set invalid storage protocol\");\n        require(_claims[creatorContractAddress][claimIndex].totalMax == 0 ||  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax, \"Cannot decrease totalMax\");\n        require(_claims[creatorContractAddress][claimIndex].walletMax == 0 || _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax, \"Cannot decrease walletMax\");\n        require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\");\n\n        // Overwrite the existing claim\n        _claims[creatorContractAddress][claimIndex] = Claim({\n            total: _claims[creatorContractAddress][claimIndex].total,\n            totalMax: claimParameters.totalMax,\n            walletMax: claimParameters.walletMax,\n            startDate: claimParameters.startDate,\n            endDate: claimParameters.endDate,\n            storageProtocol: claimParameters.storageProtocol,\n            identical: claimParameters.identical,\n            merkleRoot: claimParameters.merkleRoot,\n            location: claimParameters.location\n        });\n    }\n\n    /**\n     * See {IERC721LazyClaim-getClaimCount}.\n     */\n    function getClaimCount(address creatorContractAddress) external override view returns(uint256) {\n        return _claimCounts[creatorContractAddress];\n    }\n\n    /**\n     * See {IERC721LazyClaim-getClaim}.\n     */\n    function getClaim(address creatorContractAddress, uint256 claimIndex) external override view returns(Claim memory) {\n        require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n        return _claims[creatorContractAddress][claimIndex];\n    }\n\n    /**\n     * See {IERC721LazyClaim-checkMintIndex}.\n     */\n    function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) public override view returns(bool) {\n        Claim storage claim = _claims[creatorContractAddress][claimIndex];\n        require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n        require(claim.merkleRoot != \"\", \"Can only check merkle claims\");\n        uint256 claimMintIndex = mintIndex >> 8;\n        uint256 claimMintTracking = _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex];\n        uint256 mintBitmask = 1 << (mintIndex & MINT_INDEX_BITMASK);\n        return mintBitmask & claimMintTracking != 0;\n    }\n\n    /**\n     * See {IERC721LazyClaim-checkMintIndices}.\n     */\n    function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external override view returns(bool[] memory minted) {\n        minted = new bool[](mintIndices.length);\n        for (uint i = 0; i < mintIndices.length; i++) {\n            minted[i] = checkMintIndex(creatorContractAddress, claimIndex, mintIndices[i]);\n        }\n    }\n\n    /**\n     * See {IERC721LazyClaim-getTotalMints}.\n     */\n    function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external override view returns(uint32) {\n        Claim storage claim = _claims[creatorContractAddress][claimIndex];\n        require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n        require(claim.walletMax != 0, \"Can only retrieve for non-merkle claims with walletMax\");\n        return  uint32(_mintsPerWallet[creatorContractAddress][claimIndex][minter]);\n    }\n\n    /**\n     * See {IERC721LazyClaim-mint}.\n     */\n    function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof) external override {\n        Claim storage claim = _claims[creatorContractAddress][claimIndex];\n        // Safely retrieve the claim\n        require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n\n        // Check timestamps\n        require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\");\n        require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\");\n\n        // Check totalMax\n        require(claim.totalMax == 0 || claim.total < claim.totalMax, \"Maximum tokens already minted for this claim\");\n\n        if (claim.merkleRoot != \"\") {\n            // Merkle mint\n            _checkMerkleAndUpdate(claim, creatorContractAddress, claimIndex, mintIndex, merkleProof);\n        } else {\n            // Non-merkle mint\n            if (claim.walletMax != 0) {\n                require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] < claim.walletMax, \"Maximum tokens already minted for this wallet\");\n                unchecked{ _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]++; }\n            }\n        }\n        unchecked{ claim.total++; }\n\n        // Do mint\n        uint256 newTokenId = IERC721CreatorCore(creatorContractAddress).mintExtension(msg.sender);\n\n        // Insert the new tokenId into _tokenClaims for the current claim address & index\n        _tokenClaims[creatorContractAddress][newTokenId] = TokenClaim(uint224(claimIndex), claim.total);\n\n        emit ClaimMint(creatorContractAddress, claimIndex);\n    }\n\n    /**\n     * See {IERC721LazyClaim-mintBatch}.\n     */\n    function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs) external override {\n        Claim storage claim = _claims[creatorContractAddress][claimIndex];\n        \n        // Safely retrieve the claim\n        require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\");\n\n        // Check timestamps\n        require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\");\n        require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\");\n\n        // Check totalMax\n        require(claim.totalMax == 0 || claim.total+mintCount <= claim.totalMax, \"Too many requested for this claim\");\n        \n        uint256 newMintIndex = claim.total+1;\n        unchecked{ claim.total += mintCount; }\n\n        if (claim.merkleRoot != \"\") {\n            require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \"Invalid input\");\n            // Merkle mint\n            for (uint i = 0; i < mintCount; ) {\n                uint32 mintIndex = mintIndices[i];\n                bytes32[] memory merkleProof = merkleProofs[i];\n                \n                _checkMerkleAndUpdate(claim, creatorContractAddress, claimIndex, mintIndex, merkleProof);\n                unchecked { i++; }\n            }\n        } else {\n            // Non-merkle mint\n            if (claim.walletMax != 0) {\n                require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]+mintCount <= claim.walletMax, \"Too many requested for this wallet\");\n                unchecked{ _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] += mintCount; }\n            }\n            \n        }\n        uint256[] memory newTokenIds = IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(msg.sender, mintCount);\n        for (uint i = 0; i < mintCount; ) {\n            _tokenClaims[creatorContractAddress][newTokenIds[i]] = TokenClaim(uint224(claimIndex), uint32(newMintIndex+i));\n            unchecked { i++; }\n        }\n\n        emit ClaimMintBatch(creatorContractAddress, claimIndex, mintCount);\n    }\n\n    /**\n     * Helper to check merkle proof and whether or not the mintIndex was consumed. Also updates the consumed counts\n     */\n    function _checkMerkleAndUpdate(Claim storage claim, address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] memory merkleProof) private {\n        // Merkle mint\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, mintIndex));\n        require(MerkleProof.verify(merkleProof, claim.merkleRoot, leaf), \"Could not verify merkle proof\");\n\n        // Check if mintIndex has been minted\n        uint256 claimMintIndex = mintIndex >> 8;\n        uint256 claimMintTracking = _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex];\n        uint256 mintBitmask = 1 << (mintIndex & MINT_INDEX_BITMASK);\n        require(mintBitmask & claimMintTracking == 0, \"Already minted\");\n        _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex] = claimMintTracking | mintBitmask;\n    }\n\n    /**\n     * See {ICreatorExtensionTokenURI-tokenURI}.\n     */\n    function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {\n        TokenClaim memory tokenClaim = _tokenClaims[creatorContractAddress][tokenId];\n        require(tokenClaim.claimIndex > 0, \"Token does not exist\");\n        Claim memory claim = _claims[creatorContractAddress][tokenClaim.claimIndex];\n\n        string memory prefix = \"\";\n        if (claim.storageProtocol == StorageProtocol.ARWEAVE) {\n            prefix = ARWEAVE_PREFIX;\n        } else if (claim.storageProtocol == StorageProtocol.IPFS) {\n            prefix = IPFS_PREFIX;\n        }\n        uri = string(abi.encodePacked(prefix, claim.location));\n\n        // Depending on params, we may want to append a suffix to location\n        if (!claim.identical) {\n            uri = string(abi.encodePacked(uri, \"/\", uint256(tokenClaim.mintOrder).toString()));\n        }\n    }\n}\n"
			},
			"contracts/manifold/lazyclaim/IERC721LazyClaim.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\n/**\n * Lazy Claim interface\n */\ninterface IERC721LazyClaim {\n    enum StorageProtocol { INVALID, NONE, ARWEAVE, IPFS }\n\n    struct ClaimParameters {\n        uint32 totalMax;\n        uint32 walletMax;\n        uint48 startDate;\n        uint48 endDate;\n        StorageProtocol storageProtocol;\n        bool identical;\n        bytes32 merkleRoot;\n        string location;\n    }\n\n    struct Claim {\n        uint32 total;\n        uint32 totalMax;\n        uint32 walletMax;\n        uint48 startDate;\n        uint48 endDate;\n        StorageProtocol storageProtocol;\n        bool identical;\n        bytes32 merkleRoot;\n        string location;\n    }\n\n    event ClaimInitialized(address indexed creatorContract, uint224 indexed claimIndex, address initializer);\n    event ClaimMint(address indexed creatorContract, uint256 indexed claimIndex);\n    event ClaimMintBatch(address indexed creatorContract, uint256 indexed claimIndex, uint16 mintCount);\n\n    /**\n     * @notice initialize a new claim, emit initialize event, and return the newly created index\n     * @param creatorContractAddress    the creator contract the claim will mint tokens for\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\n     * @return                          the index of the newly created claim\n     */\n    function initializeClaim(address creatorContractAddress, ClaimParameters calldata claimParameters) external returns(uint256);\n\n    /**\n     * @notice update an existing claim at claimIndex\n     * @param creatorContractAddress    the creator contract corresponding to the claim\n     * @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\n     * @param claimParameters           the parameters which will affect the minting behavior of the claim\n     */\n    function updateClaim(address creatorContractAddress, uint256 claimIndex, ClaimParameters calldata claimParameters) external;\n\n/**\n     * @notice get the number of _claims initialized for a given creator contract\n     * @param creatorContractAddress    the address of the creator contract\n     * @return                          the number of _claims initialized for this creator contract\n     */\n    function getClaimCount(address creatorContractAddress) external view returns(uint256);\n\n    /**\n     * @notice get a claim corresponding to a creator contract and index\n     * @param creatorContractAddress    the address of the creator contract\n     * @param claimIndex                the index of the claim\n     * @return                          the claim object\n     */\n    function getClaim(address creatorContractAddress, uint256 claimIndex) external view returns(Claim memory);\n\n    /**\n     * @notice check if a mint index has been consumed or not (only for merkle claims)\n     *\n     * @param creatorContractAddress    the address of the creator contract for the claim\n     * @param claimIndex                the index of the claim\n     * @param mintIndex                 the mint index of the claim\n     * @return                          whether or not the mint index was consumed\n     */\n    function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) external view returns(bool);\n\n    /**\n     * @notice check if multiple mint indices has been consumed or not (only for merkle claims)\n     *\n     * @param creatorContractAddress    the address of the creator contract for the claim\n     * @param claimIndex                the index of the claim\n     * @param mintIndices               the mint index of the claim\n     * @return                          whether or not the mint index was consumed\n     */\n    function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external view returns(bool[] memory);\n\n    /**\n     * @notice get mints made for a wallet (only for non-merkle claims with walletMax)\n     *\n     * @param minter                    the address of the minting address\n     * @param creatorContractAddress    the address of the creator contract for the claim\n     * @param claimIndex                the index of the claim\n     * @return                          how many mints the minter has made\n     */\n    function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external view returns(uint32);\n\n    /**\n     * @notice allow a wallet to lazily claim a token according to parameters\n     * @param creatorContractAddress    the creator contract address\n     * @param claimIndex                the index of the claim for which we will mint\n     * @param mintIndex                 the mint index (only needed for merkle claims)\n     * @param merkleProof               if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\n     */\n    function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof) external;\n\n    /**\n     * @notice allow a wallet to lazily claim a token according to parameters\n     * @param creatorContractAddress    the creator contract address\n     * @param claimIndex                the index of the claim for which we will mint\n     * @param mintCount                 the number of claims to mint\n     * @param mintIndices               the mint index (only needed for merkle claims)\n     * @param merkleProofs              if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\n     */\n    function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Implement this if you want your extension to have overloadable URI's\n */\ninterface ICreatorExtensionTokenURI is IERC165 {\n\n    /**\n     * Get the uri for a given creator/tokenId\n     */\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IAdminControl.sol\";\n\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // Track registered admins\n    EnumerableSet.AddressSet private _admins;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IAdminControl).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Only allows approved admins to call the specified function\n     */\n    modifier adminRequired() {\n        require(owner() == msg.sender || _admins.contains(msg.sender), \"AdminControl: Must be owner or admin\");\n        _;\n    }   \n\n    /**\n     * @dev See {IAdminControl-getAdmins}.\n     */\n    function getAdmins() external view override returns (address[] memory admins) {\n        admins = new address[](_admins.length());\n        for (uint i = 0; i < _admins.length(); i++) {\n            admins[i] = _admins.at(i);\n        }\n        return admins;\n    }\n\n    /**\n     * @dev See {IAdminControl-approveAdmin}.\n     */\n    function approveAdmin(address admin) external override onlyOwner {\n        if (!_admins.contains(admin)) {\n            emit AdminApproved(admin, msg.sender);\n            _admins.add(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-revokeAdmin}.\n     */\n    function revokeAdmin(address admin) external override onlyOwner {\n        if (_admins.contains(admin)) {\n            emit AdminRevoked(admin, msg.sender);\n            _admins.remove(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-isAdmin}.\n     */\n    function isAdmin(address admin) public override view returns (bool) {\n        return (owner() == admin || _admins.contains(admin));\n    }\n\n}"
			},
			"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"./ICreatorCore.sol\";\n\n/**\n * @dev Core ERC721 creator interface\n */\ninterface IERC721CreatorCore is ICreatorCore {\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenIds minted\n     */\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev burn a token. Can only be called by token owner or approved address.\n     * On burn, calls back to the registered extension's onBurn method\n     */\n    function burn(uint256 tokenId) external;\n\n}"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for admin control\n */\ninterface IAdminControl is IERC165 {\n\n    event AdminApproved(address indexed account, address indexed sender);\n    event AdminRevoked(address indexed account, address indexed sender);\n\n    /**\n     * @dev gets address of all admins\n     */\n    function getAdmins() external view returns (address[] memory);\n\n    /**\n     * @dev add an admin.  Can only be called by contract owner.\n     */\n    function approveAdmin(address admin) external;\n\n    /**\n     * @dev remove an admin.  Can only be called by contract owner.\n     */\n    function revokeAdmin(address admin) external;\n\n    /**\n     * @dev checks whether or not given address is an admin\n     * Returns True if they are\n     */\n    function isAdmin(address admin) external view returns (bool);\n\n}"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Core creator interface\n */\ninterface ICreatorCore is IERC165 {\n\n    event ExtensionRegistered(address indexed extension, address indexed sender);\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\n\n    /**\n     * @dev gets address of all extensions\n     */\n    function getExtensions() external view returns (address[] memory);\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * Returns True if removed, False if already removed.\n     */\n    function unregisterExtension(address extension) external;\n\n    /**\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\n     * This function will destroy all ability to reference the metadata of any tokens created\n     * by the specified extension. It will also unregister the extension if needed.\n     * Returns True if removed, False if already removed.\n     */\n    function blacklistExtension(address extension) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     */\n    function setBaseTokenURIExtension(string calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\n\n    /**\n     * @dev set the common prefix of an extension.  Can only be called by extension.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefixExtension(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURI(string calldata uri) external;\n\n    /**\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefix(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\n\n    /**\n     * @dev set a permissions contract for an extension.  Used to control minting.\n     */\n    function setMintPermissions(address extension, address permissions) external;\n\n    /**\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\n     * from the extension before transferring\n     */\n    function setApproveTransferExtension(bool enabled) external;\n\n    /**\n     * @dev get the extension of a given token\n     */\n    function tokenExtension(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Set default royalties\n     */\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of a token\n     */\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of an extension\n     */\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\n     */\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    \n    // Royalty support for various other standards\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol": {
				"ICreatorCore": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "DefaultRoyaltiesUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "enabled",
									"type": "bool"
								}
							],
							"name": "ExtensionApproveTransferUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ExtensionBlacklisted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ExtensionRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "ExtensionRoyaltiesUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ExtensionUnregistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "permissions",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "MintPermissionsUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "RoyaltiesUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								}
							],
							"name": "blacklistExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getExtensions",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getFeeBps",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getFeeRecipients",
							"outputs": [
								{
									"internalType": "address payable[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getFees",
							"outputs": [
								{
									"internalType": "address payable[]",
									"name": "",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getRoyalties",
							"outputs": [
								{
									"internalType": "address payable[]",
									"name": "",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "baseURI",
									"type": "string"
								}
							],
							"name": "registerExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "baseURI",
									"type": "string"
								},
								{
									"internalType": "bool",
									"name": "baseURIIdentical",
									"type": "bool"
								}
							],
							"name": "registerExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "royaltyInfo",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "enabled",
									"type": "bool"
								}
							],
							"name": "setApproveTransferExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setBaseTokenURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setBaseTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								},
								{
									"internalType": "bool",
									"name": "identical",
									"type": "bool"
								}
							],
							"name": "setBaseTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "permissions",
									"type": "address"
								}
							],
							"name": "setMintPermissions",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "setRoyalties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "setRoyalties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "setRoyaltiesExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setTokenURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "tokenIds",
									"type": "uint256[]"
								},
								{
									"internalType": "string[]",
									"name": "uris",
									"type": "string[]"
								}
							],
							"name": "setTokenURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "tokenId",
									"type": "uint256[]"
								},
								{
									"internalType": "string[]",
									"name": "uri",
									"type": "string[]"
								}
							],
							"name": "setTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "prefix",
									"type": "string"
								}
							],
							"name": "setTokenURIPrefix",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "prefix",
									"type": "string"
								}
							],
							"name": "setTokenURIPrefixExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenExtension",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								}
							],
							"name": "unregisterExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Core creator interface",
						"kind": "dev",
						"methods": {
							"blacklistExtension(address)": {
								"details": "blacklist an extension.  Can only be called by contract owner or admin. This function will destroy all ability to reference the metadata of any tokens created by the specified extension. It will also unregister the extension if needed. Returns True if removed, False if already removed."
							},
							"getExtensions()": {
								"details": "gets address of all extensions"
							},
							"getRoyalties(uint256)": {
								"details": "Get royalites of a token.  Returns list of receivers and basisPoints"
							},
							"registerExtension(address,string)": {
								"details": "add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added."
							},
							"registerExtension(address,string,bool)": {
								"details": "add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added."
							},
							"setApproveTransferExtension(bool)": {
								"details": "Configure so transfers of tokens created by the caller (must be extension) gets approval from the extension before transferring"
							},
							"setBaseTokenURI(string)": {
								"details": "set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin. For tokens with no uri configured, tokenURI will return \"uri+tokenId\""
							},
							"setBaseTokenURIExtension(string)": {
								"details": "set the baseTokenURI of an extension.  Can only be called by extension."
							},
							"setBaseTokenURIExtension(string,bool)": {
								"details": "set the baseTokenURI of an extension.  Can only be called by extension. For tokens with no uri configured, tokenURI will return \"uri+tokenId\""
							},
							"setMintPermissions(address,address)": {
								"details": "set a permissions contract for an extension.  Used to control minting."
							},
							"setRoyalties(address[],uint256[])": {
								"details": "Set default royalties"
							},
							"setRoyalties(uint256,address[],uint256[])": {
								"details": "Set royalties of a token"
							},
							"setRoyaltiesExtension(address,address[],uint256[])": {
								"details": "Set royalties of an extension"
							},
							"setTokenURI(uint256,string)": {
								"details": "set the tokenURI of a token with no extension.  Can only be called by owner/admin."
							},
							"setTokenURI(uint256[],string[])": {
								"details": "set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin."
							},
							"setTokenURIExtension(uint256,string)": {
								"details": "set the tokenURI of a token extension.  Can only be called by extension that minted token."
							},
							"setTokenURIExtension(uint256[],string[])": {
								"details": "set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token."
							},
							"setTokenURIPrefix(string)": {
								"details": "set the common prefix for tokens with no extension.  Can only be called by owner/admin. If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\" Useful if you want to use ipfs/arweave"
							},
							"setTokenURIPrefixExtension(string)": {
								"details": "set the common prefix of an extension.  Can only be called by extension. If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\" Useful if you want to use ipfs/arweave"
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenExtension(uint256)": {
								"details": "get the extension of a given token"
							},
							"unregisterExtension(address)": {
								"details": "add an extension.  Can only be called by contract owner or admin. Returns True if removed, False if already removed."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"blacklistExtension(address)": "02e7afb7",
							"getExtensions()": "83b7db63",
							"getFeeBps(uint256)": "0ebd4c7f",
							"getFeeRecipients(uint256)": "b9c4d9fb",
							"getFees(uint256)": "d5a06d4c",
							"getRoyalties(uint256)": "bb3bafd6",
							"registerExtension(address,string)": "3071a0f9",
							"registerExtension(address,string,bool)": "3f0f37f6",
							"royaltyInfo(uint256,uint256)": "2a55205a",
							"setApproveTransferExtension(bool)": "ac0c8cfa",
							"setBaseTokenURI(string)": "30176e13",
							"setBaseTokenURIExtension(string)": "3e6134b8",
							"setBaseTokenURIExtension(string,bool)": "82dcc0c8",
							"setMintPermissions(address,address)": "f0cdc499",
							"setRoyalties(address[],uint256[])": "332dd1ae",
							"setRoyalties(uint256,address[],uint256[])": "20e4afe2",
							"setRoyaltiesExtension(address,address[],uint256[])": "b0fe87c9",
							"setTokenURI(uint256,string)": "162094c4",
							"setTokenURI(uint256[],string[])": "aafb2d44",
							"setTokenURIExtension(uint256,string)": "e92a89f6",
							"setTokenURIExtension(uint256[],string[])": "61e5bc6b",
							"setTokenURIPrefix(string)": "99e0dd7c",
							"setTokenURIPrefixExtension(string)": "66d1e9d0",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenExtension(uint256)": "239be317",
							"unregisterExtension(address)": "ce8aee9d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"DefaultRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ExtensionApproveTransferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"ExtensionRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MintPermissionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"RoyaltiesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"blacklistExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtensions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"baseURIIdentical\",\"type\":\"bool\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setApproveTransferExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"}],\"name\":\"setMintPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyaltiesExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uri\",\"type\":\"string[]\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefixExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"unregisterExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Core creator interface\",\"kind\":\"dev\",\"methods\":{\"blacklistExtension(address)\":{\"details\":\"blacklist an extension.  Can only be called by contract owner or admin. This function will destroy all ability to reference the metadata of any tokens created by the specified extension. It will also unregister the extension if needed. Returns True if removed, False if already removed.\"},\"getExtensions()\":{\"details\":\"gets address of all extensions\"},\"getRoyalties(uint256)\":{\"details\":\"Get royalites of a token.  Returns list of receivers and basisPoints\"},\"registerExtension(address,string)\":{\"details\":\"add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added.\"},\"registerExtension(address,string,bool)\":{\"details\":\"add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added.\"},\"setApproveTransferExtension(bool)\":{\"details\":\"Configure so transfers of tokens created by the caller (must be extension) gets approval from the extension before transferring\"},\"setBaseTokenURI(string)\":{\"details\":\"set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin. For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\"},\"setBaseTokenURIExtension(string)\":{\"details\":\"set the baseTokenURI of an extension.  Can only be called by extension.\"},\"setBaseTokenURIExtension(string,bool)\":{\"details\":\"set the baseTokenURI of an extension.  Can only be called by extension. For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\"},\"setMintPermissions(address,address)\":{\"details\":\"set a permissions contract for an extension.  Used to control minting.\"},\"setRoyalties(address[],uint256[])\":{\"details\":\"Set default royalties\"},\"setRoyalties(uint256,address[],uint256[])\":{\"details\":\"Set royalties of a token\"},\"setRoyaltiesExtension(address,address[],uint256[])\":{\"details\":\"Set royalties of an extension\"},\"setTokenURI(uint256,string)\":{\"details\":\"set the tokenURI of a token with no extension.  Can only be called by owner/admin.\"},\"setTokenURI(uint256[],string[])\":{\"details\":\"set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\"},\"setTokenURIExtension(uint256,string)\":{\"details\":\"set the tokenURI of a token extension.  Can only be called by extension that minted token.\"},\"setTokenURIExtension(uint256[],string[])\":{\"details\":\"set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\"},\"setTokenURIPrefix(string)\":{\"details\":\"set the common prefix for tokens with no extension.  Can only be called by owner/admin. If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\" Useful if you want to use ipfs/arweave\"},\"setTokenURIPrefixExtension(string)\":{\"details\":\"set the common prefix of an extension.  Can only be called by extension. If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\" Useful if you want to use ipfs/arweave\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenExtension(uint256)\":{\"details\":\"get the extension of a given token\"},\"unregisterExtension(address)\":{\"details\":\"add an extension.  Can only be called by contract owner or admin. Returns True if removed, False if already removed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\":\"ICreatorCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\":{\"keccak256\":\"0x2dc54667c7182b70fbfcb5c0775b098d9b6b652cbebdd55d2ef7e4676b84af4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383cef86be81bc48af21a27e945b82dcbb5ed1c1771a7bb68179538c6f8d6b71\",\"dweb:/ipfs/QmV345QPgtbZTqui7YQeA95QB3YCDnG7bX4H5RyUhTd4CX\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol": {
				"IERC721CreatorCore": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "DefaultRoyaltiesUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "enabled",
									"type": "bool"
								}
							],
							"name": "ExtensionApproveTransferUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ExtensionBlacklisted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ExtensionRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "ExtensionRoyaltiesUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ExtensionUnregistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "permissions",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "MintPermissionsUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "RoyaltiesUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								}
							],
							"name": "blacklistExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getExtensions",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getFeeBps",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getFeeRecipients",
							"outputs": [
								{
									"internalType": "address payable[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getFees",
							"outputs": [
								{
									"internalType": "address payable[]",
									"name": "",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getRoyalties",
							"outputs": [
								{
									"internalType": "address payable[]",
									"name": "",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "mintBase",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "mintBase",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "string[]",
									"name": "uris",
									"type": "string[]"
								}
							],
							"name": "mintBaseBatch",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "count",
									"type": "uint16"
								}
							],
							"name": "mintBaseBatch",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "mintExtension",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "mintExtension",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "string[]",
									"name": "uris",
									"type": "string[]"
								}
							],
							"name": "mintExtensionBatch",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint16",
									"name": "count",
									"type": "uint16"
								}
							],
							"name": "mintExtensionBatch",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "baseURI",
									"type": "string"
								}
							],
							"name": "registerExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "baseURI",
									"type": "string"
								},
								{
									"internalType": "bool",
									"name": "baseURIIdentical",
									"type": "bool"
								}
							],
							"name": "registerExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "royaltyInfo",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "enabled",
									"type": "bool"
								}
							],
							"name": "setApproveTransferExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setBaseTokenURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setBaseTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								},
								{
									"internalType": "bool",
									"name": "identical",
									"type": "bool"
								}
							],
							"name": "setBaseTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "permissions",
									"type": "address"
								}
							],
							"name": "setMintPermissions",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "setRoyalties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "setRoyalties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								},
								{
									"internalType": "address payable[]",
									"name": "receivers",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "basisPoints",
									"type": "uint256[]"
								}
							],
							"name": "setRoyaltiesExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setTokenURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "tokenIds",
									"type": "uint256[]"
								},
								{
									"internalType": "string[]",
									"name": "uris",
									"type": "string[]"
								}
							],
							"name": "setTokenURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "tokenId",
									"type": "uint256[]"
								},
								{
									"internalType": "string[]",
									"name": "uri",
									"type": "string[]"
								}
							],
							"name": "setTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"name": "setTokenURIExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "prefix",
									"type": "string"
								}
							],
							"name": "setTokenURIPrefix",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "prefix",
									"type": "string"
								}
							],
							"name": "setTokenURIPrefixExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenExtension",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "extension",
									"type": "address"
								}
							],
							"name": "unregisterExtension",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Core ERC721 creator interface",
						"kind": "dev",
						"methods": {
							"blacklistExtension(address)": {
								"details": "blacklist an extension.  Can only be called by contract owner or admin. This function will destroy all ability to reference the metadata of any tokens created by the specified extension. It will also unregister the extension if needed. Returns True if removed, False if already removed."
							},
							"burn(uint256)": {
								"details": "burn a token. Can only be called by token owner or approved address. On burn, calls back to the registered extension's onBurn method"
							},
							"getExtensions()": {
								"details": "gets address of all extensions"
							},
							"getRoyalties(uint256)": {
								"details": "Get royalites of a token.  Returns list of receivers and basisPoints"
							},
							"mintBase(address)": {
								"details": "mint a token with no extension. Can only be called by an admin. Returns tokenId minted"
							},
							"mintBase(address,string)": {
								"details": "mint a token with no extension. Can only be called by an admin. Returns tokenId minted"
							},
							"mintBaseBatch(address,string[])": {
								"details": "batch mint a token with no extension. Can only be called by an admin. Returns tokenId minted"
							},
							"mintBaseBatch(address,uint16)": {
								"details": "batch mint a token with no extension. Can only be called by an admin. Returns tokenId minted"
							},
							"mintExtension(address)": {
								"details": "mint a token. Can only be called by a registered extension. Returns tokenId minted"
							},
							"mintExtension(address,string)": {
								"details": "mint a token. Can only be called by a registered extension. Returns tokenId minted"
							},
							"mintExtensionBatch(address,string[])": {
								"details": "batch mint a token. Can only be called by a registered extension. Returns tokenId minted"
							},
							"mintExtensionBatch(address,uint16)": {
								"details": "batch mint a token. Can only be called by a registered extension. Returns tokenIds minted"
							},
							"registerExtension(address,string)": {
								"details": "add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added."
							},
							"registerExtension(address,string,bool)": {
								"details": "add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added."
							},
							"setApproveTransferExtension(bool)": {
								"details": "Configure so transfers of tokens created by the caller (must be extension) gets approval from the extension before transferring"
							},
							"setBaseTokenURI(string)": {
								"details": "set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin. For tokens with no uri configured, tokenURI will return \"uri+tokenId\""
							},
							"setBaseTokenURIExtension(string)": {
								"details": "set the baseTokenURI of an extension.  Can only be called by extension."
							},
							"setBaseTokenURIExtension(string,bool)": {
								"details": "set the baseTokenURI of an extension.  Can only be called by extension. For tokens with no uri configured, tokenURI will return \"uri+tokenId\""
							},
							"setMintPermissions(address,address)": {
								"details": "set a permissions contract for an extension.  Used to control minting."
							},
							"setRoyalties(address[],uint256[])": {
								"details": "Set default royalties"
							},
							"setRoyalties(uint256,address[],uint256[])": {
								"details": "Set royalties of a token"
							},
							"setRoyaltiesExtension(address,address[],uint256[])": {
								"details": "Set royalties of an extension"
							},
							"setTokenURI(uint256,string)": {
								"details": "set the tokenURI of a token with no extension.  Can only be called by owner/admin."
							},
							"setTokenURI(uint256[],string[])": {
								"details": "set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin."
							},
							"setTokenURIExtension(uint256,string)": {
								"details": "set the tokenURI of a token extension.  Can only be called by extension that minted token."
							},
							"setTokenURIExtension(uint256[],string[])": {
								"details": "set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token."
							},
							"setTokenURIPrefix(string)": {
								"details": "set the common prefix for tokens with no extension.  Can only be called by owner/admin. If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\" Useful if you want to use ipfs/arweave"
							},
							"setTokenURIPrefixExtension(string)": {
								"details": "set the common prefix of an extension.  Can only be called by extension. If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\" Useful if you want to use ipfs/arweave"
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenExtension(uint256)": {
								"details": "get the extension of a given token"
							},
							"unregisterExtension(address)": {
								"details": "add an extension.  Can only be called by contract owner or admin. Returns True if removed, False if already removed."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"blacklistExtension(address)": "02e7afb7",
							"burn(uint256)": "42966c68",
							"getExtensions()": "83b7db63",
							"getFeeBps(uint256)": "0ebd4c7f",
							"getFeeRecipients(uint256)": "b9c4d9fb",
							"getFees(uint256)": "d5a06d4c",
							"getRoyalties(uint256)": "bb3bafd6",
							"mintBase(address)": "72ff03d3",
							"mintBase(address,string)": "7884af44",
							"mintBaseBatch(address,string[])": "7aa15f16",
							"mintBaseBatch(address,uint16)": "ad2d0ddd",
							"mintExtension(address)": "2928ca58",
							"mintExtension(address,string)": "fe2e1f58",
							"mintExtensionBatch(address,string[])": "38e52e78",
							"mintExtensionBatch(address,uint16)": "e00aab4b",
							"registerExtension(address,string)": "3071a0f9",
							"registerExtension(address,string,bool)": "3f0f37f6",
							"royaltyInfo(uint256,uint256)": "2a55205a",
							"setApproveTransferExtension(bool)": "ac0c8cfa",
							"setBaseTokenURI(string)": "30176e13",
							"setBaseTokenURIExtension(string)": "3e6134b8",
							"setBaseTokenURIExtension(string,bool)": "82dcc0c8",
							"setMintPermissions(address,address)": "f0cdc499",
							"setRoyalties(address[],uint256[])": "332dd1ae",
							"setRoyalties(uint256,address[],uint256[])": "20e4afe2",
							"setRoyaltiesExtension(address,address[],uint256[])": "b0fe87c9",
							"setTokenURI(uint256,string)": "162094c4",
							"setTokenURI(uint256[],string[])": "aafb2d44",
							"setTokenURIExtension(uint256,string)": "e92a89f6",
							"setTokenURIExtension(uint256[],string[])": "61e5bc6b",
							"setTokenURIPrefix(string)": "99e0dd7c",
							"setTokenURIPrefixExtension(string)": "66d1e9d0",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenExtension(uint256)": "239be317",
							"unregisterExtension(address)": "ce8aee9d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"DefaultRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ExtensionApproveTransferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"ExtensionRoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExtensionUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MintPermissionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"RoyaltiesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"blacklistExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtensions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintBaseBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"mintBaseBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"mintExtensionBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"mintExtensionBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"baseURIIdentical\",\"type\":\"bool\"}],\"name\":\"registerExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setApproveTransferExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"}],\"name\":\"setBaseTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"permissions\",\"type\":\"address\"}],\"name\":\"setMintPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyaltiesExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uri\",\"type\":\"string[]\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefixExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"unregisterExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Core ERC721 creator interface\",\"kind\":\"dev\",\"methods\":{\"blacklistExtension(address)\":{\"details\":\"blacklist an extension.  Can only be called by contract owner or admin. This function will destroy all ability to reference the metadata of any tokens created by the specified extension. It will also unregister the extension if needed. Returns True if removed, False if already removed.\"},\"burn(uint256)\":{\"details\":\"burn a token. Can only be called by token owner or approved address. On burn, calls back to the registered extension's onBurn method\"},\"getExtensions()\":{\"details\":\"gets address of all extensions\"},\"getRoyalties(uint256)\":{\"details\":\"Get royalites of a token.  Returns list of receivers and basisPoints\"},\"mintBase(address)\":{\"details\":\"mint a token with no extension. Can only be called by an admin. Returns tokenId minted\"},\"mintBase(address,string)\":{\"details\":\"mint a token with no extension. Can only be called by an admin. Returns tokenId minted\"},\"mintBaseBatch(address,string[])\":{\"details\":\"batch mint a token with no extension. Can only be called by an admin. Returns tokenId minted\"},\"mintBaseBatch(address,uint16)\":{\"details\":\"batch mint a token with no extension. Can only be called by an admin. Returns tokenId minted\"},\"mintExtension(address)\":{\"details\":\"mint a token. Can only be called by a registered extension. Returns tokenId minted\"},\"mintExtension(address,string)\":{\"details\":\"mint a token. Can only be called by a registered extension. Returns tokenId minted\"},\"mintExtensionBatch(address,string[])\":{\"details\":\"batch mint a token. Can only be called by a registered extension. Returns tokenId minted\"},\"mintExtensionBatch(address,uint16)\":{\"details\":\"batch mint a token. Can only be called by a registered extension. Returns tokenIds minted\"},\"registerExtension(address,string)\":{\"details\":\"add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added.\"},\"registerExtension(address,string,bool)\":{\"details\":\"add an extension.  Can only be called by contract owner or admin. extension address must point to a contract implementing ICreatorExtension. Returns True if newly added, False if already added.\"},\"setApproveTransferExtension(bool)\":{\"details\":\"Configure so transfers of tokens created by the caller (must be extension) gets approval from the extension before transferring\"},\"setBaseTokenURI(string)\":{\"details\":\"set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin. For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\"},\"setBaseTokenURIExtension(string)\":{\"details\":\"set the baseTokenURI of an extension.  Can only be called by extension.\"},\"setBaseTokenURIExtension(string,bool)\":{\"details\":\"set the baseTokenURI of an extension.  Can only be called by extension. For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\"},\"setMintPermissions(address,address)\":{\"details\":\"set a permissions contract for an extension.  Used to control minting.\"},\"setRoyalties(address[],uint256[])\":{\"details\":\"Set default royalties\"},\"setRoyalties(uint256,address[],uint256[])\":{\"details\":\"Set royalties of a token\"},\"setRoyaltiesExtension(address,address[],uint256[])\":{\"details\":\"Set royalties of an extension\"},\"setTokenURI(uint256,string)\":{\"details\":\"set the tokenURI of a token with no extension.  Can only be called by owner/admin.\"},\"setTokenURI(uint256[],string[])\":{\"details\":\"set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\"},\"setTokenURIExtension(uint256,string)\":{\"details\":\"set the tokenURI of a token extension.  Can only be called by extension that minted token.\"},\"setTokenURIExtension(uint256[],string[])\":{\"details\":\"set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\"},\"setTokenURIPrefix(string)\":{\"details\":\"set the common prefix for tokens with no extension.  Can only be called by owner/admin. If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\" Useful if you want to use ipfs/arweave\"},\"setTokenURIPrefixExtension(string)\":{\"details\":\"set the common prefix of an extension.  Can only be called by extension. If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\" Useful if you want to use ipfs/arweave\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenExtension(uint256)\":{\"details\":\"get the extension of a given token\"},\"unregisterExtension(address)\":{\"details\":\"add an extension.  Can only be called by contract owner or admin. Returns True if removed, False if already removed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\":\"IERC721CreatorCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\":{\"keccak256\":\"0x2dc54667c7182b70fbfcb5c0775b098d9b6b652cbebdd55d2ef7e4676b84af4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383cef86be81bc48af21a27e945b82dcbb5ed1c1771a7bb68179538c6f8d6b71\",\"dweb:/ipfs/QmV345QPgtbZTqui7YQeA95QB3YCDnG7bX4H5RyUhTd4CX\"]},\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\":{\"keccak256\":\"0xf4f06a129d0081c2d6b2decc23ef16dccf4b723822ca64ab520f56b71fd16f6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3245738f14c48cd85b268394e540fc3b611926240d3eaaf5e5b917a26b36120c\",\"dweb:/ipfs/QmRWLPJ72CWgNnq6THvhp427gNjSS5yUTtSkGwLXQDBeUJ\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol": {
				"ICreatorExtensionTokenURI": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implement this if you want your extension to have overloadable URI's",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenURI(address,uint256)": "e9dc6375"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implement this if you want your extension to have overloadable URI's\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI(address,uint256)\":{\"notice\":\"Get the uri for a given creator/tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\":\"ICreatorExtensionTokenURI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\":{\"keccak256\":\"0x6c8ca804ee7dea9d78f0dacdd9233b1b75ca2b2fa517f52f0fdf6beb34780a51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a04a6f0cce2bbdb022a8125e147519c7fbaa89692c8f0cfee69a67a2956316f\",\"dweb:/ipfs/QmdUxwBEnFshm1j5FEcJctC7DbFWUznis2LaPcKR7FEZX7\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"tokenURI(address,uint256)": {
								"notice": "Get the uri for a given creator/tokenId"
							}
						},
						"version": 1
					}
				}
			},
			"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol": {
				"AdminControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "AdminApproved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "AdminRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "approveAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAdmins",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "admins",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "isAdmin",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "revokeAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approveAdmin(address)": {
								"details": "See {IAdminControl-approveAdmin}."
							},
							"getAdmins()": {
								"details": "See {IAdminControl-getAdmins}."
							},
							"isAdmin(address)": {
								"details": "See {IAdminControl-isAdmin}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"revokeAdmin(address)": {
								"details": "See {IAdminControl-revokeAdmin}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approveAdmin(address)": "6d73e669",
							"getAdmins()": "31ae450b",
							"isAdmin(address)": "24d7806c",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"revokeAdmin(address)": "2d345670",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveAdmin(address)\":{\"details\":\"See {IAdminControl-approveAdmin}.\"},\"getAdmins()\":{\"details\":\"See {IAdminControl-getAdmins}.\"},\"isAdmin(address)\":{\"details\":\"See {IAdminControl-isAdmin}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAdmin(address)\":{\"details\":\"See {IAdminControl-revokeAdmin}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\":\"AdminControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\":{\"keccak256\":\"0xaed5e7784e33745ab1b16f1d87b22084a8b25d531c1dcb8dc41fc2a89e2617da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://44837a9cc639062b2d7424a10e9d579b8d3a9bc1cefede2cfbb917bee8f452ae\",\"dweb:/ipfs/QmburkqmRDZYWjKPRUynhdfkAfP5QDKcXH4WCbH1JC8UDq\"]},\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\":{\"keccak256\":\"0x7cc2e4e7d9052532f445e62ec1fa2f05cc0f5d1d8ee1fea913b43a132277bf2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://266618317d0654fe209b5450b8b5afa3a4a8d41294a2b37ddbae540099859887\",\"dweb:/ipfs/QmYksDqoxhachoqZquXGtjfiuAWJ1rxAKLtUYPL3YboBkE\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad2f29a9c17a4f746416c9e254e17671f43c409dbfa6e4d7d76c3e4a83212d31\",\"dweb:/ipfs/QmTqU65L6iu6yqmXKzcNLPioR8etzKPWycpDJCm17ifVdS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 629,
								"contract": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol:AdminControl",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 408,
								"contract": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol:AdminControl",
								"label": "_admins",
								"offset": 0,
								"slot": "1",
								"type": "t_struct(AddressSet)1430_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(AddressSet)1430_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.AddressSet",
								"members": [
									{
										"astId": 1429,
										"contract": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol:AdminControl",
										"label": "_inner",
										"offset": 0,
										"slot": "0",
										"type": "t_struct(Set)1129_storage"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(Set)1129_storage": {
								"encoding": "inplace",
								"label": "struct EnumerableSet.Set",
								"members": [
									{
										"astId": 1124,
										"contract": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol:AdminControl",
										"label": "_values",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_bytes32)dyn_storage"
									},
									{
										"astId": 1128,
										"contract": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol:AdminControl",
										"label": "_indexes",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_bytes32,t_uint256)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol": {
				"IAdminControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "AdminApproved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "AdminRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "approveAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAdmins",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "isAdmin",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "revokeAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for admin control",
						"kind": "dev",
						"methods": {
							"approveAdmin(address)": {
								"details": "add an admin.  Can only be called by contract owner."
							},
							"getAdmins()": {
								"details": "gets address of all admins"
							},
							"isAdmin(address)": {
								"details": "checks whether or not given address is an admin Returns True if they are"
							},
							"revokeAdmin(address)": {
								"details": "remove an admin.  Can only be called by contract owner."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approveAdmin(address)": "6d73e669",
							"getAdmins()": "31ae450b",
							"isAdmin(address)": "24d7806c",
							"revokeAdmin(address)": "2d345670",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for admin control\",\"kind\":\"dev\",\"methods\":{\"approveAdmin(address)\":{\"details\":\"add an admin.  Can only be called by contract owner.\"},\"getAdmins()\":{\"details\":\"gets address of all admins\"},\"isAdmin(address)\":{\"details\":\"checks whether or not given address is an admin Returns True if they are\"},\"revokeAdmin(address)\":{\"details\":\"remove an admin.  Can only be called by contract owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\":\"IAdminControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\":{\"keccak256\":\"0x7cc2e4e7d9052532f445e62ec1fa2f05cc0f5d1d8ee1fea913b43a132277bf2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://266618317d0654fe209b5450b8b5afa3a4a8d41294a2b37ddbae540099859887\",\"dweb:/ipfs/QmYksDqoxhachoqZquXGtjfiuAWJ1rxAKLtUYPL3YboBkE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 629,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 740,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202505f7bd89ee3504f7c5e27f327b7fcb7ee35b000dc3f5bfe95e2c83299ed7f464736f6c634300080e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202505f7bd89ee3504f7c5e27f327b7fcb7ee35b000dc3f5bfe95e2c83299ed7f464736f6c634300080e0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 SDIV 0xF7 0xBD DUP10 0xEE CALLDATALOAD DIV 0xF7 0xC5 0xE2 PUSH32 0x327B7FCB7EE35B000DC3F5BFE95E2C83299ED7F464736F6C634300080E003300 ",
							"sourceMap": "146:1885:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202505f7bd89ee3504f7c5e27f327b7fcb7ee35b000dc3f5bfe95e2c83299ed7f464736f6c634300080e0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x25 SDIV 0xF7 0xBD DUP10 0xEE CALLDATALOAD DIV 0xF7 0xC5 0xE2 PUSH32 0x327B7FCB7EE35B000DC3F5BFE95E2C83299ED7F464736F6C634300080E003300 ",
							"sourceMap": "146:1885:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202505f7bd89ee3504f7c5e27f327b7fcb7ee35b000dc3f5bfe95e2c83299ed7f464736f6c634300080e0033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol",
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
								"contracts/manifold/lazyclaim/ERC721LazyClaim.sol",
								"contracts/manifold/lazyclaim/IERC721LazyClaim.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":493:2073  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":493:2073  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bfa40ceea9f2f65183bcb275c4f33016476da2990a766d700c291925aa7cd6fe64736f6c634300080e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bfa40ceea9f2f65183bcb275c4f33016476da2990a766d700c291925aa7cd6fe64736f6c634300080e0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF LOG4 0xC 0xEE 0xA9 CALLCODE 0xF6 MLOAD DUP4 0xBC 0xB2 PUSH22 0xC4F33016476DA2990A766D700C291925AA7CD6FE6473 PUSH16 0x6C634300080E00330000000000000000 ",
							"sourceMap": "493:1580:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;493:1580:10;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bfa40ceea9f2f65183bcb275c4f33016476da2990a766d700c291925aa7cd6fe64736f6c634300080e0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF LOG4 0xC 0xEE 0xA9 CALLCODE 0xF6 MLOAD DUP4 0xBC 0xB2 PUSH22 0xC4F33016476DA2990A766D700C291925AA7CD6FE6473 PUSH16 0x6C634300080E00330000000000000000 ",
							"sourceMap": "493:1580:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 493,
									"end": 2073,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bfa40ceea9f2f65183bcb275c4f33016476da2990a766d700c291925aa7cd6fe64736f6c634300080e0033",
									".code": [
										{
											"begin": 493,
											"end": 2073,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 493,
											"end": 2073,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol",
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
								"contracts/manifold/lazyclaim/ERC721LazyClaim.sol",
								"contracts/manifold/lazyclaim/IERC721LazyClaim.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43ea1c4a5760f18794645133057e0a3df8eeac81a6ba266fb95f28233f088662\",\"dweb:/ipfs/QmbUHWmwqBMrub71Rs3dLnAoVkf2HPzmUAKfA6Eu28P3G7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"EnumerableSet": {
					"abi": [],
					"devdoc": {
						"details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":812:12180  library EnumerableSet {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":812:12180  library EnumerableSet {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a6843ec4b8449a3f1bd734d648dae5536fca8c1ac49e1367c34015908918899b64736f6c634300080e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a6843ec4b8449a3f1bd734d648dae5536fca8c1ac49e1367c34015908918899b64736f6c634300080e0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 DUP5 RETURNDATACOPY 0xC4 0xB8 DIFFICULTY SWAP11 EXTCODEHASH SHL 0xD7 CALLVALUE 0xD6 BASEFEE 0xDA 0xE5 MSTORE8 PUSH16 0xCA8C1AC49E1367C34015908918899B64 PUSH20 0x6F6C634300080E00330000000000000000000000 ",
							"sourceMap": "812:11368:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;812:11368:13;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a6843ec4b8449a3f1bd734d648dae5536fca8c1ac49e1367c34015908918899b64736f6c634300080e0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 DUP5 RETURNDATACOPY 0xC4 0xB8 DIFFICULTY SWAP11 EXTCODEHASH SHL 0xD7 CALLVALUE 0xD6 BASEFEE 0xDA 0xE5 MSTORE8 PUSH16 0xCA8C1AC49E1367C34015908918899B64 PUSH20 0x6F6C634300080E00330000000000000000000000 ",
							"sourceMap": "812:11368:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
								"_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_length(struct EnumerableSet.Set storage pointer)": "infinite",
								"_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
								"_values(struct EnumerableSet.Set storage pointer)": "infinite",
								"add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
								"at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"length(struct EnumerableSet.UintSet storage pointer)": "infinite",
								"remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
								"remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
								"remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
								"values(struct EnumerableSet.AddressSet storage pointer)": "infinite",
								"values(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
								"values(struct EnumerableSet.UintSet storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 812,
									"end": 12180,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a6843ec4b8449a3f1bd734d648dae5536fca8c1ac49e1367c34015908918899b64736f6c634300080e0033",
									".code": [
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 812,
											"end": 12180,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol",
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
								"contracts/manifold/lazyclaim/ERC721LazyClaim.sol",
								"contracts/manifold/lazyclaim/IERC721LazyClaim.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad2f29a9c17a4f746416c9e254e17671f43c409dbfa6e4d7d76c3e4a83212d31\",\"dweb:/ipfs/QmTqU65L6iu6yqmXKzcNLPioR8etzKPWycpDJCm17ifVdS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/manifold/lazyclaim/ERC721LazyClaim.sol": {
				"ERC721LazyClaim": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creatorContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint224",
									"name": "claimIndex",
									"type": "uint224"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "initializer",
									"type": "address"
								}
							],
							"name": "ClaimInitialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creatorContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								}
							],
							"name": "ClaimMint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creatorContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "mintCount",
									"type": "uint16"
								}
							],
							"name": "ClaimMintBatch",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint32",
									"name": "mintIndex",
									"type": "uint32"
								}
							],
							"name": "checkMintIndex",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint32[]",
									"name": "mintIndices",
									"type": "uint32[]"
								}
							],
							"name": "checkMintIndices",
							"outputs": [
								{
									"internalType": "bool[]",
									"name": "minted",
									"type": "bool[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "total",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "totalMax",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "walletMax",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "startDate",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "endDate",
											"type": "uint48"
										},
										{
											"internalType": "enum IERC721LazyClaim.StorageProtocol",
											"name": "storageProtocol",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "identical",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "merkleRoot",
											"type": "bytes32"
										},
										{
											"internalType": "string",
											"name": "location",
											"type": "string"
										}
									],
									"internalType": "struct IERC721LazyClaim.Claim",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								}
							],
							"name": "getClaimCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "minter",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								}
							],
							"name": "getTotalMints",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "totalMax",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "walletMax",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "startDate",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "endDate",
											"type": "uint48"
										},
										{
											"internalType": "enum IERC721LazyClaim.StorageProtocol",
											"name": "storageProtocol",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "identical",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "merkleRoot",
											"type": "bytes32"
										},
										{
											"internalType": "string",
											"name": "location",
											"type": "string"
										}
									],
									"internalType": "struct IERC721LazyClaim.ClaimParameters",
									"name": "claimParameters",
									"type": "tuple"
								}
							],
							"name": "initializeClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint32",
									"name": "mintIndex",
									"type": "uint32"
								},
								{
									"internalType": "bytes32[]",
									"name": "merkleProof",
									"type": "bytes32[]"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "mintCount",
									"type": "uint16"
								},
								{
									"internalType": "uint32[]",
									"name": "mintIndices",
									"type": "uint32[]"
								},
								{
									"internalType": "bytes32[][]",
									"name": "merkleProofs",
									"type": "bytes32[][]"
								}
							],
							"name": "mintBatch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "uri",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "totalMax",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "walletMax",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "startDate",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "endDate",
											"type": "uint48"
										},
										{
											"internalType": "enum IERC721LazyClaim.StorageProtocol",
											"name": "storageProtocol",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "identical",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "merkleRoot",
											"type": "bytes32"
										},
										{
											"internalType": "string",
											"name": "location",
											"type": "string"
										}
									],
									"internalType": "struct IERC721LazyClaim.ClaimParameters",
									"name": "claimParameters",
									"type": "tuple"
								}
							],
							"name": "updateClaim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "manifold.xyz",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"title": "Lazy Claim",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":703:14589  contract ERC721LazyClaim is IERC165, IERC721LazyClaim, ICreatorExtensionTokenURI, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  sstore\n    /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":703:14589  contract ERC721LazyClaim is IERC165, IERC721LazyClaim, ICreatorExtensionTokenURI, ReentrancyGuard {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":703:14589  contract ERC721LazyClaim is IERC165, IERC721LazyClaim, ICreatorExtensionTokenURI, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x42f3bef4\n      gt\n      tag_14\n      jumpi\n      dup1\n      0xd5fdfe87\n      gt\n      tag_15\n      jumpi\n      dup1\n      0xd5fdfe87\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xe9dc6375\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xf8a6137b\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      dup1\n      0x42f3bef4\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xbbf2a8c6\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xcda08536\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x0f79ab39\n      gt\n      tag_16\n      jumpi\n      dup1\n      0x0f79ab39\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x1831a643\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x3512da33\n      eq\n      tag_7\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x037b79db\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2304:2607  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {... */\n    tag_3:\n      tag_17\n      tag_18\n      calldatasize\n      0x04\n      tag_19\n      jump\t// in\n    tag_18:\n      tag_20\n      jump\t// in\n    tag_17:\n      mload(0x40)\n        /* \"#utility.yul\":612:626   */\n      swap1\n      iszero\n        /* \"#utility.yul\":605:627   */\n      iszero\n        /* \"#utility.yul\":587:628   */\n      dup2\n      mstore\n        /* \"#utility.yul\":575:577   */\n      0x20\n        /* \"#utility.yul\":560:578   */\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2304:2607  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {... */\n    tag_21:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3221:4673  function initializeClaim(... */\n    tag_4:\n      tag_23\n      tag_24\n      calldatasize\n      0x04\n      tag_25\n      jump\t// in\n    tag_24:\n      tag_26\n      jump\t// in\n    tag_23:\n      mload(0x40)\n        /* \"#utility.yul\":1606:1631   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1594:1596   */\n      0x20\n        /* \"#utility.yul\":1579:1597   */\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3221:4673  function initializeClaim(... */\n      tag_21\n        /* \"#utility.yul\":1460:1637   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6639:6951  function getClaim(address creatorContractAddress, uint256 claimIndex) external override view returns(Claim memory) {... */\n    tag_5:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_21\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4738:6355  function updateClaim(... */\n    tag_6:\n      tag_35\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10469:12658  function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs) external override {... */\n    tag_7:\n      tag_35\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8186:8672  function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external override view returns(uint32) {... */\n    tag_8:\n      tag_43\n      tag_44\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n    tag_43:\n      mload(0x40)\n        /* \"#utility.yul\":6872:6882   */\n      0xffffffff\n        /* \"#utility.yul\":6860:6883   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":6842:6884   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6830:6832   */\n      0x20\n        /* \"#utility.yul\":6815:6833   */\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8186:8672  function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external override view returns(uint32) {... */\n      tag_21\n        /* \"#utility.yul\":6698:6890   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8730:10406  function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof) external override {... */\n    tag_9:\n      tag_35\n      tag_50\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7019:7673  function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) public override view returns(bool) {... */\n    tag_10:\n      tag_17\n      tag_54\n      calldatasize\n      0x04\n      tag_55\n      jump\t// in\n    tag_54:\n      tag_56\n      jump\t// in\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6422:6577  function getClaimCount(address creatorContractAddress) external override view returns(uint256) {... */\n    tag_11:\n      tag_23\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6534:6570  _claimCounts[creatorContractAddress] */\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6508:6515  uint256 */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6534:6570  _claimCounts[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6534:6546  _claimCounts */\n      0x01\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6534:6570  _claimCounts[creatorContractAddress] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6422:6577  function getClaimCount(address creatorContractAddress) external override view returns(uint256) {... */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13697:14587  function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {... */\n    tag_12:\n      tag_63\n      tag_64\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_64:\n      tag_65\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      tag_21\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7743:8119  function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external override view returns(bool[] memory minted) {... */\n    tag_13:\n      tag_68\n      tag_69\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      tag_21\n      swap2\n      swap1\n      tag_73\n      jump\t// in\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2304:2607  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {... */\n    tag_20:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2398:2402  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2421:2470  interfaceId == type(IERC721LazyClaim).interfaceId */\n      dup3\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2436:2470  type(IERC721LazyClaim).interfaceId */\n      0x38dbd06a00000000000000000000000000000000000000000000000000000000\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2421:2470  interfaceId == type(IERC721LazyClaim).interfaceId */\n      eq\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2421:2544  interfaceId == type(IERC721LazyClaim).interfaceId ||... */\n      tag_75\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2486:2544  interfaceId == type(ICreatorExtensionTokenURI).interfaceId */\n      dup3\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2501:2544  type(ICreatorExtensionTokenURI).interfaceId */\n      0xe9dc637500000000000000000000000000000000000000000000000000000000\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2486:2544  interfaceId == type(ICreatorExtensionTokenURI).interfaceId */\n      eq\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2421:2544  interfaceId == type(IERC721LazyClaim).interfaceId ||... */\n    tag_75:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2421:2600  interfaceId == type(IERC721LazyClaim).interfaceId ||... */\n      dup1\n      tag_76\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2560:2600  interfaceId == type(IERC165).interfaceId */\n      dup3\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2575:2600  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2560:2600  interfaceId == type(IERC165).interfaceId */\n      eq\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2421:2600  interfaceId == type(IERC721LazyClaim).interfaceId ||... */\n    tag_76:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2414:2600  return interfaceId == type(IERC721LazyClaim).interfaceId ||... */\n      swap3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":2304:2607  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3221:4673  function initializeClaim(... */\n    tag_26:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3086  creatorCoreContract.isAdmin(msg.sender) */\n      mload(0x40)\n      shl(0xe2, 0x0935e01b)\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3075:3085  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3086  creatorCoreContract.isAdmin(msg.sender) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9841:9915   */\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3414:3421  uint256 */\n      0x00\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3381:3403  creatorContractAddress */\n      dup4\n      swap1\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3074  creatorCoreContract.isAdmin */\n      dup3\n      and\n      swap1\n      0x24d7806c\n      swap1\n        /* \"#utility.yul\":9814:9832   */\n      0x24\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3086  creatorCoreContract.isAdmin(msg.sender) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_81\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_81:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_82\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_82:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3039:3134  require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\") */\n      tag_84\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10501:10503   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3039:3134  require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10483:10504   */\n      mstore\n        /* \"#utility.yul\":10540:10542   */\n      0x2b\n        /* \"#utility.yul\":10520:10538   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10513:10543   */\n      mstore\n        /* \"#utility.yul\":10579:10613   */\n      0x57616c6c6574206973206e6f7420616e2061646d696e6973747261746f722066\n        /* \"#utility.yul\":10559:10577   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10552:10614   */\n      mstore\n      shl(0xaa, 0x1bdc8818dbdb9d1c9858dd)\n        /* \"#utility.yul\":10630:10648   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10623:10664   */\n      mstore\n        /* \"#utility.yul\":10681:10700   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3039:3134  require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\") */\n    tag_85:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_84:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3501:3524  StorageProtocol.INVALID */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3466:3497  claimParameters.storageProtocol */\n      tag_91\n      0xa0\n      dup7\n      add\n      0x80\n      dup8\n      add\n      tag_92\n      jump\t// in\n    tag_91:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3466:3524  claimParameters.storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_94\n      jumpi\n      tag_94\n      tag_90\n      jump\t// in\n    tag_94:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3458:3576  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot initialize with invalid storage protocol\") */\n      tag_95\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11194:11196   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3458:3576  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot initialize with invalid storage protocol\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11176:11197   */\n      mstore\n        /* \"#utility.yul\":11233:11235   */\n      0x2f\n        /* \"#utility.yul\":11213:11231   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11206:11236   */\n      mstore\n        /* \"#utility.yul\":11272:11306   */\n      0x43616e6e6f7420696e697469616c697a65207769746820696e76616c69642073\n        /* \"#utility.yul\":11252:11270   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11245:11307   */\n      mstore\n        /* \"#utility.yul\":11343:11360   */\n      0x746f726167652070726f746f636f6c0000000000000000000000000000000000\n        /* \"#utility.yul\":11323:11341   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11316:11361   */\n      mstore\n        /* \"#utility.yul\":11378:11397   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3458:3576  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot initialize with invalid storage protocol\") */\n      tag_85\n        /* \"#utility.yul\":10992:11403   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3458:3576  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot initialize with invalid storage protocol\") */\n    tag_95:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3594:3617  claimParameters.endDate */\n      tag_98\n      0x80\n      dup6\n      add\n      0x60\n      dup7\n      add\n      tag_99\n      jump\t// in\n    tag_98:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3594:3622  claimParameters.endDate == 0 */\n      0xffffffffffff\n      and\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3594:3677  claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate */\n      tag_100\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3654:3677  claimParameters.endDate */\n      tag_101\n      0x80\n      dup6\n      add\n      0x60\n      dup7\n      add\n      tag_99\n      jump\t// in\n    tag_101:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3626:3677  claimParameters.startDate < claimParameters.endDate */\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3626:3651  claimParameters.startDate */\n      tag_102\n      0x60\n      dup7\n      add\n      0x40\n      dup8\n      add\n      tag_99\n      jump\t// in\n    tag_102:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3626:3677  claimParameters.startDate < claimParameters.endDate */\n      0xffffffffffff\n      and\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3594:3677  claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate */\n    tag_100:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3586:3736  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n      tag_103\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11895:11897   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3586:3736  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11877:11898   */\n      mstore\n        /* \"#utility.yul\":11934:11936   */\n      0x36\n        /* \"#utility.yul\":11914:11932   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11907:11937   */\n      mstore\n        /* \"#utility.yul\":11973:12007   */\n      0x43616e6e6f742068617665207374617274446174652067726561746572207468\n        /* \"#utility.yul\":11953:11971   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11946:12008   */\n      mstore\n        /* \"#utility.yul\":12044:12068   */\n      0x616e206f7220657175616c20746f20656e644461746500000000000000000000\n        /* \"#utility.yul\":12024:12042   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12017:12069   */\n      mstore\n        /* \"#utility.yul\":12086:12105   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3586:3736  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n      tag_85\n        /* \"#utility.yul\":11693:12111   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3586:3736  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n    tag_103:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3754:3780  claimParameters.merkleRoot */\n      0xc0\n      dup5\n      add\n      calldataload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3754:3786  claimParameters.merkleRoot == \"\" */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3754:3820  claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0 */\n      tag_106\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3790:3815  claimParameters.walletMax */\n      tag_107\n      0x40\n      dup6\n      add\n      0x20\n      dup7\n      add\n      tag_108\n      jump\t// in\n    tag_107:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3790:3820  claimParameters.walletMax == 0 */\n      0xffffffff\n      and\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3754:3820  claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0 */\n    tag_106:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3746:3874  require(claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0, \"Cannot provide both mintsPerWallet and merkleRoot\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12507:12509   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3746:3874  require(claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0, \"Cannot provide both mintsPerWallet and merkleRoot\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12489:12510   */\n      mstore\n        /* \"#utility.yul\":12546:12548   */\n      0x31\n        /* \"#utility.yul\":12526:12544   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12519:12549   */\n      mstore\n        /* \"#utility.yul\":12585:12619   */\n      0x43616e6e6f742070726f7669646520626f7468206d696e747350657257616c6c\n        /* \"#utility.yul\":12565:12583   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12558:12620   */\n      mstore\n        /* \"#utility.yul\":12656:12675   */\n      0x657420616e64206d65726b6c65526f6f74000000000000000000000000000000\n        /* \"#utility.yul\":12636:12654   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12629:12676   */\n      mstore\n        /* \"#utility.yul\":12693:12712   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3746:3874  require(claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0, \"Cannot provide both mintsPerWallet and merkleRoot\") */\n      tag_85\n        /* \"#utility.yul\":12305:12718   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3746:3874  require(claimParameters.merkleRoot == \"\" || claimParameters.walletMax == 0, \"Cannot provide both mintsPerWallet and merkleRoot\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3932:3968  _claimCounts[creatorContractAddress] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3932:3944  _claimCounts */\n      0x01\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3932:3968  _claimCounts[creatorContractAddress] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3932:3970  _claimCounts[creatorContractAddress]++ */\n      dup1\n      sload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      swap2\n      tag_112\n      dup4\n      tag_113\n      jump\t// in\n    tag_112:\n      dup3\n      sload\n      0x0100\n      swap3\n      swap1\n      swap3\n      exp\n      sub(shl(0xe0, 0x01), 0x01)\n      dup2\n      dup2\n      mul\n      not\n      swap1\n      swap4\n      and\n      swap2\n      dup4\n      and\n      mul\n      or\n      swap1\n      swap2\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3999:4035  _claimCounts[creatorContractAddress] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n      0x01\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      dup2\n      mload\n      0x0120\n      dup2\n      add\n      swap1\n      swap3\n      mstore\n      swap3\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3999:4035  _claimCounts[creatorContractAddress] */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      swap1\n      dup2\n      dup2\n      add\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4170:4194  claimParameters.totalMax */\n      tag_114\n      swap1\n      dup9\n      add\n      dup9\n      tag_108\n      jump\t// in\n    tag_114:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      0xffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4219:4234  claimParameters */\n      dup7\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4219:4244  claimParameters.walletMax */\n      0x20\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_115\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_115:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      0xffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4269:4294  claimParameters.startDate */\n      tag_116\n      0x60\n      dup9\n      add\n      0x40\n      dup10\n      add\n      tag_99\n      jump\t// in\n    tag_116:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      0xffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4317:4340  claimParameters.endDate */\n      tag_117\n      0x80\n      dup9\n      add\n      0x60\n      dup10\n      add\n      tag_99\n      jump\t// in\n    tag_117:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      0xffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4371:4402  claimParameters.storageProtocol */\n      tag_118\n      0xa0\n      dup9\n      add\n      0x80\n      dup10\n      add\n      tag_92\n      jump\t// in\n    tag_118:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_120\n      jumpi\n      tag_120\n      tag_90\n      jump\t// in\n    tag_120:\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4427:4452  claimParameters.identical */\n      tag_121\n      0xc0\n      dup9\n      add\n      0xa0\n      dup10\n      add\n      tag_122\n      jump\t// in\n    tag_121:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      iszero\n      iszero\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4478:4504  claimParameters.merkleRoot */\n      0xc0\n      dup8\n      add\n      calldataload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      0x20\n      dup3\n      add\n      mstore\n      0x40\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4528:4552  claimParameters.location */\n      tag_123\n      0xe0\n      dup9\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4478:4493  claimParameters */\n      dup9\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4528:4552  claimParameters.location */\n      tag_124\n      jump\t// in\n    tag_123:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4118:4563  Claim({... */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      dup3\n      swap1\n      mstore\n      pop\n      swap4\n      swap1\n      swap5\n      mstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4105  _claims[creatorContractAddress] */\n      dup10\n      and\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4081  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4105  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xe0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4115  _claims[creatorContractAddress][newIndex] */\n      dup8\n      and\n      dup5\n      mstore\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4563  _claims[creatorContractAddress][newIndex] = Claim({... */\n      dup5\n      mload\n      dup2\n      sload\n      swap3\n      dup7\n      add\n      mload\n      swap4\n      dup7\n      add\n      mload\n      0x60\n      dup8\n      add\n      mload\n      0x80\n      dup9\n      add\n      mload\n      0xffffffffffff\n      swap1\n      dup2\n      and\n      shl(0x90, 0x01)\n      mul\n      0xffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff\n      swap2\n      swap1\n      swap3\n      and\n      shl(0x60, 0x01)\n      mul\n      not(0xffffffffffff000000000000000000000000)\n      0xffffffff\n      swap5\n      dup6\n      and\n      shl(0x40, 0x01)\n      mul\n      and\n      not(0xffffffffffffffffffff0000000000000000)\n      swap9\n      dup6\n      and\n      0x0100000000\n      mul\n      not(0xffffffffffffffff)\n      swap1\n      swap9\n      and\n      swap5\n      swap1\n      swap6\n      and\n      swap4\n      swap1\n      swap4\n      or\n      swap6\n      swap1\n      swap6\n      or\n      swap6\n      swap1\n      swap6\n      and\n      swap2\n      swap1\n      swap2\n      or\n      or\n      swap2\n      dup3\n      and\n      dup4\n      or\n      dup2\n      sstore\n      0xa0\n      dup6\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4115  _claims[creatorContractAddress][newIndex] */\n      swap1\n      swap4\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4563  _claims[creatorContractAddress][newIndex] = Claim({... */\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4115  _claims[creatorContractAddress][newIndex] */\n      dup4\n      swap2\n      not(shl(0xc0, 0xff))\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4074:4563  _claims[creatorContractAddress][newIndex] = Claim({... */\n      swap1\n      swap2\n      and\n      0xffffffffffffff00000000000000ffffffffffffffffffffffffffffffffffff\n      swap1\n      swap2\n      and\n      or\n      shl(0xc0, 0x01)\n      dup4\n      0x03\n      dup2\n      gt\n      iszero\n      tag_126\n      jumpi\n      tag_126\n      tag_90\n      jump\t// in\n    tag_126:\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      sload\n      swap1\n      iszero\n      iszero\n      shl(0xc8, 0x01)\n      mul\n      not(shl(0xc8, 0xff))\n      swap1\n      swap2\n      and\n      or\n      dup2\n      sstore\n      0xe0\n      dup3\n      add\n      mload\n      0x01\n      dup3\n      add\n      sstore\n      0x0100\n      dup3\n      add\n      mload\n      dup1\n      mload\n      tag_127\n      swap2\n      0x02\n      dup5\n      add\n      swap2\n      0x20\n      swap1\n      swap2\n      add\n      swap1\n      tag_128\n      jump\t// in\n    tag_127:\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4579:4641  ClaimInitialized(creatorContractAddress, newIndex, msg.sender) */\n      mload(0x40)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4630:4640  msg.sender */\n      caller\n        /* \"#utility.yul\":9841:9915   */\n      dup2\n      mstore\n      sub(shl(0xe0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4579:4641  ClaimInitialized(creatorContractAddress, newIndex, msg.sender) */\n      dup4\n      and\n      swap2\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup9\n      and\n      swap1\n      0xcf76e1beb8dcf887c917933e1d0970eafadb9a69b82cfd5f44740a0dce6f45a6\n      swap1\n        /* \"#utility.yul\":9829:9831   */\n      0x20\n        /* \"#utility.yul\":9814:9832   */\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4579:4641  ClaimInitialized(creatorContractAddress, newIndex, msg.sender) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n      sub(shl(0xe0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4651:4666  return newIndex */\n      and\n      swap6\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3221:4673  function initializeClaim(... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6639:6951  function getClaim(address creatorContractAddress, uint256 claimIndex) external override view returns(Claim memory) {... */\n    tag_32:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6740:6752  Claim memory */\n      tag_130\n      0x40\n      dup1\n      mload\n      0x0120\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x60\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x80\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      swap1\n      0xa0\n      dup3\n      add\n      swap1\n      dup2\n      mstore\n      0x00\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x40\n      dup3\n      add\n      mstore\n      0x60\n      swap1\n      dup2\n      add\n      mstore\n      swap1\n      jump\n    tag_130:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6835:6858  StorageProtocol.INVALID */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6772:6803  _claims[creatorContractAddress] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6772:6779  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6772:6803  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6772:6815  _claims[creatorContractAddress][claimIndex] */\n      dup7\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6772:6831  _claims[creatorContractAddress][claimIndex].storageProtocol */\n      sload\n      shl(0xc0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6772:6858  _claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_136\n      jumpi\n      tag_136\n      tag_90\n      jump\t// in\n    tag_136:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6764:6884  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_137\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14142:14144   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6764:6884  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14124:14145   */\n      mstore\n        /* \"#utility.yul\":14181:14183   */\n      0x15\n        /* \"#utility.yul\":14161:14179   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14154:14184   */\n      mstore\n      shl(0x5a, 0x10db185a5b481b9bdd081a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":14200:14218   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14193:14244   */\n      mstore\n        /* \"#utility.yul\":14261:14279   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6764:6884  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_85\n        /* \"#utility.yul\":13940:14285   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6764:6884  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n    tag_137:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6901:6932  _claims[creatorContractAddress] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6901:6908  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6901:6932  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6901:6944  _claims[creatorContractAddress][claimIndex] */\n      dup6\n      dup5\n      mstore\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6894:6944  return _claims[creatorContractAddress][claimIndex] */\n      dup3\n      mload\n      0x0120\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      0xffffffff\n      dup1\n      dup3\n      and\n      dup4\n      mstore\n      0x0100000000\n      dup3\n      div\n      dup2\n      and\n      swap5\n      dup4\n      add\n      swap5\n      swap1\n      swap5\n      mstore\n      shl(0x40, 0x01)\n      dup2\n      div\n      swap1\n      swap4\n      and\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0xffffffffffff\n      shl(0x60, 0x01)\n      dup4\n      div\n      dup2\n      and\n      0x60\n      dup6\n      add\n      mstore\n      shl(0x90, 0x01)\n      dup4\n      div\n      and\n      0x80\n      dup5\n      add\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6901:6944  _claims[creatorContractAddress][claimIndex] */\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6894:6944  return _claims[creatorContractAddress][claimIndex] */\n      0xa0\n      dup4\n      add\n      swap1\n      0xff\n      shl(0xc0, 0x01)\n      swap1\n      swap2\n      div\n      and\n      0x03\n      dup2\n      gt\n      iszero\n      tag_141\n      jumpi\n      tag_141\n      tag_90\n      jump\t// in\n    tag_141:\n      0x03\n      dup2\n      gt\n      iszero\n      tag_143\n      jumpi\n      tag_143\n      tag_90\n      jump\t// in\n    tag_143:\n      dup2\n      mstore\n      dup2\n      sload\n      shl(0xc8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      0x20\n      dup3\n      add\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      0x40\n      dup3\n      add\n      mstore\n      0x02\n      dup3\n      add\n      dup1\n      sload\n      0x60\n      swap1\n      swap3\n      add\n      swap2\n      tag_144\n      swap1\n      tag_145\n      jump\t// in\n    tag_144:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_146\n      swap1\n      tag_145\n      jump\t// in\n    tag_146:\n      dup1\n      iszero\n      tag_147\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_148\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_147)\n    tag_148:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_149:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_149\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_147:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6639:6951  function getClaim(address creatorContractAddress, uint256 claimIndex) external override view returns(Claim memory) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4738:6355  function updateClaim(... */\n    tag_38:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3086  creatorCoreContract.isAdmin(msg.sender) */\n      mload(0x40)\n      shl(0xe2, 0x0935e01b)\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3075:3085  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3086  creatorCoreContract.isAdmin(msg.sender) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9841:9915   */\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4922:4944  creatorContractAddress */\n      dup4\n      swap1\n      dup2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3074  creatorCoreContract.isAdmin */\n      dup3\n      and\n      swap1\n      0x24d7806c\n      swap1\n        /* \"#utility.yul\":9814:9832   */\n      0x24\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3047:3086  creatorCoreContract.isAdmin(msg.sender) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_153\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_153:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_154\n      swap2\n      swap1\n      tag_83\n      jump\t// in\n    tag_154:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3039:3134  require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\") */\n      tag_155\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10501:10503   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3039:3134  require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10483:10504   */\n      mstore\n        /* \"#utility.yul\":10540:10542   */\n      0x2b\n        /* \"#utility.yul\":10520:10538   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10513:10543   */\n      mstore\n        /* \"#utility.yul\":10579:10613   */\n      0x57616c6c6574206973206e6f7420616e2061646d696e6973747261746f722066\n        /* \"#utility.yul\":10559:10577   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10552:10614   */\n      mstore\n      shl(0xaa, 0x1bdc8818dbdb9d1c9858dd)\n        /* \"#utility.yul\":10630:10648   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10623:10664   */\n      mstore\n        /* \"#utility.yul\":10681:10700   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3039:3134  require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\") */\n      tag_85\n        /* \"#utility.yul\":10299:10706   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":3039:3134  require(creatorCoreContract.isAdmin(msg.sender), \"Wallet is not an administrator for contract\") */\n    tag_155:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5052:5075  StorageProtocol.INVALID */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4989:5020  _claims[creatorContractAddress] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4989:4996  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4989:5020  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4989:5032  _claims[creatorContractAddress][claimIndex] */\n      dup9\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4989:5048  _claims[creatorContractAddress][claimIndex].storageProtocol */\n      sload\n      shl(0xc0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4989:5075  _claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_161\n      jumpi\n      tag_161\n      tag_90\n      jump\t// in\n    tag_161:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4981:5101  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_162\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14142:14144   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4981:5101  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14124:14145   */\n      mstore\n        /* \"#utility.yul\":14181:14183   */\n      0x15\n        /* \"#utility.yul\":14161:14179   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14154:14184   */\n      mstore\n      shl(0x5a, 0x10db185a5b481b9bdd081a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":14200:14218   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14193:14244   */\n      mstore\n        /* \"#utility.yul\":14261:14279   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4981:5101  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_85\n        /* \"#utility.yul\":13940:14285   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4981:5101  require(_claims[creatorContractAddress][claimIndex].storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n    tag_162:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5154:5177  StorageProtocol.INVALID */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5119:5150  claimParameters.storageProtocol */\n      tag_166\n      0xa0\n      dup6\n      add\n      0x80\n      dup7\n      add\n      tag_92\n      jump\t// in\n    tag_166:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5119:5177  claimParameters.storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_168\n      jumpi\n      tag_168\n      tag_90\n      jump\t// in\n    tag_168:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5111:5217  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot set invalid storage protocol\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14934:14936   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5111:5217  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot set invalid storage protocol\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14916:14937   */\n      mstore\n        /* \"#utility.yul\":14973:14975   */\n      0x23\n        /* \"#utility.yul\":14953:14971   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14946:14976   */\n      mstore\n        /* \"#utility.yul\":15012:15046   */\n      0x43616e6e6f742073657420696e76616c69642073746f726167652070726f746f\n        /* \"#utility.yul\":14992:15010   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14985:15047   */\n      mstore\n        /* \"#utility.yul\":15083:15088   */\n      0x636f6c0000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15063:15081   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":15056:15089   */\n      mstore\n        /* \"#utility.yul\":15106:15125   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5111:5217  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot set invalid storage protocol\") */\n      tag_85\n        /* \"#utility.yul\":14732:15131   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5111:5217  require(claimParameters.storageProtocol != StorageProtocol.INVALID, \"Cannot set invalid storage protocol\") */\n    tag_169:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5266  _claims[creatorContractAddress] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5242  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5266  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5278  _claims[creatorContractAddress][claimIndex] */\n      dup8\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5287  _claims[creatorContractAddress][claimIndex].totalMax */\n      sload\n      0x0100000000\n      swap1\n      div\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5292  _claims[creatorContractAddress][claimIndex].totalMax == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5377  _claims[creatorContractAddress][claimIndex].totalMax == 0 ||  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax */\n      tag_172\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5353:5377  claimParameters.totalMax */\n      tag_173\n      0x20\n      dup5\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5353:5368  claimParameters */\n      dup5\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5353:5377  claimParameters.totalMax */\n      tag_108\n      jump\t// in\n    tag_173:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5328  _claims[creatorContractAddress] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5304  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5328  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5340  _claims[creatorContractAddress][claimIndex] */\n      dup9\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5349  _claims[creatorContractAddress][claimIndex].totalMax */\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5377  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax */\n      0xffffffff\n      swap2\n      dup3\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5349  _claims[creatorContractAddress][claimIndex].totalMax */\n      0x0100000000\n      swap1\n      swap2\n      div\n      swap1\n      swap2\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5297:5377  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax */\n      gt\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5235:5377  _claims[creatorContractAddress][claimIndex].totalMax == 0 ||  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax */\n    tag_172:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5227:5406  require(_claims[creatorContractAddress][claimIndex].totalMax == 0 ||  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax, \"Cannot decrease totalMax\") */\n      tag_174\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15338:15340   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5227:5406  require(_claims[creatorContractAddress][claimIndex].totalMax == 0 ||  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax, \"Cannot decrease totalMax\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15320:15341   */\n      mstore\n        /* \"#utility.yul\":15377:15379   */\n      0x18\n        /* \"#utility.yul\":15357:15375   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15350:15380   */\n      mstore\n        /* \"#utility.yul\":15416:15442   */\n      0x43616e6e6f7420646563726561736520746f74616c4d61780000000000000000\n        /* \"#utility.yul\":15396:15414   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15389:15443   */\n      mstore\n        /* \"#utility.yul\":15460:15478   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5227:5406  require(_claims[creatorContractAddress][claimIndex].totalMax == 0 ||  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax, \"Cannot decrease totalMax\") */\n      tag_85\n        /* \"#utility.yul\":15136:15484   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5227:5406  require(_claims[creatorContractAddress][claimIndex].totalMax == 0 ||  _claims[creatorContractAddress][claimIndex].totalMax <= claimParameters.totalMax, \"Cannot decrease totalMax\") */\n    tag_174:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5455  _claims[creatorContractAddress] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5431  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5455  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5467  _claims[creatorContractAddress][claimIndex] */\n      dup8\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5477  _claims[creatorContractAddress][claimIndex].walletMax */\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5482  _claims[creatorContractAddress][claimIndex].walletMax == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5568  _claims[creatorContractAddress][claimIndex].walletMax == 0 || _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax */\n      tag_177\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5543:5568  claimParameters.walletMax */\n      tag_178\n      0x40\n      dup5\n      add\n      0x20\n      dup6\n      add\n      tag_108\n      jump\t// in\n    tag_178:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5517  _claims[creatorContractAddress] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5493  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5517  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5529  _claims[creatorContractAddress][claimIndex] */\n      dup9\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5539  _claims[creatorContractAddress][claimIndex].walletMax */\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5568  _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax */\n      0xffffffff\n      swap2\n      dup3\n      and\n      shl(0x40, 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5539  _claims[creatorContractAddress][claimIndex].walletMax */\n      swap1\n      swap2\n      div\n      swap1\n      swap2\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5486:5568  _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax */\n      gt\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5424:5568  _claims[creatorContractAddress][claimIndex].walletMax == 0 || _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax */\n    tag_177:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5416:5598  require(_claims[creatorContractAddress][claimIndex].walletMax == 0 || _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax, \"Cannot decrease walletMax\") */\n      tag_179\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15691:15693   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5416:5598  require(_claims[creatorContractAddress][claimIndex].walletMax == 0 || _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax, \"Cannot decrease walletMax\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15673:15694   */\n      mstore\n        /* \"#utility.yul\":15730:15732   */\n      0x19\n        /* \"#utility.yul\":15710:15728   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15703:15733   */\n      mstore\n        /* \"#utility.yul\":15769:15796   */\n      0x43616e6e6f742064656372656173652077616c6c65744d617800000000000000\n        /* \"#utility.yul\":15749:15767   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15742:15797   */\n      mstore\n        /* \"#utility.yul\":15814:15832   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5416:5598  require(_claims[creatorContractAddress][claimIndex].walletMax == 0 || _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax, \"Cannot decrease walletMax\") */\n      tag_85\n        /* \"#utility.yul\":15489:15838   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5416:5598  require(_claims[creatorContractAddress][claimIndex].walletMax == 0 || _claims[creatorContractAddress][claimIndex].walletMax <= claimParameters.walletMax, \"Cannot decrease walletMax\") */\n    tag_179:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5616:5639  claimParameters.endDate */\n      tag_182\n      0x80\n      dup5\n      add\n      0x60\n      dup6\n      add\n      tag_99\n      jump\t// in\n    tag_182:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5616:5644  claimParameters.endDate == 0 */\n      0xffffffffffff\n      and\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5616:5699  claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate */\n      tag_183\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5676:5699  claimParameters.endDate */\n      tag_184\n      0x80\n      dup5\n      add\n      0x60\n      dup6\n      add\n      tag_99\n      jump\t// in\n    tag_184:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5648:5699  claimParameters.startDate < claimParameters.endDate */\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5648:5673  claimParameters.startDate */\n      tag_185\n      0x60\n      dup6\n      add\n      0x40\n      dup7\n      add\n      tag_99\n      jump\t// in\n    tag_185:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5648:5699  claimParameters.startDate < claimParameters.endDate */\n      0xffffffffffff\n      and\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5616:5699  claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate */\n    tag_183:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5608:5758  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n      tag_186\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11895:11897   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5608:5758  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11877:11898   */\n      mstore\n        /* \"#utility.yul\":11934:11936   */\n      0x36\n        /* \"#utility.yul\":11914:11932   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11907:11937   */\n      mstore\n        /* \"#utility.yul\":11973:12007   */\n      0x43616e6e6f742068617665207374617274446174652067726561746572207468\n        /* \"#utility.yul\":11953:11971   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11946:12008   */\n      mstore\n        /* \"#utility.yul\":12044:12068   */\n      0x616e206f7220657175616c20746f20656e644461746500000000000000000000\n        /* \"#utility.yul\":12024:12042   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12017:12069   */\n      mstore\n        /* \"#utility.yul\":12086:12105   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5608:5758  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n      tag_85\n        /* \"#utility.yul\":11693:12111   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5608:5758  require(claimParameters.endDate == 0 || claimParameters.startDate < claimParameters.endDate, \"Cannot have startDate greater than or equal to endDate\") */\n    tag_186:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      0x40\n      dup1\n      mload\n      0x0120\n      dup2\n      add\n      dup3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5882:5913  _claims[creatorContractAddress] */\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5882:5889  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5882:5913  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      dup4\n      dup3\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5882:5925  _claims[creatorContractAddress][claimIndex] */\n      dup9\n      dup4\n      mstore\n      dup2\n      mstore\n      swap3\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5882:5931  _claims[creatorContractAddress][claimIndex].total */\n      sload\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      dup2\n      mstore\n      swap1\n      dup1\n      dup3\n      add\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5955:5979  claimParameters.totalMax */\n      tag_188\n      swap1\n      dup7\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5955:5970  claimParameters */\n      dup7\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5955:5979  claimParameters.totalMax */\n      tag_108\n      jump\t// in\n    tag_188:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      0xffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6004:6019  claimParameters */\n      dup5\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6004:6029  claimParameters.walletMax */\n      0x20\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_189\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_189:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      0xffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6054:6079  claimParameters.startDate */\n      tag_190\n      0x60\n      dup7\n      add\n      0x40\n      dup8\n      add\n      tag_99\n      jump\t// in\n    tag_190:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      0xffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6102:6125  claimParameters.endDate */\n      tag_191\n      0x80\n      dup7\n      add\n      0x60\n      dup8\n      add\n      tag_99\n      jump\t// in\n    tag_191:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      0xffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6156:6187  claimParameters.storageProtocol */\n      tag_192\n      0xa0\n      dup7\n      add\n      0x80\n      dup8\n      add\n      tag_92\n      jump\t// in\n    tag_192:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_194\n      jumpi\n      tag_194\n      tag_90\n      jump\t// in\n    tag_194:\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6212:6237  claimParameters.identical */\n      tag_195\n      0xc0\n      dup7\n      add\n      0xa0\n      dup8\n      add\n      tag_122\n      jump\t// in\n    tag_195:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      iszero\n      iszero\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6263:6289  claimParameters.merkleRoot */\n      0xc0\n      dup6\n      add\n      calldataload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      0x20\n      dup3\n      add\n      mstore\n      0x40\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6313:6337  claimParameters.location */\n      tag_196\n      0xe0\n      dup7\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6263:6278  claimParameters */\n      dup7\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":6313:6337  claimParameters.location */\n      tag_124\n      jump\t// in\n    tag_196:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5855:6348  Claim({... */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      dup3\n      swap1\n      mstore\n      pop\n      swap4\n      swap1\n      swap5\n      mstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:5840  _claims[creatorContractAddress] */\n      dup9\n      and\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:5816  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:5840  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:5852  _claims[creatorContractAddress][claimIndex] */\n      dup10\n      dup5\n      mstore\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:6348  _claims[creatorContractAddress][claimIndex] = Claim({... */\n      dup5\n      mload\n      dup2\n      sload\n      swap3\n      dup7\n      add\n      mload\n      swap4\n      dup7\n      add\n      mload\n      0x60\n      dup8\n      add\n      mload\n      0x80\n      dup9\n      add\n      mload\n      0xffffffffffff\n      swap1\n      dup2\n      and\n      shl(0x90, 0x01)\n      mul\n      0xffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff\n      swap2\n      swap1\n      swap3\n      and\n      shl(0x60, 0x01)\n      mul\n      not(0xffffffffffff000000000000000000000000)\n      0xffffffff\n      swap5\n      dup6\n      and\n      shl(0x40, 0x01)\n      mul\n      and\n      not(0xffffffffffffffffffff0000000000000000)\n      swap9\n      dup6\n      and\n      0x0100000000\n      mul\n      not(0xffffffffffffffff)\n      swap1\n      swap9\n      and\n      swap5\n      swap1\n      swap6\n      and\n      swap4\n      swap1\n      swap4\n      or\n      swap6\n      swap1\n      swap6\n      or\n      swap6\n      swap1\n      swap6\n      and\n      swap2\n      swap1\n      swap2\n      or\n      or\n      swap2\n      dup3\n      and\n      dup4\n      or\n      dup2\n      sstore\n      0xa0\n      dup6\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:5852  _claims[creatorContractAddress][claimIndex] */\n      swap1\n      swap4\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:6348  _claims[creatorContractAddress][claimIndex] = Claim({... */\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:5852  _claims[creatorContractAddress][claimIndex] */\n      dup4\n      swap2\n      not(shl(0xc0, 0xff))\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":5809:6348  _claims[creatorContractAddress][claimIndex] = Claim({... */\n      swap1\n      swap2\n      and\n      0xffffffffffffff00000000000000ffffffffffffffffffffffffffffffffffff\n      swap1\n      swap2\n      and\n      or\n      shl(0xc0, 0x01)\n      dup4\n      0x03\n      dup2\n      gt\n      iszero\n      tag_198\n      jumpi\n      tag_198\n      tag_90\n      jump\t// in\n    tag_198:\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      sload\n      swap1\n      iszero\n      iszero\n      shl(0xc8, 0x01)\n      mul\n      not(shl(0xc8, 0xff))\n      swap1\n      swap2\n      and\n      or\n      dup2\n      sstore\n      0xe0\n      dup3\n      add\n      mload\n      0x01\n      dup3\n      add\n      sstore\n      0x0100\n      dup3\n      add\n      mload\n      dup1\n      mload\n      tag_199\n      swap2\n      0x02\n      dup5\n      add\n      swap2\n      0x20\n      swap1\n      swap2\n      add\n      swap1\n      tag_128\n      jump\t// in\n    tag_199:\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":4738:6355  function updateClaim(... */\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10469:12658  function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs) external override {... */\n    tag_42:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10674:10705  _claims[creatorContractAddress] */\n      dup8\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10652:10671  Claim storage claim */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10674:10705  _claims[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10674:10681  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10674:10705  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10674:10717  _claims[creatorContractAddress][claimIndex] */\n      dup10\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10781:10802  claim.storageProtocol */\n      dup2\n      sload\n      shl(0xc0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10781:10829  claim.storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_204\n      jumpi\n      tag_204\n      tag_90\n      jump\t// in\n    tag_204:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10773:10855  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_205\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14142:14144   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10773:10855  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14124:14145   */\n      mstore\n        /* \"#utility.yul\":14181:14183   */\n      0x15\n        /* \"#utility.yul\":14161:14179   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14154:14184   */\n      mstore\n      shl(0x5a, 0x10db185a5b481b9bdd081a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":14200:14218   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14193:14244   */\n      mstore\n        /* \"#utility.yul\":14261:14279   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10773:10855  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_85\n        /* \"#utility.yul\":13940:14285   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10773:10855  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n    tag_205:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10902:10917  claim.startDate */\n      dup1\n      sload\n      shl(0x60, 0x01)\n      swap1\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10902:10922  claim.startDate == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10902:10959  claim.startDate == 0 || claim.startDate < block.timestamp */\n      tag_207\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10926:10941  claim.startDate */\n      dup1\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10944:10959  block.timestamp */\n      timestamp\n      shl(0x60, 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10926:10941  claim.startDate */\n      swap1\n      swap2\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10926:10959  claim.startDate < block.timestamp */\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10902:10959  claim.startDate == 0 || claim.startDate < block.timestamp */\n    tag_207:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10894:10993  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n      tag_208\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16045:16047   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10894:10993  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16027:16048   */\n      mstore\n        /* \"#utility.yul\":16084:16086   */\n      0x1d\n        /* \"#utility.yul\":16064:16082   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16057:16087   */\n      mstore\n        /* \"#utility.yul\":16123:16154   */\n      0x5472616e73616374696f6e206265666f72652073746172742064617465000000\n        /* \"#utility.yul\":16103:16121   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16096:16155   */\n      mstore\n        /* \"#utility.yul\":16172:16190   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10894:10993  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n      tag_85\n        /* \"#utility.yul\":15843:16196   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10894:10993  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n    tag_208:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11011:11024  claim.endDate */\n      dup1\n      sload\n      shl(0x90, 0x01)\n      swap1\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11011:11029  claim.endDate == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11011:11065  claim.endDate == 0 || claim.endDate >= block.timestamp */\n      tag_211\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11033:11046  claim.endDate */\n      dup1\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11050:11065  block.timestamp */\n      timestamp\n      shl(0x90, 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11033:11046  claim.endDate */\n      swap1\n      swap2\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11033:11065  claim.endDate >= block.timestamp */\n      lt\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11011:11065  claim.endDate == 0 || claim.endDate >= block.timestamp */\n    tag_211:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11003:11096  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n      tag_212\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16403:16405   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11003:11096  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16385:16406   */\n      mstore\n        /* \"#utility.yul\":16442:16444   */\n      0x1a\n        /* \"#utility.yul\":16422:16440   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16415:16445   */\n      mstore\n        /* \"#utility.yul\":16481:16509   */\n      0x5472616e73616374696f6e20616674657220656e642064617465000000000000\n        /* \"#utility.yul\":16461:16479   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16454:16510   */\n      mstore\n        /* \"#utility.yul\":16527:16545   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11003:11096  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n      tag_85\n        /* \"#utility.yul\":16201:16551   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11003:11096  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n    tag_212:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11141:11155  claim.totalMax */\n      dup1\n      sload\n      0x0100000000\n      swap1\n      div\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11141:11160  claim.totalMax == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11141:11203  claim.totalMax == 0 || claim.total+mintCount <= claim.totalMax */\n      tag_215\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11189:11203  claim.totalMax */\n      dup1\n      sload\n      0xffffffff\n      0x0100000000\n      dup3\n      div\n      dup2\n      and\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11164:11185  claim.total+mintCount */\n      tag_216\n      swap2\n      0xffff\n      dup11\n      and\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11164:11175  claim.total */\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11164:11185  claim.total+mintCount */\n      tag_217\n      jump\t// in\n    tag_216:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11164:11203  claim.total+mintCount <= claim.totalMax */\n      0xffffffff\n      and\n      gt\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11141:11203  claim.totalMax == 0 || claim.total+mintCount <= claim.totalMax */\n    tag_215:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11133:11241  require(claim.totalMax == 0 || claim.total+mintCount <= claim.totalMax, \"Too many requested for this claim\") */\n      tag_218\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16991:16993   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11133:11241  require(claim.totalMax == 0 || claim.total+mintCount <= claim.totalMax, \"Too many requested for this claim\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16973:16994   */\n      mstore\n        /* \"#utility.yul\":17030:17032   */\n      0x21\n        /* \"#utility.yul\":17010:17028   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":17003:17033   */\n      mstore\n        /* \"#utility.yul\":17069:17103   */\n      0x546f6f206d616e792072657175657374656420666f72207468697320636c6169\n        /* \"#utility.yul\":17049:17067   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":17042:17104   */\n      mstore\n        /* \"#utility.yul\":17140:17143   */\n      0x6d00000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":17120:17138   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":17113:17144   */\n      mstore\n        /* \"#utility.yul\":17161:17180   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11133:11241  require(claim.totalMax == 0 || claim.total+mintCount <= claim.totalMax, \"Too many requested for this claim\") */\n      tag_85\n        /* \"#utility.yul\":16789:17186   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11133:11241  require(claim.totalMax == 0 || claim.total+mintCount <= claim.totalMax, \"Too many requested for this claim\") */\n    tag_218:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11283:11294  claim.total */\n      dup1\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11260:11280  uint256 newMintIndex */\n      0x00\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11283:11296  claim.total+1 */\n      tag_221\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11283:11294  claim.total */\n      0xffffffff\n      and\n      0x01\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11283:11296  claim.total+1 */\n      tag_217\n      jump\t// in\n    tag_221:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11317:11341  claim.total += mintCount */\n      dup3\n      sload\n      not(0xffffffff)\n      dup2\n      and\n      0xffff\n      dup11\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11260:11296  uint256 newMintIndex = claim.total+1 */\n      0xffffffff\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11317:11341  claim.total += mintCount */\n      swap3\n      dup4\n      and\n      add\n      dup3\n      and\n      or\n      dup5\n      sstore\n      0x01\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11358:11374  claim.merkleRoot */\n      dup5\n      add\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11260:11296  uint256 newMintIndex = claim.total+1 */\n      swap2\n      and\n      swap2\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11358:11380  claim.merkleRoot != \"\" */\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11354:12241  if (claim.merkleRoot != \"\") {... */\n      tag_222\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11404:11435  mintCount == mintIndices.length */\n      0xffff\n      dup8\n      and\n      dup6\n      eq\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11404:11471  mintCount == mintIndices.length && mintCount == merkleProofs.length */\n      dup1\n      iszero\n      tag_223\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11439:11471  mintCount == merkleProofs.length */\n      0xffff\n      dup8\n      and\n      dup4\n      eq\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11404:11471  mintCount == mintIndices.length && mintCount == merkleProofs.length */\n    tag_223:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11396:11489  require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \"Invalid input\") */\n      tag_224\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":17393:17395   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11396:11489  require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \"Invalid input\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":17375:17396   */\n      mstore\n        /* \"#utility.yul\":17432:17434   */\n      0x0d\n        /* \"#utility.yul\":17412:17430   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":17405:17435   */\n      mstore\n        /* \"#utility.yul\":17471:17486   */\n      0x496e76616c696420696e70757400000000000000000000000000000000000000\n        /* \"#utility.yul\":17451:17469   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":17444:17487   */\n      mstore\n        /* \"#utility.yul\":17504:17522   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11396:11489  require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \"Invalid input\") */\n      tag_85\n        /* \"#utility.yul\":17191:17528   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11396:11489  require(mintCount == mintIndices.length && mintCount == merkleProofs.length, \"Invalid input\") */\n    tag_224:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11535:11541  uint i */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11530:11852  for (uint i = 0; i < mintCount; ) {... */\n    tag_227:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11551:11560  mintCount */\n      dup8\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11547:11560  i < mintCount */\n      0xffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11547:11548  i */\n      dup2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11547:11560  i < mintCount */\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11530:11852  for (uint i = 0; i < mintCount; ) {... */\n      iszero\n      tag_228\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11582:11598  uint32 mintIndex */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11601:11612  mintIndices */\n      dup8\n      dup8\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11613:11614  i */\n      dup4\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11601:11615  mintIndices[i] */\n      dup2\n      dup2\n      lt\n      tag_231\n      jumpi\n      tag_231\n      tag_232\n      jump\t// in\n    tag_231:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_233\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_233:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11582:11615  uint32 mintIndex = mintIndices[i] */\n      swap1\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11633:11661  bytes32[] memory merkleProof */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11664:11676  merkleProofs */\n      dup7\n      dup7\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11677:11678  i */\n      dup5\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11664:11679  merkleProofs[i] */\n      dup2\n      dup2\n      lt\n      tag_235\n      jumpi\n      tag_235\n      tag_232\n      jump\t// in\n    tag_235:\n      swap1\n      pop\n      0x20\n      mul\n      dup2\n      add\n      swap1\n      tag_236\n      swap2\n      swap1\n      tag_237\n      jump\t// in\n    tag_236:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11633:11679  bytes32[] memory merkleProof = merkleProofs[i] */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      swap3\n      swap4\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11714:11802  _checkMerkleAndUpdate(claim, creatorContractAddress, claimIndex, mintIndex, merkleProof) */\n      tag_238\n      swap3\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11736:11741  claim */\n      dup8\n      swap2\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11743:11765  creatorContractAddress */\n      dup15\n      swap1\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11767:11777  claimIndex */\n      dup14\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11779:11788  mintIndex */\n      dup6\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11633:11679  bytes32[] memory merkleProof = merkleProofs[i] */\n      dup6\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11714:11735  _checkMerkleAndUpdate */\n      tag_239\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11714:11802  _checkMerkleAndUpdate(claim, creatorContractAddress, claimIndex, mintIndex, merkleProof) */\n      jump\t// in\n    tag_238:\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11832:11835  i++ */\n      0x01\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11530:11852  for (uint i = 0; i < mintCount; ) {... */\n      jump(tag_227)\n    tag_228:\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11354:12241  if (claim.merkleRoot != \"\") {... */\n      jump(tag_241)\n    tag_222:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11917:11932  claim.walletMax */\n      dup2\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11917:11937  claim.walletMax != 0 */\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11913:12218  if (claim.walletMax != 0) {... */\n      tag_241\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12042:12057  claim.walletMax */\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:12004  _mintsPerWallet[creatorContractAddress] */\n      dup11\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12042:12057  claim.walletMax */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:12004  _mintsPerWallet[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:11980  _mintsPerWallet */\n      0x03\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:12004  _mintsPerWallet[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:12016  _mintsPerWallet[creatorContractAddress][claimIndex] */\n      dup13\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12017:12027  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:12028  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      shl(0x40, 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12042:12057  claim.walletMax */\n      swap1\n      swap2\n      div\n      0xffffffff\n      and\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:12038  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]+mintCount */\n      tag_242\n      swap1\n      0xffff\n      dup11\n      and\n      swap1\n      tag_243\n      jump\t// in\n    tag_242:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11965:12057  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]+mintCount <= claim.walletMax */\n      gt\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11957:12096  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]+mintCount <= claim.walletMax, \"Too many requested for this wallet\") */\n      tag_244\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":18607:18609   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11957:12096  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]+mintCount <= claim.walletMax, \"Too many requested for this wallet\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":18589:18610   */\n      mstore\n        /* \"#utility.yul\":18646:18648   */\n      0x22\n        /* \"#utility.yul\":18626:18644   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":18619:18649   */\n      mstore\n        /* \"#utility.yul\":18685:18719   */\n      0x546f6f206d616e792072657175657374656420666f7220746869732077616c6c\n        /* \"#utility.yul\":18665:18683   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":18658:18720   */\n      mstore\n        /* \"#utility.yul\":18756:18760   */\n      0x6574000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":18736:18754   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":18729:18761   */\n      mstore\n        /* \"#utility.yul\":18778:18797   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11957:12096  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]+mintCount <= claim.walletMax, \"Too many requested for this wallet\") */\n      tag_85\n        /* \"#utility.yul\":18405:18803   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11957:12096  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]+mintCount <= claim.walletMax, \"Too many requested for this wallet\") */\n    tag_244:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12125:12164  _mintsPerWallet[creatorContractAddress] */\n      dup10\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12125:12140  _mintsPerWallet */\n      0x03\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12125:12164  _mintsPerWallet[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12125:12176  _mintsPerWallet[creatorContractAddress][claimIndex] */\n      dup12\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12177:12187  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12125:12188  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12125:12201  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] += mintCount */\n      dup1\n      sload\n      0xffff\n      dup10\n      and\n      add\n      swap1\n      sstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":11913:12218  if (claim.walletMax != 0) {... */\n    tag_241:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12281:12365  IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(msg.sender, mintCount) */\n      mload(0x40)\n      0xe00aab4b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12343:12353  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12281:12365  IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(msg.sender, mintCount) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":18980:19054   */\n      mstore\n        /* \"#utility.yul\":19102:19108   */\n      0xffff\n        /* \"#utility.yul\":19090:19109   */\n      dup9\n      and\n        /* \"#utility.yul\":19070:19088   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":19063:19110   */\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12250:12278  uint256[] memory newTokenIds */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12281:12342  IERC721CreatorCore(creatorContractAddress).mintExtensionBatch */\n      dup12\n      and\n      swap1\n      0xe00aab4b\n      swap1\n        /* \"#utility.yul\":18953:18971   */\n      0x44\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12281:12365  IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(msg.sender, mintCount) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_250\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_250:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      0x40\n      mstore\n      tag_251\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      tag_252\n      jump\t// in\n    tag_251:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12250:12365  uint256[] memory newTokenIds = IERC721CreatorCore(creatorContractAddress).mintExtensionBatch(msg.sender, mintCount) */\n      swap1\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12380:12386  uint i */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12375:12575  for (uint i = 0; i < mintCount; ) {... */\n    tag_253:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12396:12405  mintCount */\n      dup9\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12392:12405  i < mintCount */\n      0xffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12392:12393  i */\n      dup2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12392:12405  i < mintCount */\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12375:12575  for (uint i = 0; i < mintCount; ) {... */\n      iszero\n      tag_254\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12478:12533  TokenClaim(uint224(claimIndex), uint32(newMintIndex+i)) */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12497:12507  claimIndex */\n      dup12\n      sub(shl(0xe0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12478:12533  TokenClaim(uint224(claimIndex), uint32(newMintIndex+i)) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12530:12531  i */\n      dup3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12517:12529  newMintIndex */\n      dup6\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12517:12531  newMintIndex+i */\n      tag_256\n      swap2\n      swap1\n      tag_243\n      jump\t// in\n    tag_256:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12478:12533  TokenClaim(uint224(claimIndex), uint32(newMintIndex+i)) */\n      0xffffffff\n      and\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12423:12459  _tokenClaims[creatorContractAddress] */\n      dup13\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12423:12435  _tokenClaims */\n      0x05\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12423:12459  _tokenClaims[creatorContractAddress] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12460:12474  newTokenIds[i] */\n      dup5\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12423:12459  _tokenClaims[creatorContractAddress] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12460:12471  newTokenIds */\n      dup6\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12472:12473  i */\n      dup6\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12460:12474  newTokenIds[i] */\n      dup2\n      lt\n      tag_258\n      jumpi\n      tag_258\n      tag_232\n      jump\t// in\n    tag_258:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      dup2\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12423:12475  _tokenClaims[creatorContractAddress][newTokenIds[i]] */\n      dup3\n      mstore\n      dup2\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12423:12533  _tokenClaims[creatorContractAddress][newTokenIds[i]] = TokenClaim(uint224(claimIndex), uint32(newMintIndex+i)) */\n      dup3\n      mload\n      swap3\n      swap1\n      swap2\n      add\n      mload\n      0xffffffff\n      and\n      shl(0xe0, 0x01)\n      mul\n      sub(shl(0xe0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      0x01\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12559:12562  i++ */\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12375:12575  for (uint i = 0; i < mintCount; ) {... */\n      jump(tag_253)\n    tag_254:\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12590:12651  ClaimMintBatch(creatorContractAddress, claimIndex, mintCount) */\n      mload(0x40)\n        /* \"#utility.yul\":20594:20600   */\n      0xffff\n        /* \"#utility.yul\":20582:20601   */\n      dup10\n      and\n        /* \"#utility.yul\":20564:20602   */\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12629:12639  claimIndex */\n      dup10\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12590:12651  ClaimMintBatch(creatorContractAddress, claimIndex, mintCount) */\n      dup13\n      and\n      swap1\n      0x74f5d3254dfa39a7b1217a27d5d9b3e061eafe11720eca1cf499da2dc1eb1259\n      swap1\n        /* \"#utility.yul\":20552:20554   */\n      0x20\n        /* \"#utility.yul\":20537:20555   */\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12590:12651  ClaimMintBatch(creatorContractAddress, claimIndex, mintCount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10642:12658  {... */\n      pop\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10469:12658  function mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] calldata mintIndices, bytes32[][] calldata merkleProofs) external override {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8186:8672  function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external override view returns(uint32) {... */\n    tag_46:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8348:8379  _claims[creatorContractAddress] */\n      dup3\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8308:8314  uint32 */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8348:8379  _claims[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8348:8355  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8348:8379  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8348:8391  _claims[creatorContractAddress][claimIndex] */\n      dup5\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8308:8314  uint32 */\n      dup2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8409:8430  claim.storageProtocol */\n      dup2\n      sload\n      shl(0xc0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8409:8457  claim.storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_265\n      jumpi\n      tag_265\n      tag_90\n      jump\t// in\n    tag_265:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8401:8483  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_266\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14142:14144   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8401:8483  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14124:14145   */\n      mstore\n        /* \"#utility.yul\":14181:14183   */\n      0x15\n        /* \"#utility.yul\":14161:14179   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14154:14184   */\n      mstore\n      shl(0x5a, 0x10db185a5b481b9bdd081a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":14200:14218   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14193:14244   */\n      mstore\n        /* \"#utility.yul\":14261:14279   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8401:8483  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_85\n        /* \"#utility.yul\":13940:14285   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8401:8483  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n    tag_266:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8501:8516  claim.walletMax */\n      dup1\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xffffffff\n      and\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8501:8521  claim.walletMax != 0 */\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8493:8580  require(claim.walletMax != 0, \"Can only retrieve for non-merkle claims with walletMax\") */\n      tag_268\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":20815:20817   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8493:8580  require(claim.walletMax != 0, \"Can only retrieve for non-merkle claims with walletMax\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":20797:20818   */\n      mstore\n        /* \"#utility.yul\":20854:20856   */\n      0x36\n        /* \"#utility.yul\":20834:20852   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":20827:20857   */\n      mstore\n        /* \"#utility.yul\":20893:20927   */\n      0x43616e206f6e6c7920726574726965766520666f72206e6f6e2d6d65726b6c65\n        /* \"#utility.yul\":20873:20891   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":20866:20928   */\n      mstore\n        /* \"#utility.yul\":20964:20988   */\n      0x20636c61696d7320776974682077616c6c65744d617800000000000000000000\n        /* \"#utility.yul\":20944:20962   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":20937:20989   */\n      mstore\n        /* \"#utility.yul\":21006:21025   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8493:8580  require(claim.walletMax != 0, \"Can only retrieve for non-merkle claims with walletMax\") */\n      tag_85\n        /* \"#utility.yul\":20613:21031   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8493:8580  require(claim.walletMax != 0, \"Can only retrieve for non-merkle claims with walletMax\") */\n    tag_268:\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8605:8644  _mintsPerWallet[creatorContractAddress] */\n      dup1\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8605:8620  _mintsPerWallet */\n      0x03\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8605:8644  _mintsPerWallet[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8605:8656  _mintsPerWallet[creatorContractAddress][claimIndex] */\n      dup6\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8605:8664  _mintsPerWallet[creatorContractAddress][claimIndex][minter] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8186:8672  function getTotalMints(address minter, address creatorContractAddress, uint256 claimIndex) external override view returns(uint32) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8730:10406  function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof) external override {... */\n    tag_52:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8896:8927  _claims[creatorContractAddress] */\n      dup6\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8874:8893  Claim storage claim */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8896:8927  _claims[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8896:8903  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8896:8927  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8896:8939  _claims[creatorContractAddress][claimIndex] */\n      dup8\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8994:9015  claim.storageProtocol */\n      dup2\n      sload\n      shl(0xc0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8994:9042  claim.storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_275\n      jumpi\n      tag_275\n      tag_90\n      jump\t// in\n    tag_275:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8986:9068  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_276\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14142:14144   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8986:9068  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14124:14145   */\n      mstore\n        /* \"#utility.yul\":14181:14183   */\n      0x15\n        /* \"#utility.yul\":14161:14179   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14154:14184   */\n      mstore\n      shl(0x5a, 0x10db185a5b481b9bdd081a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":14200:14218   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14193:14244   */\n      mstore\n        /* \"#utility.yul\":14261:14279   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8986:9068  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_85\n        /* \"#utility.yul\":13940:14285   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8986:9068  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n    tag_276:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9115:9130  claim.startDate */\n      dup1\n      sload\n      shl(0x60, 0x01)\n      swap1\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9115:9135  claim.startDate == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9115:9172  claim.startDate == 0 || claim.startDate < block.timestamp */\n      tag_278\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9139:9154  claim.startDate */\n      dup1\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9157:9172  block.timestamp */\n      timestamp\n      shl(0x60, 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9139:9154  claim.startDate */\n      swap1\n      swap2\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9139:9172  claim.startDate < block.timestamp */\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9115:9172  claim.startDate == 0 || claim.startDate < block.timestamp */\n    tag_278:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9107:9206  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n      tag_279\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16045:16047   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9107:9206  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16027:16048   */\n      mstore\n        /* \"#utility.yul\":16084:16086   */\n      0x1d\n        /* \"#utility.yul\":16064:16082   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16057:16087   */\n      mstore\n        /* \"#utility.yul\":16123:16154   */\n      0x5472616e73616374696f6e206265666f72652073746172742064617465000000\n        /* \"#utility.yul\":16103:16121   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16096:16155   */\n      mstore\n        /* \"#utility.yul\":16172:16190   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9107:9206  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n      tag_85\n        /* \"#utility.yul\":15843:16196   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9107:9206  require(claim.startDate == 0 || claim.startDate < block.timestamp, \"Transaction before start date\") */\n    tag_279:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9224:9237  claim.endDate */\n      dup1\n      sload\n      shl(0x90, 0x01)\n      swap1\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9224:9242  claim.endDate == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9224:9278  claim.endDate == 0 || claim.endDate >= block.timestamp */\n      tag_281\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9246:9259  claim.endDate */\n      dup1\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9263:9278  block.timestamp */\n      timestamp\n      shl(0x90, 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9246:9259  claim.endDate */\n      swap1\n      swap2\n      div\n      0xffffffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9246:9278  claim.endDate >= block.timestamp */\n      lt\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9224:9278  claim.endDate == 0 || claim.endDate >= block.timestamp */\n    tag_281:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9216:9309  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n      tag_282\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":16403:16405   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9216:9309  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":16385:16406   */\n      mstore\n        /* \"#utility.yul\":16442:16444   */\n      0x1a\n        /* \"#utility.yul\":16422:16440   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":16415:16445   */\n      mstore\n        /* \"#utility.yul\":16481:16509   */\n      0x5472616e73616374696f6e20616674657220656e642064617465000000000000\n        /* \"#utility.yul\":16461:16479   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":16454:16510   */\n      mstore\n        /* \"#utility.yul\":16527:16545   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9216:9309  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n      tag_85\n        /* \"#utility.yul\":16201:16551   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9216:9309  require(claim.endDate == 0 || claim.endDate >= block.timestamp, \"Transaction after end date\") */\n    tag_282:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9354:9368  claim.totalMax */\n      dup1\n      sload\n      0x0100000000\n      swap1\n      div\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9354:9373  claim.totalMax == 0 */\n      iszero\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9354:9405  claim.totalMax == 0 || claim.total < claim.totalMax */\n      tag_284\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9391:9405  claim.totalMax */\n      dup1\n      sload\n      0xffffffff\n      0x0100000000\n      dup3\n      div\n      dup2\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9377:9388  claim.total */\n      swap2\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9377:9405  claim.total < claim.totalMax */\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9354:9405  claim.totalMax == 0 || claim.total < claim.totalMax */\n    tag_284:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9346:9454  require(claim.totalMax == 0 || claim.total < claim.totalMax, \"Maximum tokens already minted for this claim\") */\n      tag_285\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":21238:21240   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9346:9454  require(claim.totalMax == 0 || claim.total < claim.totalMax, \"Maximum tokens already minted for this claim\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":21220:21241   */\n      mstore\n        /* \"#utility.yul\":21277:21279   */\n      0x2c\n        /* \"#utility.yul\":21257:21275   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":21250:21280   */\n      mstore\n        /* \"#utility.yul\":21316:21350   */\n      0x4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f\n        /* \"#utility.yul\":21296:21314   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":21289:21351   */\n      mstore\n        /* \"#utility.yul\":21387:21401   */\n      0x72207468697320636c61696d0000000000000000000000000000000000000000\n        /* \"#utility.yul\":21367:21385   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":21360:21402   */\n      mstore\n        /* \"#utility.yul\":21419:21438   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9346:9454  require(claim.totalMax == 0 || claim.total < claim.totalMax, \"Maximum tokens already minted for this claim\") */\n      tag_85\n        /* \"#utility.yul\":21036:21444   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9346:9454  require(claim.totalMax == 0 || claim.total < claim.totalMax, \"Maximum tokens already minted for this claim\") */\n    tag_285:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9469:9485  claim.merkleRoot */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9469:9491  claim.merkleRoot != \"\" */\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9465:9988  if (claim.merkleRoot != \"\") {... */\n      tag_288\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9534:9622  _checkMerkleAndUpdate(claim, creatorContractAddress, claimIndex, mintIndex, merkleProof) */\n      tag_289\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9556:9561  claim */\n      dup2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9563:9585  creatorContractAddress */\n      dup8\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9587:9597  claimIndex */\n      dup8\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9599:9608  mintIndex */\n      dup8\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9610:9621  merkleProof */\n      dup8\n      dup8\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9534:9622  _checkMerkleAndUpdate(claim, creatorContractAddress, claimIndex, mintIndex, merkleProof) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9534:9555  _checkMerkleAndUpdate */\n      tag_239\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9534:9622  _checkMerkleAndUpdate(claim, creatorContractAddress, claimIndex, mintIndex, merkleProof) */\n      jump\t// in\n    tag_289:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9465:9988  if (claim.merkleRoot != \"\") {... */\n      jump(tag_291)\n    tag_288:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9688:9703  claim.walletMax */\n      dup1\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9688:9708  claim.walletMax != 0 */\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9684:9978  if (claim.walletMax != 0) {... */\n      tag_291\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9802:9817  claim.walletMax */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9736:9775  _mintsPerWallet[creatorContractAddress] */\n      dup8\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9802:9817  claim.walletMax */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9736:9775  _mintsPerWallet[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9736:9751  _mintsPerWallet */\n      0x03\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9736:9775  _mintsPerWallet[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9736:9787  _mintsPerWallet[creatorContractAddress][claimIndex] */\n      dup10\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9788:9798  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9736:9799  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      shl(0x40, 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9802:9817  claim.walletMax */\n      swap1\n      swap2\n      div\n      0xffffffff\n      and\n      gt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9728:9867  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] < claim.walletMax, \"Maximum tokens already minted for this wallet\") */\n      tag_292\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":21651:21653   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9728:9867  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] < claim.walletMax, \"Maximum tokens already minted for this wallet\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":21633:21654   */\n      mstore\n        /* \"#utility.yul\":21690:21692   */\n      0x2d\n        /* \"#utility.yul\":21670:21688   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":21663:21693   */\n      mstore\n        /* \"#utility.yul\":21729:21763   */\n      0x4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f\n        /* \"#utility.yul\":21709:21727   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":21702:21764   */\n      mstore\n        /* \"#utility.yul\":21800:21815   */\n      0x7220746869732077616c6c657400000000000000000000000000000000000000\n        /* \"#utility.yul\":21780:21798   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":21773:21816   */\n      mstore\n        /* \"#utility.yul\":21833:21852   */\n      0x84\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9728:9867  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] < claim.walletMax, \"Maximum tokens already minted for this wallet\") */\n      tag_85\n        /* \"#utility.yul\":21449:21858   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9728:9867  require(_mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] < claim.walletMax, \"Maximum tokens already minted for this wallet\") */\n    tag_292:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9896:9935  _mintsPerWallet[creatorContractAddress] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9896:9911  _mintsPerWallet */\n      0x03\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9896:9935  _mintsPerWallet[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9896:9947  _mintsPerWallet[creatorContractAddress][claimIndex] */\n      dup9\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9948:9958  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9896:9959  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9896:9961  _mintsPerWallet[creatorContractAddress][claimIndex][msg.sender]++ */\n      dup1\n      sload\n      0x01\n      add\n      swap1\n      sstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":9684:9978  if (claim.walletMax != 0) {... */\n    tag_291:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10008:10021  claim.total++ */\n      dup1\n      sload\n      0xffffffff\n      dup1\n      dup3\n      and\n      0x01\n      add\n      and\n      not(0xffffffff)\n      swap1\n      swap2\n      and\n      or\n      dup2\n      sstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10074:10142  IERC721CreatorCore(creatorContractAddress).mintExtension(msg.sender) */\n      mload(0x40)\n      0x2928ca5800000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10131:10141  msg.sender */\n      caller\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10074:10142  IERC721CreatorCore(creatorContractAddress).mintExtension(msg.sender) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9841:9915   */\n      mstore\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10074:10130  IERC721CreatorCore(creatorContractAddress).mintExtension */\n      dup9\n      and\n      swap1\n      0x2928ca58\n      swap1\n        /* \"#utility.yul\":9814:9832   */\n      0x24\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10074:10142  IERC721CreatorCore(creatorContractAddress).mintExtension(msg.sender) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_297\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_297:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_298\n      swap2\n      swap1\n      tag_299\n      jump\t// in\n    tag_298:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10294:10338  TokenClaim(uint224(claimIndex), claim.total) */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      dup3\n      mstore\n      sub(shl(0xe0, 0x01), 0x01)\n      dup1\n      dup11\n      and\n      dup3\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10326:10337  claim.total */\n      dup6\n      sload\n      0xffffffff\n      swap1\n      dup2\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10294:10338  TokenClaim(uint224(claimIndex), claim.total) */\n      0x20\n      dup1\n      dup6\n      add\n      swap2\n      dup3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10243:10279  _tokenClaims[creatorContractAddress] */\n      dup15\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10243:10255  _tokenClaims */\n      0x05\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10243:10279  _tokenClaims[creatorContractAddress] */\n      dup4\n      mstore\n      dup8\n      dup2\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10243:10291  _tokenClaims[creatorContractAddress][newTokenId] */\n      dup10\n      dup3\n      mstore\n      swap1\n      swap3\n      mstore\n      dup7\n      dup3\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10243:10338  _tokenClaims[creatorContractAddress][newTokenId] = TokenClaim(uint224(claimIndex), claim.total) */\n      swap6\n      mload\n      swap3\n      mload\n      swap1\n      swap4\n      and\n      shl(0xe0, 0x01)\n      mul\n      swap2\n      swap1\n      swap4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10354:10399  ClaimMint(creatorContractAddress, claimIndex) */\n      swap2\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10053:10142  uint256 newTokenId = IERC721CreatorCore(creatorContractAddress).mintExtension(msg.sender) */\n      swap3\n      swap4\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10313:10323  claimIndex */\n      dup9\n      swap3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10243:10279  _tokenClaims[creatorContractAddress] */\n      swap1\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":10354:10399  ClaimMint(creatorContractAddress, claimIndex) */\n      0x5d404f369772cfab2b65717fca9bc2077efeab89a0dbec036bf0c13783154eb1\n      swap2\n      log3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8864:10406  {... */\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8730:10406  function mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] calldata merkleProof) external override {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7019:7673  function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) public override view returns(bool) {... */\n    tag_56:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7180:7211  _claims[creatorContractAddress] */\n      dup4\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7142:7146  bool */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7180:7211  _claims[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7180:7187  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7180:7211  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7180:7223  _claims[creatorContractAddress][claimIndex] */\n      dup6\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7142:7146  bool */\n      dup2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7241:7262  claim.storageProtocol */\n      dup2\n      sload\n      shl(0xc0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7241:7289  claim.storageProtocol != StorageProtocol.INVALID */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_304\n      jumpi\n      tag_304\n      tag_90\n      jump\t// in\n    tag_304:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7233:7315  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_305\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14142:14144   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7233:7315  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14124:14145   */\n      mstore\n        /* \"#utility.yul\":14181:14183   */\n      0x15\n        /* \"#utility.yul\":14161:14179   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14154:14184   */\n      mstore\n      shl(0x5a, 0x10db185a5b481b9bdd081a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":14200:14218   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14193:14244   */\n      mstore\n        /* \"#utility.yul\":14261:14279   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7233:7315  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n      tag_85\n        /* \"#utility.yul\":13940:14285   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7233:7315  require(claim.storageProtocol != StorageProtocol.INVALID, \"Claim not initialized\") */\n    tag_305:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7333:7338  claim */\n      dup1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7333:7349  claim.merkleRoot */\n      0x01\n      add\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7333:7355  claim.merkleRoot != \"\" */\n      0x00\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7325:7388  require(claim.merkleRoot != \"\", \"Can only check merkle claims\") */\n      tag_307\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":22254:22256   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7325:7388  require(claim.merkleRoot != \"\", \"Can only check merkle claims\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":22236:22257   */\n      mstore\n        /* \"#utility.yul\":22293:22295   */\n      0x1c\n        /* \"#utility.yul\":22273:22291   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":22266:22296   */\n      mstore\n        /* \"#utility.yul\":22332:22362   */\n      0x43616e206f6e6c7920636865636b206d65726b6c6520636c61696d7300000000\n        /* \"#utility.yul\":22312:22330   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":22305:22363   */\n      mstore\n        /* \"#utility.yul\":22380:22398   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7325:7388  require(claim.merkleRoot != \"\", \"Can only check merkle claims\") */\n      tag_85\n        /* \"#utility.yul\":22052:22404   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7325:7388  require(claim.merkleRoot != \"\", \"Can only check merkle claims\") */\n    tag_307:\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7475:7516  _claimMintIndices[creatorContractAddress] */\n      dup4\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7398:7420  uint256 claimMintIndex */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7475:7516  _claimMintIndices[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7475:7492  _claimMintIndices */\n      0x04\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7475:7516  _claimMintIndices[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7475:7528  _claimMintIndices[creatorContractAddress][claimIndex] */\n      dup6\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7423:7437  mintIndex >> 8 */\n      0xffffff\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7436:7437  8 */\n      0x08\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7423:7437  mintIndex >> 8 */\n      dup7\n      swap1\n      shr\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7475:7544  _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7576:7577  1 */\n      0x01\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":1007:1011  0xFF */\n      0xff\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7582:7612  mintIndex & MINT_INDEX_BITMASK */\n      dup4\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7576:7613  1 << (mintIndex & MINT_INDEX_BITMASK) */\n      shl\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7630:7661  mintBitmask & claimMintTracking */\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7630:7666  mintBitmask & claimMintTracking != 0 */\n      iszero\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7019:7673  function checkMintIndex(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex) public override view returns(bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13697:14587  function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {... */\n    tag_65:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13855:13891  _tokenClaims[creatorContractAddress] */\n      dup3\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13824:13852  TokenClaim memory tokenClaim */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13855:13891  _tokenClaims[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13855:13867  _tokenClaims */\n      0x05\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13855:13891  _tokenClaims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13855:13900  _tokenClaims[creatorContractAddress][tokenId] */\n      dup5\n      dup5\n      mstore\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13824:13900  TokenClaim memory tokenClaim = _tokenClaims[creatorContractAddress][tokenId] */\n      dup3\n      mload\n      dup1\n      dup5\n      add\n      swap1\n      swap4\n      mstore\n      sload\n      sub(shl(0xe0, 0x01), 0x01)\n      dup2\n      and\n      dup1\n      dup5\n      mstore\n      shl(0xe0, 0x01)\n      swap1\n      swap2\n      div\n      0xffffffff\n      and\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13795:13812  string memory uri */\n      0x60\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13824:13900  TokenClaim memory tokenClaim = _tokenClaims[creatorContractAddress][tokenId] */\n      swap1\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13910:13968  require(tokenClaim.claimIndex > 0, \"Token does not exist\") */\n      tag_312\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":22611:22613   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13910:13968  require(tokenClaim.claimIndex > 0, \"Token does not exist\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":22593:22614   */\n      mstore\n        /* \"#utility.yul\":22650:22652   */\n      0x14\n        /* \"#utility.yul\":22630:22648   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":22623:22653   */\n      mstore\n        /* \"#utility.yul\":22689:22711   */\n      0x546f6b656e20646f6573206e6f74206578697374000000000000000000000000\n        /* \"#utility.yul\":22669:22687   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":22662:22712   */\n      mstore\n        /* \"#utility.yul\":22729:22747   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13910:13968  require(tokenClaim.claimIndex > 0, \"Token does not exist\") */\n      tag_85\n        /* \"#utility.yul\":22409:22753   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13910:13968  require(tokenClaim.claimIndex > 0, \"Token does not exist\") */\n    tag_312:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13999:14030  _claims[creatorContractAddress] */\n      dup5\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13978:13996  Claim memory claim */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13999:14030  _claims[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13999:14006  _claims */\n      0x02\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13999:14030  _claims[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14031:14052  tokenClaim.claimIndex */\n      dup5\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13999:14053  _claims[creatorContractAddress][tokenClaim.claimIndex] */\n      and\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13978:14053  Claim memory claim = _claims[creatorContractAddress][tokenClaim.claimIndex] */\n      dup2\n      mload\n      0x0120\n      dup2\n      add\n      dup4\n      mstore\n      dup2\n      sload\n      0xffffffff\n      dup1\n      dup3\n      and\n      dup4\n      mstore\n      0x0100000000\n      dup3\n      div\n      dup2\n      and\n      swap6\n      dup4\n      add\n      swap6\n      swap1\n      swap6\n      mstore\n      shl(0x40, 0x01)\n      dup2\n      div\n      swap1\n      swap5\n      and\n      swap3\n      dup2\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0xffffffffffff\n      shl(0x60, 0x01)\n      dup5\n      div\n      dup2\n      and\n      0x60\n      dup5\n      add\n      mstore\n      shl(0x90, 0x01)\n      dup5\n      div\n      and\n      0x80\n      dup4\n      add\n      mstore\n      swap1\n      swap2\n      0xa0\n      dup4\n      add\n      swap1\n      0xff\n      shl(0xc0, 0x01)\n      swap1\n      swap2\n      div\n      and\n      0x03\n      dup2\n      gt\n      iszero\n      tag_316\n      jumpi\n      tag_316\n      tag_90\n      jump\t// in\n    tag_316:\n      0x03\n      dup2\n      gt\n      iszero\n      tag_318\n      jumpi\n      tag_318\n      tag_90\n      jump\t// in\n    tag_318:\n      dup2\n      mstore\n      dup2\n      sload\n      shl(0xc8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      0x20\n      dup3\n      add\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      0x40\n      dup3\n      add\n      mstore\n      0x02\n      dup3\n      add\n      dup1\n      sload\n      0x60\n      swap1\n      swap3\n      add\n      swap2\n      tag_319\n      swap1\n      tag_145\n      jump\t// in\n    tag_319:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_320\n      swap1\n      tag_145\n      jump\t// in\n    tag_320:\n      dup1\n      iszero\n      tag_321\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_322\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_321)\n    tag_322:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_323:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_323\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_321:\n      pop\n      pop\n      pop\n      swap2\n      swap1\n      swap3\n      mstore\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14064:14089  string memory prefix = \"\" */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n      swap1\n      swap2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14064:14084  string memory prefix */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14064:14089  string memory prefix = \"\" */\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13978:14053  Claim memory claim = _claims[creatorContractAddress][tokenClaim.claimIndex] */\n      swap2\n      swap3\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14128:14151  StorageProtocol.ARWEAVE */\n      0x02\n      swap1\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14103:14108  claim */\n      dup3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14103:14124  claim.storageProtocol */\n      0xa0\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14103:14151  claim.storageProtocol == StorageProtocol.ARWEAVE */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_327\n      jumpi\n      tag_327\n      tag_90\n      jump\t// in\n    tag_327:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14099:14303  if (claim.storageProtocol == StorageProtocol.ARWEAVE) {... */\n      tag_328\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14176:14190  ARWEAVE_PREFIX */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x14\n      dup2\n      mstore\n      0x68747470733a2f2f617277656176652e6e65742f000000000000000000000000\n      0x20\n      dup3\n      add\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14099:14303  if (claim.storageProtocol == StorageProtocol.ARWEAVE) {... */\n      jump(tag_334)\n    tag_328:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14236:14256  StorageProtocol.IPFS */\n      0x03\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14211:14216  claim */\n      dup3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14211:14232  claim.storageProtocol */\n      0xa0\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14211:14256  claim.storageProtocol == StorageProtocol.IPFS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_333\n      jumpi\n      tag_333\n      tag_90\n      jump\t// in\n    tag_333:\n      sub\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14207:14303  if (claim.storageProtocol == StorageProtocol.IPFS) {... */\n      tag_334\n      jumpi\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14281:14292  IPFS_PREFIX */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x07\n      dup2\n      mstore\n      0x697066733a2f2f00000000000000000000000000000000000000000000000000\n      0x20\n      dup3\n      add\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14207:14303  if (claim.storageProtocol == StorageProtocol.IPFS) {... */\n    tag_334:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14350:14364  claim.location */\n      0x0100\n      dup3\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14325:14365  abi.encodePacked(prefix, claim.location) */\n      mload(0x40)\n      tag_335\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14342:14348  prefix */\n      dup4\n      swap2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14325:14365  abi.encodePacked(prefix, claim.location) */\n      0x20\n      add\n      tag_336\n      jump\t// in\n    tag_335:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14312:14366  uri = string(abi.encodePacked(prefix, claim.location)) */\n      swap4\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14457:14462  claim */\n      dup2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14457:14472  claim.identical */\n      0xc0\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14452:14581  if (!claim.identical) {... */\n      tag_337\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14518:14521  uri */\n      dup4\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14528:14568  uint256(tokenClaim.mintOrder).toString() */\n      tag_338\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14536:14546  tokenClaim */\n      dup5\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14536:14556  tokenClaim.mintOrder */\n      0x20\n      add\n      mload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14528:14557  uint256(tokenClaim.mintOrder) */\n      0xffffffff\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14528:14566  uint256(tokenClaim.mintOrder).toString */\n      tag_339\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14528:14568  uint256(tokenClaim.mintOrder).toString() */\n      jump\t// in\n    tag_338:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14501:14569  abi.encodePacked(uri, \"/\", uint256(tokenClaim.mintOrder).toString()) */\n      add(0x20, mload(0x40))\n      tag_340\n      swap3\n      swap2\n      swap1\n      tag_341\n      jump\t// in\n    tag_340:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14488:14570  uri = string(abi.encodePacked(uri, \"/\", uint256(tokenClaim.mintOrder).toString())) */\n      swap4\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":14452:14581  if (!claim.identical) {... */\n    tag_337:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13814:14587  {... */\n      pop\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13697:14587  function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7743:8119  function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external override view returns(bool[] memory minted) {... */\n    tag_71:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7883:7903  bool[] memory minted */\n      0x60\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7935:7946  mintIndices */\n      dup2\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7924:7954  new bool[](mintIndices.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_344\n      jumpi\n      tag_344\n      tag_345\n      jump\t// in\n    tag_344:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_346\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_346:\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7915:7954  minted = new bool[](mintIndices.length) */\n      swap1\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7969:7975  uint i */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7964:8113  for (uint i = 0; i < mintIndices.length; i++) {... */\n    tag_347:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7981:8003  i < mintIndices.length */\n      dup3\n      dup2\n      lt\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7964:8113  for (uint i = 0; i < mintIndices.length; i++) {... */\n      iszero\n      tag_348\n      jumpi\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8036:8102  checkMintIndex(creatorContractAddress, claimIndex, mintIndices[i]) */\n      tag_350\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8051:8073  creatorContractAddress */\n      dup7\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8075:8085  claimIndex */\n      dup7\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8087:8098  mintIndices */\n      dup7\n      dup7\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8099:8100  i */\n      dup6\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8087:8101  mintIndices[i] */\n      dup2\n      dup2\n      lt\n      tag_352\n      jumpi\n      tag_352\n      tag_232\n      jump\t// in\n    tag_352:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_54\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8036:8102  checkMintIndex(creatorContractAddress, claimIndex, mintIndices[i]) */\n    tag_350:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8024:8030  minted */\n      dup3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8031:8032  i */\n      dup3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8024:8033  minted[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_355\n      jumpi\n      tag_355\n      tag_232\n      jump\t// in\n    tag_355:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8024:8102  minted[i] = checkMintIndex(creatorContractAddress, claimIndex, mintIndices[i]) */\n      swap2\n      iszero\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8024:8033  minted[i] */\n      0x20\n      swap3\n      dup4\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      swap1\n      swap2\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8024:8102  minted[i] = checkMintIndex(creatorContractAddress, claimIndex, mintIndices[i]) */\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":8005:8008  i++ */\n      dup1\n      tag_356\n      dup2\n      tag_357\n      jump\t// in\n    tag_356:\n      swap2\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7964:8113  for (uint i = 0; i < mintIndices.length; i++) {... */\n      jump(tag_347)\n    tag_348:\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":7743:8119  function checkMintIndices(address creatorContractAddress, uint256 claimIndex, uint32[] calldata mintIndices) external override view returns(bool[] memory minted) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12796:13626  function _checkMerkleAndUpdate(Claim storage claim, address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] memory merkleProof) private {... */\n    tag_239:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13014:13053  abi.encodePacked(msg.sender, mintIndex) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13031:13041  msg.sender */\n      caller\n        /* \"#utility.yul\":24167:24169   */\n      0x60\n        /* \"#utility.yul\":24163:24178   */\n      shl\n        /* \"#utility.yul\":24159:24212   */\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13014:13053  abi.encodePacked(msg.sender, mintIndex) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":24147:24213   */\n      mstore\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":24251:24254   */\n      0xe0\n        /* \"#utility.yul\":24247:24263   */\n      dup5\n      swap1\n      shl\n        /* \"#utility.yul\":24243:24332   */\n      and\n        /* \"#utility.yul\":24229:24241   */\n      0x34\n      dup3\n      add\n        /* \"#utility.yul\":24222:24333   */\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12989:13001  bytes32 leaf */\n      0x00\n      swap1\n        /* \"#utility.yul\":24349:24361   */\n      0x38\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13014:13053  abi.encodePacked(msg.sender, mintIndex) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13004:13054  keccak256(abi.encodePacked(msg.sender, mintIndex)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12989:13054  bytes32 leaf = keccak256(abi.encodePacked(msg.sender, mintIndex)) */\n      swap1\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13072:13127  MerkleProof.verify(merkleProof, claim.merkleRoot, leaf) */\n      tag_361\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13091:13102  merkleProof */\n      dup3\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13104:13109  claim */\n      dup8\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13104:13120  claim.merkleRoot */\n      0x01\n      add\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13122:13126  leaf */\n      dup4\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13072:13090  MerkleProof.verify */\n      tag_362\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13072:13127  MerkleProof.verify(merkleProof, claim.merkleRoot, leaf) */\n      jump\t// in\n    tag_361:\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13064:13161  require(MerkleProof.verify(merkleProof, claim.merkleRoot, leaf), \"Could not verify merkle proof\") */\n      tag_363\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":24574:24576   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13064:13161  require(MerkleProof.verify(merkleProof, claim.merkleRoot, leaf), \"Could not verify merkle proof\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":24556:24577   */\n      mstore\n        /* \"#utility.yul\":24613:24615   */\n      0x1d\n        /* \"#utility.yul\":24593:24611   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":24586:24616   */\n      mstore\n        /* \"#utility.yul\":24652:24683   */\n      0x436f756c64206e6f7420766572696679206d65726b6c652070726f6f66000000\n        /* \"#utility.yul\":24632:24650   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":24625:24684   */\n      mstore\n        /* \"#utility.yul\":24701:24719   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13064:13161  require(MerkleProof.verify(merkleProof, claim.merkleRoot, leaf), \"Could not verify merkle proof\") */\n      tag_85\n        /* \"#utility.yul\":24372:24725   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13064:13161  require(MerkleProof.verify(merkleProof, claim.merkleRoot, leaf), \"Could not verify merkle proof\") */\n    tag_363:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13295:13336  _claimMintIndices[creatorContractAddress] */\n      dup6\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13218:13240  uint256 claimMintIndex */\n      0x00\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13295:13336  _claimMintIndices[creatorContractAddress] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13295:13312  _claimMintIndices */\n      0x04\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13295:13336  _claimMintIndices[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13295:13348  _claimMintIndices[creatorContractAddress][claimIndex] */\n      dup8\n      dup5\n      mstore\n      dup3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13243:13257  mintIndex >> 8 */\n      0xffffff\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13256:13257  8 */\n      0x08\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13243:13257  mintIndex >> 8 */\n      dup9\n      swap1\n      shr\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13295:13364  _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex] */\n      dup1\n      dup6\n      mstore\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13396:13397  1 */\n      0x01\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":1007:1011  0xFF */\n      0xff\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13402:13432  mintIndex & MINT_INDEX_BITMASK */\n      dup7\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13396:13433  1 << (mintIndex & MINT_INDEX_BITMASK) */\n      shl\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13451:13482  mintBitmask & claimMintTracking */\n      dup1\n      dup3\n      and\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13451:13487  mintBitmask & claimMintTracking == 0 */\n      iszero\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13443:13506  require(mintBitmask & claimMintTracking == 0, \"Already minted\") */\n      tag_366\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":24932:24934   */\n      0x20\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13443:13506  require(mintBitmask & claimMintTracking == 0, \"Already minted\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":24914:24935   */\n      mstore\n        /* \"#utility.yul\":24971:24973   */\n      0x0e\n        /* \"#utility.yul\":24951:24969   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":24944:24974   */\n      mstore\n        /* \"#utility.yul\":25010:25026   */\n      0x416c7265616479206d696e746564000000000000000000000000000000000000\n        /* \"#utility.yul\":24990:25008   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":24983:25027   */\n      mstore\n        /* \"#utility.yul\":25044:25062   */\n      0x64\n      add\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13443:13506  require(mintBitmask & claimMintTracking == 0, \"Already minted\") */\n      tag_85\n        /* \"#utility.yul\":24730:25068   */\n      jump\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13443:13506  require(mintBitmask & claimMintTracking == 0, \"Already minted\") */\n    tag_366:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13516:13557  _claimMintIndices[creatorContractAddress] */\n      swap1\n      swap8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13516:13533  _claimMintIndices */\n      0x04\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13516:13557  _claimMintIndices[creatorContractAddress] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13516:13569  _claimMintIndices[creatorContractAddress][claimIndex] */\n      swap9\n      dup4\n      mstore\n      swap8\n      dup2\n      mstore\n      dup8\n      dup3\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13516:13585  _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex] */\n      swap4\n      dup3\n      mstore\n      swap3\n      swap1\n      swap3\n      mstore\n      swap5\n      swap1\n      keccak256\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13588:13619  claimMintTracking | mintBitmask */\n      swap4\n      swap1\n      swap5\n      or\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":13516:13619  _claimMintIndices[creatorContractAddress][claimIndex][claimMintIndex] = claimMintTracking | mintBitmask */\n      swap1\n      swap3\n      sstore\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":12796:13626  function _checkMerkleAndUpdate(Claim storage claim, address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] memory merkleProof) private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_339:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":384:397  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:606  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":610:611  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:611  value == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n      tag_370\n      jumpi\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:637  return \"0\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x01\n      dup2\n      mstore\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n    tag_370:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":672:677  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":657:669  uint256 temp */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n    tag_371:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":718:727  temp != 0 */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      tag_372\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":743:751  digits++ */\n      dup1\n      tag_373\n      dup2\n      tag_357\n      jump\t// in\n    tag_373:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      tag_374\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":773:775  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      dup4\n      tag_375\n      jump\t// in\n    tag_374:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      jump(tag_371)\n    tag_372:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:814  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":827:833  digits */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":817:834  new bytes(digits) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_377\n      jumpi\n      tag_377\n      tag_345\n      jump\t// in\n    tag_377:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_378\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_378:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:834  bytes memory buffer = new bytes(digits) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n    tag_379:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:861  value != 0 */\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      tag_380\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      tag_381\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":887:888  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      dup4\n      tag_382\n      jump\t// in\n    tag_381:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_383\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:950  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_384\n      jump\t// in\n    tag_383:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_385\n      swap1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:934  48 */\n      0x30\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_243\n      jump\t// in\n    tag_385:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":919:958  bytes1(uint8(48 + uint256(value % 10))) */\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:908  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":909:915  digits */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:916  buffer[digits] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_387\n      jumpi\n      tag_387\n      tag_232\n      jump\t// in\n    tag_387:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:958  buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      tag_388\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":981:983  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      dup7\n      tag_375\n      jump\t// in\n    tag_388:\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      jump(tag_379)\n    tag_380:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1017:1023  buffer */\n      swap5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":847:1031  function verify(... */\n    tag_362:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":968:972  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1020:1024  root */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":991:1016  processProof(proof, leaf) */\n      tag_390\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1004:1009  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1011:1015  leaf */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":991:1003  processProof */\n      tag_391\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":991:1016  processProof(proof, leaf) */\n      jump\t// in\n    tag_390:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":991:1024  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":847:1031  function verify(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1383:2071  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_391:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1466:1473  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1508:1512  leaf */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1466:1473  bytes32 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1522:2036  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_393:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1546:1551  proof */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1546:1558  proof.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1542:1543  i */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1542:1558  i < proof.length */\n      lt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1522:2036  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_394\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1579:1599  bytes32 proofElement */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1602:1607  proof */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1608:1609  i */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1602:1610  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_397\n      jumpi\n      tag_397\n      tag_232\n      jump\t// in\n    tag_397:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1579:1610  bytes32 proofElement = proof[i] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1644:1656  proofElement */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1628:1640  computedHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1628:1656  computedHash <= proofElement */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1624:2026  if (computedHash <= proofElement) {... */\n      tag_398\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1779:1823  abi.encodePacked(computedHash, proofElement) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":25791:25810   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":25826:25838   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":25819:25847   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":25863:25875   */\n      0x60\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1779:1823  abi.encodePacked(computedHash, proofElement) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1769:1824  keccak256(abi.encodePacked(computedHash, proofElement)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1754:1824  computedHash = keccak256(abi.encodePacked(computedHash, proofElement)) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1624:2026  if (computedHash <= proofElement) {... */\n      jump(tag_401)\n    tag_398:\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1966:2010  abi.encodePacked(proofElement, computedHash) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":25791:25810   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":25826:25838   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":25819:25847   */\n      dup5\n      swap1\n      mstore\n        /* \"#utility.yul\":25863:25875   */\n      0x60\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1966:2010  abi.encodePacked(proofElement, computedHash) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1956:2011  keccak256(abi.encodePacked(proofElement, computedHash)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1941:2011  computedHash = keccak256(abi.encodePacked(proofElement, computedHash)) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1624:2026  if (computedHash <= proofElement) {... */\n    tag_401:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1560:1563  i++ */\n      dup1\n      tag_403\n      dup2\n      tag_357\n      jump\t// in\n    tag_403:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1522:2036  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_393)\n    tag_394:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":2052:2064  computedHash */\n      swap4\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":1383:2071  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_128:\n      dup3\n      dup1\n      sload\n      tag_404\n      swap1\n      tag_145\n      jump\t// in\n    tag_404:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_406\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_409)\n    tag_406:\n      dup3\n      0x1f\n      lt\n      tag_407\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_409)\n    tag_407:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_409\n      jumpi\n      swap2\n      dup3\n      add\n    tag_408:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_409\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_408)\n    tag_409:\n      pop\n      tag_410\n      swap3\n      swap2\n      pop\n      tag_411\n      jump\t// in\n    tag_410:\n      pop\n      swap1\n      jump\t// out\n    tag_411:\n    tag_414:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_410\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_414)\n        /* \"#utility.yul\":14:346   */\n    tag_19:\n        /* \"#utility.yul\":72:78   */\n      0x00\n        /* \"#utility.yul\":125:127   */\n      0x20\n        /* \"#utility.yul\":113:122   */\n      dup3\n        /* \"#utility.yul\":104:111   */\n      dup5\n        /* \"#utility.yul\":100:123   */\n      sub\n        /* \"#utility.yul\":96:128   */\n      slt\n        /* \"#utility.yul\":93:145   */\n      iszero\n      tag_431\n      jumpi\n        /* \"#utility.yul\":141:142   */\n      0x00\n        /* \"#utility.yul\":138:139   */\n      dup1\n        /* \"#utility.yul\":131:143   */\n      revert\n        /* \"#utility.yul\":93:145   */\n    tag_431:\n        /* \"#utility.yul\":180:189   */\n      dup2\n        /* \"#utility.yul\":167:190   */\n      calldataload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":223:228   */\n      dup2\n        /* \"#utility.yul\":219:297   */\n      and\n        /* \"#utility.yul\":212:217   */\n      dup2\n        /* \"#utility.yul\":209:298   */\n      eq\n        /* \"#utility.yul\":199:316   */\n      tag_432\n      jumpi\n        /* \"#utility.yul\":312:313   */\n      0x00\n        /* \"#utility.yul\":309:310   */\n      dup1\n        /* \"#utility.yul\":302:314   */\n      revert\n        /* \"#utility.yul\":199:316   */\n    tag_432:\n        /* \"#utility.yul\":335:340   */\n      swap4\n        /* \"#utility.yul\":14:346   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":639:835   */\n    tag_417:\n        /* \"#utility.yul\":707:727   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":756:810   */\n      dup2\n      and\n        /* \"#utility.yul\":746:811   */\n      dup2\n      eq\n        /* \"#utility.yul\":736:829   */\n      tag_436\n      jumpi\n        /* \"#utility.yul\":825:826   */\n      0x00\n        /* \"#utility.yul\":822:823   */\n      dup1\n        /* \"#utility.yul\":815:827   */\n      revert\n        /* \"#utility.yul\":736:829   */\n    tag_436:\n        /* \"#utility.yul\":639:835   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":840:1004   */\n    tag_418:\n        /* \"#utility.yul\":908:913   */\n      0x00\n        /* \"#utility.yul\":953:956   */\n      0x0100\n        /* \"#utility.yul\":944:950   */\n      dup3\n        /* \"#utility.yul\":939:942   */\n      dup5\n        /* \"#utility.yul\":935:951   */\n      sub\n        /* \"#utility.yul\":931:957   */\n      slt\n        /* \"#utility.yul\":928:974   */\n      iszero\n      tag_438\n      jumpi\n        /* \"#utility.yul\":970:971   */\n      0x00\n        /* \"#utility.yul\":967:968   */\n      dup1\n        /* \"#utility.yul\":960:972   */\n      revert\n        /* \"#utility.yul\":928:974   */\n    tag_438:\n      pop\n        /* \"#utility.yul\":992:998   */\n      swap2\n        /* \"#utility.yul\":840:1004   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1009:1455   */\n    tag_25:\n        /* \"#utility.yul\":1112:1118   */\n      0x00\n        /* \"#utility.yul\":1120:1126   */\n      dup1\n        /* \"#utility.yul\":1173:1175   */\n      0x40\n        /* \"#utility.yul\":1161:1170   */\n      dup4\n        /* \"#utility.yul\":1152:1159   */\n      dup6\n        /* \"#utility.yul\":1148:1171   */\n      sub\n        /* \"#utility.yul\":1144:1176   */\n      slt\n        /* \"#utility.yul\":1141:1193   */\n      iszero\n      tag_440\n      jumpi\n        /* \"#utility.yul\":1189:1190   */\n      0x00\n        /* \"#utility.yul\":1186:1187   */\n      dup1\n        /* \"#utility.yul\":1179:1191   */\n      revert\n        /* \"#utility.yul\":1141:1193   */\n    tag_440:\n        /* \"#utility.yul\":1212:1241   */\n      tag_441\n        /* \"#utility.yul\":1231:1240   */\n      dup4\n        /* \"#utility.yul\":1212:1241   */\n      tag_417\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":1202:1241   */\n      swap2\n      pop\n        /* \"#utility.yul\":1292:1294   */\n      0x20\n        /* \"#utility.yul\":1281:1290   */\n      dup4\n        /* \"#utility.yul\":1277:1295   */\n      add\n        /* \"#utility.yul\":1264:1296   */\n      calldataload\n        /* \"#utility.yul\":1319:1337   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1311:1317   */\n      dup2\n        /* \"#utility.yul\":1308:1338   */\n      gt\n        /* \"#utility.yul\":1305:1355   */\n      iszero\n      tag_442\n      jumpi\n        /* \"#utility.yul\":1351:1352   */\n      0x00\n        /* \"#utility.yul\":1348:1349   */\n      dup1\n        /* \"#utility.yul\":1341:1353   */\n      revert\n        /* \"#utility.yul\":1305:1355   */\n    tag_442:\n        /* \"#utility.yul\":1374:1449   */\n      tag_443\n        /* \"#utility.yul\":1441:1448   */\n      dup6\n        /* \"#utility.yul\":1432:1438   */\n      dup3\n        /* \"#utility.yul\":1421:1430   */\n      dup7\n        /* \"#utility.yul\":1417:1439   */\n      add\n        /* \"#utility.yul\":1374:1449   */\n      tag_418\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":1364:1449   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1009:1455   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1642:1896   */\n    tag_31:\n        /* \"#utility.yul\":1710:1716   */\n      0x00\n        /* \"#utility.yul\":1718:1724   */\n      dup1\n        /* \"#utility.yul\":1771:1773   */\n      0x40\n        /* \"#utility.yul\":1759:1768   */\n      dup4\n        /* \"#utility.yul\":1750:1757   */\n      dup6\n        /* \"#utility.yul\":1746:1769   */\n      sub\n        /* \"#utility.yul\":1742:1774   */\n      slt\n        /* \"#utility.yul\":1739:1791   */\n      iszero\n      tag_446\n      jumpi\n        /* \"#utility.yul\":1787:1788   */\n      0x00\n        /* \"#utility.yul\":1784:1785   */\n      dup1\n        /* \"#utility.yul\":1777:1789   */\n      revert\n        /* \"#utility.yul\":1739:1791   */\n    tag_446:\n        /* \"#utility.yul\":1810:1839   */\n      tag_447\n        /* \"#utility.yul\":1829:1838   */\n      dup4\n        /* \"#utility.yul\":1810:1839   */\n      tag_417\n      jump\t// in\n    tag_447:\n        /* \"#utility.yul\":1800:1839   */\n      swap5\n        /* \"#utility.yul\":1886:1888   */\n      0x20\n        /* \"#utility.yul\":1871:1889   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1858:1890   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1642:1896   */\n      jump\t// out\n        /* \"#utility.yul\":2103:2287   */\n    tag_90:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":2152:2153   */\n      0x00\n        /* \"#utility.yul\":2145:2233   */\n      mstore\n        /* \"#utility.yul\":2252:2256   */\n      0x21\n        /* \"#utility.yul\":2249:2250   */\n      0x04\n        /* \"#utility.yul\":2242:2257   */\n      mstore\n        /* \"#utility.yul\":2276:2280   */\n      0x24\n        /* \"#utility.yul\":2273:2274   */\n      0x00\n        /* \"#utility.yul\":2266:2281   */\n      revert\n        /* \"#utility.yul\":2292:2592   */\n    tag_421:\n        /* \"#utility.yul\":2379:2380   */\n      0x04\n        /* \"#utility.yul\":2372:2377   */\n      dup2\n        /* \"#utility.yul\":2369:2381   */\n      lt\n        /* \"#utility.yul\":2359:2559   */\n      tag_452\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":2412:2413   */\n      0x00\n        /* \"#utility.yul\":2405:2493   */\n      mstore\n        /* \"#utility.yul\":2516:2520   */\n      0x21\n        /* \"#utility.yul\":2513:2514   */\n      0x04\n        /* \"#utility.yul\":2506:2521   */\n      mstore\n        /* \"#utility.yul\":2544:2548   */\n      0x24\n        /* \"#utility.yul\":2541:2542   */\n      0x00\n        /* \"#utility.yul\":2534:2549   */\n      revert\n        /* \"#utility.yul\":2359:2559   */\n    tag_452:\n        /* \"#utility.yul\":2568:2586   */\n      swap1\n      mstore\n        /* \"#utility.yul\":2292:2592   */\n      jump\t// out\n        /* \"#utility.yul\":2597:2855   */\n    tag_422:\n        /* \"#utility.yul\":2669:2670   */\n      0x00\n        /* \"#utility.yul\":2679:2792   */\n    tag_454:\n        /* \"#utility.yul\":2693:2699   */\n      dup4\n        /* \"#utility.yul\":2690:2691   */\n      dup2\n        /* \"#utility.yul\":2687:2700   */\n      lt\n        /* \"#utility.yul\":2679:2792   */\n      iszero\n      tag_456\n      jumpi\n        /* \"#utility.yul\":2769:2780   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":2763:2781   */\n      mload\n        /* \"#utility.yul\":2750:2761   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":2743:2782   */\n      mstore\n        /* \"#utility.yul\":2715:2717   */\n      0x20\n        /* \"#utility.yul\":2708:2718   */\n      add\n        /* \"#utility.yul\":2679:2792   */\n      jump(tag_454)\n    tag_456:\n        /* \"#utility.yul\":2810:2816   */\n      dup4\n        /* \"#utility.yul\":2807:2808   */\n      dup2\n        /* \"#utility.yul\":2804:2817   */\n      gt\n        /* \"#utility.yul\":2801:2849   */\n      iszero\n      tag_457\n      jumpi\n        /* \"#utility.yul\":2845:2846   */\n      0x00\n        /* \"#utility.yul\":2836:2842   */\n      dup5\n        /* \"#utility.yul\":2831:2834   */\n      dup5\n        /* \"#utility.yul\":2827:2843   */\n      add\n        /* \"#utility.yul\":2820:2847   */\n      mstore\n        /* \"#utility.yul\":2801:2849   */\n    tag_457:\n      pop\n        /* \"#utility.yul\":2597:2855   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2860:3118   */\n    tag_423:\n        /* \"#utility.yul\":2902:2905   */\n      0x00\n        /* \"#utility.yul\":2940:2945   */\n      dup2\n        /* \"#utility.yul\":2934:2946   */\n      mload\n        /* \"#utility.yul\":2967:2973   */\n      dup1\n        /* \"#utility.yul\":2962:2965   */\n      dup5\n        /* \"#utility.yul\":2955:2974   */\n      mstore\n        /* \"#utility.yul\":2983:3046   */\n      tag_459\n        /* \"#utility.yul\":3039:3045   */\n      dup2\n        /* \"#utility.yul\":3032:3036   */\n      0x20\n        /* \"#utility.yul\":3027:3030   */\n      dup7\n        /* \"#utility.yul\":3023:3037   */\n      add\n        /* \"#utility.yul\":3016:3020   */\n      0x20\n        /* \"#utility.yul\":3009:3014   */\n      dup7\n        /* \"#utility.yul\":3005:3021   */\n      add\n        /* \"#utility.yul\":2983:3046   */\n      tag_422\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":3100:3102   */\n      0x1f\n        /* \"#utility.yul\":3079:3094   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":3075:3104   */\n      and\n        /* \"#utility.yul\":3066:3105   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":3107:3111   */\n      0x20\n        /* \"#utility.yul\":3062:3112   */\n      add\n      swap3\n        /* \"#utility.yul\":2860:3118   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3123:4364   */\n    tag_34:\n        /* \"#utility.yul\":3298:3300   */\n      0x20\n        /* \"#utility.yul\":3287:3296   */\n      dup2\n        /* \"#utility.yul\":3280:3301   */\n      mstore\n        /* \"#utility.yul\":3310:3362   */\n      tag_461\n        /* \"#utility.yul\":3358:3360   */\n      0x20\n        /* \"#utility.yul\":3347:3356   */\n      dup3\n        /* \"#utility.yul\":3343:3361   */\n      add\n        /* \"#utility.yul\":3334:3340   */\n      dup4\n        /* \"#utility.yul\":3328:3341   */\n      mload\n        /* \"#utility.yul\":1977:1987   */\n      0xffffffff\n        /* \"#utility.yul\":1966:1988   */\n      and\n        /* \"#utility.yul\":1954:1989   */\n      swap1\n      mstore\n        /* \"#utility.yul\":1901:1995   */\n      jump\n        /* \"#utility.yul\":3310:3362   */\n    tag_461:\n        /* \"#utility.yul\":3261:3265   */\n      0x00\n        /* \"#utility.yul\":3409:3411   */\n      0x20\n        /* \"#utility.yul\":3401:3407   */\n      dup4\n        /* \"#utility.yul\":3397:3412   */\n      add\n        /* \"#utility.yul\":3391:3413   */\n      mload\n        /* \"#utility.yul\":3422:3473   */\n      tag_462\n        /* \"#utility.yul\":3469:3471   */\n      0x40\n        /* \"#utility.yul\":3458:3467   */\n      dup5\n        /* \"#utility.yul\":3454:3472   */\n      add\n        /* \"#utility.yul\":3440:3452   */\n      dup3\n        /* \"#utility.yul\":1977:1987   */\n      0xffffffff\n        /* \"#utility.yul\":1966:1988   */\n      and\n        /* \"#utility.yul\":1954:1989   */\n      swap1\n      mstore\n        /* \"#utility.yul\":1901:1995   */\n      jump\n        /* \"#utility.yul\":3422:3473   */\n    tag_462:\n      pop\n        /* \"#utility.yul\":3522:3524   */\n      0x40\n        /* \"#utility.yul\":3510:3525   */\n      dup4\n      add\n        /* \"#utility.yul\":3504:3526   */\n      mload\n        /* \"#utility.yul\":1977:1987   */\n      0xffffffff\n        /* \"#utility.yul\":1966:1988   */\n      dup2\n      and\n        /* \"#utility.yul\":3584:3586   */\n      0x60\n        /* \"#utility.yul\":3569:3587   */\n      dup5\n      add\n        /* \"#utility.yul\":1954:1989   */\n      mstore\n      pop\n        /* \"#utility.yul\":3637:3639   */\n      0x60\n        /* \"#utility.yul\":3625:3640   */\n      dup4\n      add\n        /* \"#utility.yul\":3619:3641   */\n      mload\n        /* \"#utility.yul\":2076:2090   */\n      0xffffffffffff\n        /* \"#utility.yul\":2065:2091   */\n      dup2\n      and\n        /* \"#utility.yul\":3699:3702   */\n      0x80\n        /* \"#utility.yul\":3684:3703   */\n      dup5\n      add\n        /* \"#utility.yul\":2053:2092   */\n      mstore\n      pop\n        /* \"#utility.yul\":3753:3756   */\n      0x80\n        /* \"#utility.yul\":3741:3757   */\n      dup4\n      add\n        /* \"#utility.yul\":3735:3758   */\n      mload\n        /* \"#utility.yul\":2076:2090   */\n      0xffffffffffff\n        /* \"#utility.yul\":2065:2091   */\n      dup2\n      and\n        /* \"#utility.yul\":3816:3819   */\n      0xa0\n        /* \"#utility.yul\":3801:3820   */\n      dup5\n      add\n        /* \"#utility.yul\":2053:2092   */\n      mstore\n        /* \"#utility.yul\":3767:3821   */\n      pop\n        /* \"#utility.yul\":3870:3873   */\n      0xa0\n        /* \"#utility.yul\":3862:3868   */\n      dup4\n        /* \"#utility.yul\":3858:3874   */\n      add\n        /* \"#utility.yul\":3852:3875   */\n      mload\n        /* \"#utility.yul\":3884:3952   */\n      tag_466\n        /* \"#utility.yul\":3947:3950   */\n      0xc0\n        /* \"#utility.yul\":3936:3945   */\n      dup5\n        /* \"#utility.yul\":3932:3951   */\n      add\n        /* \"#utility.yul\":3916:3930   */\n      dup3\n        /* \"#utility.yul\":3884:3952   */\n      tag_421\n      jump\t// in\n    tag_466:\n      pop\n        /* \"#utility.yul\":4001:4004   */\n      0xc0\n        /* \"#utility.yul\":3989:4005   */\n      dup4\n      add\n        /* \"#utility.yul\":3983:4006   */\n      mload\n        /* \"#utility.yul\":421:434   */\n      dup1\n      iszero\n        /* \"#utility.yul\":414:435   */\n      iszero\n        /* \"#utility.yul\":4062:4065   */\n      0xe0\n        /* \"#utility.yul\":4047:4066   */\n      dup5\n      add\n        /* \"#utility.yul\":402:436   */\n      mstore\n      pop\n        /* \"#utility.yul\":4104:4107   */\n      0xe0\n        /* \"#utility.yul\":4092:4108   */\n      dup4\n      add\n        /* \"#utility.yul\":4086:4109   */\n      mload\n        /* \"#utility.yul\":4128:4131   */\n      0x0100\n        /* \"#utility.yul\":4147:4165   */\n      dup4\n      dup2\n      add\n        /* \"#utility.yul\":4140:4170   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":4207:4222   */\n      dup4\n      add\n        /* \"#utility.yul\":4201:4223   */\n      mload\n        /* \"#utility.yul\":4242:4248   */\n      0x0120\n        /* \"#utility.yul\":4264:4282   */\n      dup1\n      dup5\n      add\n        /* \"#utility.yul\":4257:4287   */\n      mstore\n        /* \"#utility.yul\":4304:4358   */\n      tag_380\n        /* \"#utility.yul\":4353:4356   */\n      0x0140\n        /* \"#utility.yul\":4338:4357   */\n      dup5\n      add\n        /* \"#utility.yul\":4201:4223   */\n      dup3\n        /* \"#utility.yul\":4304:4358   */\n      tag_423\n      jump\t// in\n        /* \"#utility.yul\":4369:4883   */\n    tag_37:\n        /* \"#utility.yul\":4481:4487   */\n      0x00\n        /* \"#utility.yul\":4489:4495   */\n      dup1\n        /* \"#utility.yul\":4497:4503   */\n      0x00\n        /* \"#utility.yul\":4550:4552   */\n      0x60\n        /* \"#utility.yul\":4538:4547   */\n      dup5\n        /* \"#utility.yul\":4529:4536   */\n      dup7\n        /* \"#utility.yul\":4525:4548   */\n      sub\n        /* \"#utility.yul\":4521:4553   */\n      slt\n        /* \"#utility.yul\":4518:4570   */\n      iszero\n      tag_470\n      jumpi\n        /* \"#utility.yul\":4566:4567   */\n      0x00\n        /* \"#utility.yul\":4563:4564   */\n      dup1\n        /* \"#utility.yul\":4556:4568   */\n      revert\n        /* \"#utility.yul\":4518:4570   */\n    tag_470:\n        /* \"#utility.yul\":4589:4618   */\n      tag_471\n        /* \"#utility.yul\":4608:4617   */\n      dup5\n        /* \"#utility.yul\":4589:4618   */\n      tag_417\n      jump\t// in\n    tag_471:\n        /* \"#utility.yul\":4579:4618   */\n      swap3\n      pop\n        /* \"#utility.yul\":4665:4667   */\n      0x20\n        /* \"#utility.yul\":4654:4663   */\n      dup5\n        /* \"#utility.yul\":4650:4668   */\n      add\n        /* \"#utility.yul\":4637:4669   */\n      calldataload\n        /* \"#utility.yul\":4627:4669   */\n      swap2\n      pop\n        /* \"#utility.yul\":4720:4722   */\n      0x40\n        /* \"#utility.yul\":4709:4718   */\n      dup5\n        /* \"#utility.yul\":4705:4723   */\n      add\n        /* \"#utility.yul\":4692:4724   */\n      calldataload\n        /* \"#utility.yul\":4747:4765   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4739:4745   */\n      dup2\n        /* \"#utility.yul\":4736:4766   */\n      gt\n        /* \"#utility.yul\":4733:4783   */\n      iszero\n      tag_472\n      jumpi\n        /* \"#utility.yul\":4779:4780   */\n      0x00\n        /* \"#utility.yul\":4776:4777   */\n      dup1\n        /* \"#utility.yul\":4769:4781   */\n      revert\n        /* \"#utility.yul\":4733:4783   */\n    tag_472:\n        /* \"#utility.yul\":4802:4877   */\n      tag_473\n        /* \"#utility.yul\":4869:4876   */\n      dup7\n        /* \"#utility.yul\":4860:4866   */\n      dup3\n        /* \"#utility.yul\":4849:4858   */\n      dup8\n        /* \"#utility.yul\":4845:4867   */\n      add\n        /* \"#utility.yul\":4802:4877   */\n      tag_418\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":4792:4877   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":4369:4883   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4888:5254   */\n    tag_424:\n        /* \"#utility.yul\":4950:4958   */\n      0x00\n        /* \"#utility.yul\":4960:4966   */\n      dup1\n        /* \"#utility.yul\":5014:5017   */\n      dup4\n        /* \"#utility.yul\":5007:5011   */\n      0x1f\n        /* \"#utility.yul\":4999:5005   */\n      dup5\n        /* \"#utility.yul\":4995:5012   */\n      add\n        /* \"#utility.yul\":4991:5018   */\n      slt\n        /* \"#utility.yul\":4981:5036   */\n      tag_475\n      jumpi\n        /* \"#utility.yul\":5032:5033   */\n      0x00\n        /* \"#utility.yul\":5029:5030   */\n      dup1\n        /* \"#utility.yul\":5022:5034   */\n      revert\n        /* \"#utility.yul\":4981:5036   */\n    tag_475:\n      pop\n        /* \"#utility.yul\":5055:5075   */\n      dup2\n      calldataload\n        /* \"#utility.yul\":5098:5116   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5087:5117   */\n      dup2\n      gt\n        /* \"#utility.yul\":5084:5134   */\n      iszero\n      tag_476\n      jumpi\n        /* \"#utility.yul\":5130:5131   */\n      0x00\n        /* \"#utility.yul\":5127:5128   */\n      dup1\n        /* \"#utility.yul\":5120:5132   */\n      revert\n        /* \"#utility.yul\":5084:5134   */\n    tag_476:\n        /* \"#utility.yul\":5167:5171   */\n      0x20\n        /* \"#utility.yul\":5159:5165   */\n      dup4\n        /* \"#utility.yul\":5155:5172   */\n      add\n        /* \"#utility.yul\":5143:5172   */\n      swap2\n      pop\n        /* \"#utility.yul\":5227:5230   */\n      dup4\n        /* \"#utility.yul\":5220:5224   */\n      0x20\n        /* \"#utility.yul\":5210:5216   */\n      dup3\n        /* \"#utility.yul\":5207:5208   */\n      0x05\n        /* \"#utility.yul\":5203:5217   */\n      shl\n        /* \"#utility.yul\":5195:5201   */\n      dup6\n        /* \"#utility.yul\":5191:5218   */\n      add\n        /* \"#utility.yul\":5187:5225   */\n      add\n        /* \"#utility.yul\":5184:5231   */\n      gt\n        /* \"#utility.yul\":5181:5248   */\n      iszero\n      tag_477\n      jumpi\n        /* \"#utility.yul\":5244:5245   */\n      0x00\n        /* \"#utility.yul\":5241:5242   */\n      dup1\n        /* \"#utility.yul\":5234:5246   */\n      revert\n        /* \"#utility.yul\":5181:5248   */\n    tag_477:\n        /* \"#utility.yul\":4888:5254   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5259:6360   */\n    tag_41:\n        /* \"#utility.yul\":5433:5439   */\n      0x00\n        /* \"#utility.yul\":5441:5447   */\n      dup1\n        /* \"#utility.yul\":5449:5455   */\n      0x00\n        /* \"#utility.yul\":5457:5463   */\n      dup1\n        /* \"#utility.yul\":5465:5471   */\n      0x00\n        /* \"#utility.yul\":5473:5479   */\n      dup1\n        /* \"#utility.yul\":5481:5487   */\n      0x00\n        /* \"#utility.yul\":5534:5537   */\n      0xa0\n        /* \"#utility.yul\":5522:5531   */\n      dup9\n        /* \"#utility.yul\":5513:5520   */\n      dup11\n        /* \"#utility.yul\":5509:5532   */\n      sub\n        /* \"#utility.yul\":5505:5538   */\n      slt\n        /* \"#utility.yul\":5502:5555   */\n      iszero\n      tag_479\n      jumpi\n        /* \"#utility.yul\":5551:5552   */\n      0x00\n        /* \"#utility.yul\":5548:5549   */\n      dup1\n        /* \"#utility.yul\":5541:5553   */\n      revert\n        /* \"#utility.yul\":5502:5555   */\n    tag_479:\n        /* \"#utility.yul\":5574:5603   */\n      tag_480\n        /* \"#utility.yul\":5593:5602   */\n      dup9\n        /* \"#utility.yul\":5574:5603   */\n      tag_417\n      jump\t// in\n    tag_480:\n        /* \"#utility.yul\":5564:5603   */\n      swap7\n      pop\n        /* \"#utility.yul\":5650:5652   */\n      0x20\n        /* \"#utility.yul\":5639:5648   */\n      dup9\n        /* \"#utility.yul\":5635:5653   */\n      add\n        /* \"#utility.yul\":5622:5654   */\n      calldataload\n        /* \"#utility.yul\":5612:5654   */\n      swap6\n      pop\n        /* \"#utility.yul\":5704:5706   */\n      0x40\n        /* \"#utility.yul\":5693:5702   */\n      dup9\n        /* \"#utility.yul\":5689:5707   */\n      add\n        /* \"#utility.yul\":5676:5708   */\n      calldataload\n        /* \"#utility.yul\":5748:5754   */\n      0xffff\n        /* \"#utility.yul\":5741:5746   */\n      dup2\n        /* \"#utility.yul\":5737:5755   */\n      and\n        /* \"#utility.yul\":5730:5735   */\n      dup2\n        /* \"#utility.yul\":5727:5756   */\n      eq\n        /* \"#utility.yul\":5717:5774   */\n      tag_481\n      jumpi\n        /* \"#utility.yul\":5770:5771   */\n      0x00\n        /* \"#utility.yul\":5767:5768   */\n      dup1\n        /* \"#utility.yul\":5760:5772   */\n      revert\n        /* \"#utility.yul\":5717:5774   */\n    tag_481:\n        /* \"#utility.yul\":5793:5798   */\n      swap5\n      pop\n        /* \"#utility.yul\":5849:5851   */\n      0x60\n        /* \"#utility.yul\":5834:5852   */\n      dup9\n      add\n        /* \"#utility.yul\":5821:5853   */\n      calldataload\n        /* \"#utility.yul\":5872:5890   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5902:5916   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":5899:5933   */\n      iszero\n      tag_482\n      jumpi\n        /* \"#utility.yul\":5929:5930   */\n      0x00\n        /* \"#utility.yul\":5926:5927   */\n      dup1\n        /* \"#utility.yul\":5919:5931   */\n      revert\n        /* \"#utility.yul\":5899:5933   */\n    tag_482:\n        /* \"#utility.yul\":5968:6037   */\n      tag_483\n        /* \"#utility.yul\":6029:6036   */\n      dup12\n        /* \"#utility.yul\":6020:6026   */\n      dup4\n        /* \"#utility.yul\":6009:6018   */\n      dup13\n        /* \"#utility.yul\":6005:6027   */\n      add\n        /* \"#utility.yul\":5968:6037   */\n      tag_424\n      jump\t// in\n    tag_483:\n        /* \"#utility.yul\":6056:6064   */\n      swap1\n      swap7\n      pop\n        /* \"#utility.yul\":5942:6037   */\n      swap5\n      pop\n        /* \"#utility.yul\":6144:6147   */\n      0x80\n        /* \"#utility.yul\":6129:6148   */\n      dup11\n      add\n        /* \"#utility.yul\":6116:6149   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":6161:6177   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":6158:6194   */\n      iszero\n      tag_484\n      jumpi\n        /* \"#utility.yul\":6190:6191   */\n      0x00\n        /* \"#utility.yul\":6187:6188   */\n      dup1\n        /* \"#utility.yul\":6180:6192   */\n      revert\n        /* \"#utility.yul\":6158:6194   */\n    tag_484:\n      pop\n        /* \"#utility.yul\":6229:6300   */\n      tag_485\n        /* \"#utility.yul\":6292:6299   */\n      dup11\n        /* \"#utility.yul\":6281:6289   */\n      dup3\n        /* \"#utility.yul\":6270:6279   */\n      dup12\n        /* \"#utility.yul\":6266:6290   */\n      add\n        /* \"#utility.yul\":6229:6300   */\n      tag_424\n      jump\t// in\n    tag_485:\n        /* \"#utility.yul\":5259:6360   */\n      swap9\n      swap12\n      swap8\n      swap11\n      pop\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":6203:6300   */\n      swap3\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":5259:6360   */\n      jump\t// out\n        /* \"#utility.yul\":6365:6693   */\n    tag_45:\n        /* \"#utility.yul\":6442:6448   */\n      0x00\n        /* \"#utility.yul\":6450:6456   */\n      dup1\n        /* \"#utility.yul\":6458:6464   */\n      0x00\n        /* \"#utility.yul\":6511:6513   */\n      0x60\n        /* \"#utility.yul\":6499:6508   */\n      dup5\n        /* \"#utility.yul\":6490:6497   */\n      dup7\n        /* \"#utility.yul\":6486:6509   */\n      sub\n        /* \"#utility.yul\":6482:6514   */\n      slt\n        /* \"#utility.yul\":6479:6531   */\n      iszero\n      tag_487\n      jumpi\n        /* \"#utility.yul\":6527:6528   */\n      0x00\n        /* \"#utility.yul\":6524:6525   */\n      dup1\n        /* \"#utility.yul\":6517:6529   */\n      revert\n        /* \"#utility.yul\":6479:6531   */\n    tag_487:\n        /* \"#utility.yul\":6550:6579   */\n      tag_488\n        /* \"#utility.yul\":6569:6578   */\n      dup5\n        /* \"#utility.yul\":6550:6579   */\n      tag_417\n      jump\t// in\n    tag_488:\n        /* \"#utility.yul\":6540:6579   */\n      swap3\n      pop\n        /* \"#utility.yul\":6598:6636   */\n      tag_489\n        /* \"#utility.yul\":6632:6634   */\n      0x20\n        /* \"#utility.yul\":6621:6630   */\n      dup6\n        /* \"#utility.yul\":6617:6635   */\n      add\n        /* \"#utility.yul\":6598:6636   */\n      tag_417\n      jump\t// in\n    tag_489:\n        /* \"#utility.yul\":6588:6636   */\n      swap2\n      pop\n        /* \"#utility.yul\":6683:6685   */\n      0x40\n        /* \"#utility.yul\":6672:6681   */\n      dup5\n        /* \"#utility.yul\":6668:6686   */\n      add\n        /* \"#utility.yul\":6655:6687   */\n      calldataload\n        /* \"#utility.yul\":6645:6687   */\n      swap1\n      pop\n        /* \"#utility.yul\":6365:6693   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":6895:7058   */\n    tag_425:\n        /* \"#utility.yul\":6962:6982   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":7022:7032   */\n      0xffffffff\n        /* \"#utility.yul\":7011:7033   */\n      dup2\n      and\n        /* \"#utility.yul\":7001:7034   */\n      dup2\n      eq\n        /* \"#utility.yul\":6991:7052   */\n      tag_436\n      jumpi\n        /* \"#utility.yul\":7048:7049   */\n      0x00\n        /* \"#utility.yul\":7045:7046   */\n      dup1\n        /* \"#utility.yul\":7038:7050   */\n      revert\n        /* \"#utility.yul\":7063:7714   */\n    tag_51:\n        /* \"#utility.yul\":7175:7181   */\n      0x00\n        /* \"#utility.yul\":7183:7189   */\n      dup1\n        /* \"#utility.yul\":7191:7197   */\n      0x00\n        /* \"#utility.yul\":7199:7205   */\n      dup1\n        /* \"#utility.yul\":7207:7213   */\n      0x00\n        /* \"#utility.yul\":7260:7263   */\n      0x80\n        /* \"#utility.yul\":7248:7257   */\n      dup7\n        /* \"#utility.yul\":7239:7246   */\n      dup9\n        /* \"#utility.yul\":7235:7258   */\n      sub\n        /* \"#utility.yul\":7231:7264   */\n      slt\n        /* \"#utility.yul\":7228:7281   */\n      iszero\n      tag_494\n      jumpi\n        /* \"#utility.yul\":7277:7278   */\n      0x00\n        /* \"#utility.yul\":7274:7275   */\n      dup1\n        /* \"#utility.yul\":7267:7279   */\n      revert\n        /* \"#utility.yul\":7228:7281   */\n    tag_494:\n        /* \"#utility.yul\":7300:7329   */\n      tag_495\n        /* \"#utility.yul\":7319:7328   */\n      dup7\n        /* \"#utility.yul\":7300:7329   */\n      tag_417\n      jump\t// in\n    tag_495:\n        /* \"#utility.yul\":7290:7329   */\n      swap5\n      pop\n        /* \"#utility.yul\":7376:7378   */\n      0x20\n        /* \"#utility.yul\":7365:7374   */\n      dup7\n        /* \"#utility.yul\":7361:7379   */\n      add\n        /* \"#utility.yul\":7348:7380   */\n      calldataload\n        /* \"#utility.yul\":7338:7380   */\n      swap4\n      pop\n        /* \"#utility.yul\":7399:7436   */\n      tag_496\n        /* \"#utility.yul\":7432:7434   */\n      0x40\n        /* \"#utility.yul\":7421:7430   */\n      dup8\n        /* \"#utility.yul\":7417:7435   */\n      add\n        /* \"#utility.yul\":7399:7436   */\n      tag_425\n      jump\t// in\n    tag_496:\n        /* \"#utility.yul\":7389:7436   */\n      swap3\n      pop\n        /* \"#utility.yul\":7487:7489   */\n      0x60\n        /* \"#utility.yul\":7476:7485   */\n      dup7\n        /* \"#utility.yul\":7472:7490   */\n      add\n        /* \"#utility.yul\":7459:7491   */\n      calldataload\n        /* \"#utility.yul\":7514:7532   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7506:7512   */\n      dup2\n        /* \"#utility.yul\":7503:7533   */\n      gt\n        /* \"#utility.yul\":7500:7550   */\n      iszero\n      tag_497\n      jumpi\n        /* \"#utility.yul\":7546:7547   */\n      0x00\n        /* \"#utility.yul\":7543:7544   */\n      dup1\n        /* \"#utility.yul\":7536:7548   */\n      revert\n        /* \"#utility.yul\":7500:7550   */\n    tag_497:\n        /* \"#utility.yul\":7585:7654   */\n      tag_498\n        /* \"#utility.yul\":7646:7653   */\n      dup9\n        /* \"#utility.yul\":7637:7643   */\n      dup3\n        /* \"#utility.yul\":7626:7635   */\n      dup10\n        /* \"#utility.yul\":7622:7644   */\n      add\n        /* \"#utility.yul\":7585:7654   */\n      tag_424\n      jump\t// in\n    tag_498:\n        /* \"#utility.yul\":7063:7714   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      pop\n        /* \"#utility.yul\":7673:7681   */\n      swap3\n      swap5\n        /* \"#utility.yul\":7559:7654   */\n      swap4\n        /* \"#utility.yul\":7063:7714   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7719:8045   */\n    tag_55:\n        /* \"#utility.yul\":7795:7801   */\n      0x00\n        /* \"#utility.yul\":7803:7809   */\n      dup1\n        /* \"#utility.yul\":7811:7817   */\n      0x00\n        /* \"#utility.yul\":7864:7866   */\n      0x60\n        /* \"#utility.yul\":7852:7861   */\n      dup5\n        /* \"#utility.yul\":7843:7850   */\n      dup7\n        /* \"#utility.yul\":7839:7862   */\n      sub\n        /* \"#utility.yul\":7835:7867   */\n      slt\n        /* \"#utility.yul\":7832:7884   */\n      iszero\n      tag_500\n      jumpi\n        /* \"#utility.yul\":7880:7881   */\n      0x00\n        /* \"#utility.yul\":7877:7878   */\n      dup1\n        /* \"#utility.yul\":7870:7882   */\n      revert\n        /* \"#utility.yul\":7832:7884   */\n    tag_500:\n        /* \"#utility.yul\":7903:7932   */\n      tag_501\n        /* \"#utility.yul\":7922:7931   */\n      dup5\n        /* \"#utility.yul\":7903:7932   */\n      tag_417\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":7893:7932   */\n      swap3\n      pop\n        /* \"#utility.yul\":7979:7981   */\n      0x20\n        /* \"#utility.yul\":7968:7977   */\n      dup5\n        /* \"#utility.yul\":7964:7982   */\n      add\n        /* \"#utility.yul\":7951:7983   */\n      calldataload\n        /* \"#utility.yul\":7941:7983   */\n      swap2\n      pop\n        /* \"#utility.yul\":8002:8039   */\n      tag_502\n        /* \"#utility.yul\":8035:8037   */\n      0x40\n        /* \"#utility.yul\":8024:8033   */\n      dup6\n        /* \"#utility.yul\":8020:8038   */\n      add\n        /* \"#utility.yul\":8002:8039   */\n      tag_425\n      jump\t// in\n    tag_502:\n        /* \"#utility.yul\":7992:8039   */\n      swap1\n      pop\n        /* \"#utility.yul\":7719:8045   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":8050:8236   */\n    tag_60:\n        /* \"#utility.yul\":8109:8115   */\n      0x00\n        /* \"#utility.yul\":8162:8164   */\n      0x20\n        /* \"#utility.yul\":8150:8159   */\n      dup3\n        /* \"#utility.yul\":8141:8148   */\n      dup5\n        /* \"#utility.yul\":8137:8160   */\n      sub\n        /* \"#utility.yul\":8133:8165   */\n      slt\n        /* \"#utility.yul\":8130:8182   */\n      iszero\n      tag_504\n      jumpi\n        /* \"#utility.yul\":8178:8179   */\n      0x00\n        /* \"#utility.yul\":8175:8176   */\n      dup1\n        /* \"#utility.yul\":8168:8180   */\n      revert\n        /* \"#utility.yul\":8130:8182   */\n    tag_504:\n        /* \"#utility.yul\":8201:8230   */\n      tag_432\n        /* \"#utility.yul\":8220:8229   */\n      dup3\n        /* \"#utility.yul\":8201:8230   */\n      tag_417\n      jump\t// in\n        /* \"#utility.yul\":8241:8461   */\n    tag_67:\n        /* \"#utility.yul\":8390:8392   */\n      0x20\n        /* \"#utility.yul\":8379:8388   */\n      dup2\n        /* \"#utility.yul\":8372:8393   */\n      mstore\n        /* \"#utility.yul\":8353:8357   */\n      0x00\n        /* \"#utility.yul\":8410:8455   */\n      tag_432\n        /* \"#utility.yul\":8451:8453   */\n      0x20\n        /* \"#utility.yul\":8440:8449   */\n      dup4\n        /* \"#utility.yul\":8436:8454   */\n      add\n        /* \"#utility.yul\":8428:8434   */\n      dup5\n        /* \"#utility.yul\":8410:8455   */\n      tag_423\n      jump\t// in\n        /* \"#utility.yul\":8466:9043   */\n    tag_70:\n        /* \"#utility.yul\":8569:8575   */\n      0x00\n        /* \"#utility.yul\":8577:8583   */\n      dup1\n        /* \"#utility.yul\":8585:8591   */\n      0x00\n        /* \"#utility.yul\":8593:8599   */\n      dup1\n        /* \"#utility.yul\":8646:8648   */\n      0x60\n        /* \"#utility.yul\":8634:8643   */\n      dup6\n        /* \"#utility.yul\":8625:8632   */\n      dup8\n        /* \"#utility.yul\":8621:8644   */\n      sub\n        /* \"#utility.yul\":8617:8649   */\n      slt\n        /* \"#utility.yul\":8614:8666   */\n      iszero\n      tag_509\n      jumpi\n        /* \"#utility.yul\":8662:8663   */\n      0x00\n        /* \"#utility.yul\":8659:8660   */\n      dup1\n        /* \"#utility.yul\":8652:8664   */\n      revert\n        /* \"#utility.yul\":8614:8666   */\n    tag_509:\n        /* \"#utility.yul\":8685:8714   */\n      tag_510\n        /* \"#utility.yul\":8704:8713   */\n      dup6\n        /* \"#utility.yul\":8685:8714   */\n      tag_417\n      jump\t// in\n    tag_510:\n        /* \"#utility.yul\":8675:8714   */\n      swap4\n      pop\n        /* \"#utility.yul\":8761:8763   */\n      0x20\n        /* \"#utility.yul\":8750:8759   */\n      dup6\n        /* \"#utility.yul\":8746:8764   */\n      add\n        /* \"#utility.yul\":8733:8765   */\n      calldataload\n        /* \"#utility.yul\":8723:8765   */\n      swap3\n      pop\n        /* \"#utility.yul\":8816:8818   */\n      0x40\n        /* \"#utility.yul\":8805:8814   */\n      dup6\n        /* \"#utility.yul\":8801:8819   */\n      add\n        /* \"#utility.yul\":8788:8820   */\n      calldataload\n        /* \"#utility.yul\":8843:8861   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":8835:8841   */\n      dup2\n        /* \"#utility.yul\":8832:8862   */\n      gt\n        /* \"#utility.yul\":8829:8879   */\n      iszero\n      tag_511\n      jumpi\n        /* \"#utility.yul\":8875:8876   */\n      0x00\n        /* \"#utility.yul\":8872:8873   */\n      dup1\n        /* \"#utility.yul\":8865:8877   */\n      revert\n        /* \"#utility.yul\":8829:8879   */\n    tag_511:\n        /* \"#utility.yul\":8914:8983   */\n      tag_512\n        /* \"#utility.yul\":8975:8982   */\n      dup8\n        /* \"#utility.yul\":8966:8972   */\n      dup3\n        /* \"#utility.yul\":8955:8964   */\n      dup9\n        /* \"#utility.yul\":8951:8973   */\n      add\n        /* \"#utility.yul\":8914:8983   */\n      tag_424\n      jump\t// in\n    tag_512:\n        /* \"#utility.yul\":8466:9043   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n        /* \"#utility.yul\":9002:9010   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":8466:9043   */\n      jump\t// out\n        /* \"#utility.yul\":9048:9690   */\n    tag_73:\n        /* \"#utility.yul\":9213:9215   */\n      0x20\n        /* \"#utility.yul\":9265:9286   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9335:9348   */\n      dup3\n      mload\n        /* \"#utility.yul\":9238:9256   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":9357:9379   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":9184:9188   */\n      0x00\n      swap2\n        /* \"#utility.yul\":9213:9215   */\n      swap1\n        /* \"#utility.yul\":9436:9451   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":9410:9412   */\n      0x40\n        /* \"#utility.yul\":9395:9413   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":9184:9188   */\n      dup5\n        /* \"#utility.yul\":9479:9664   */\n    tag_514:\n        /* \"#utility.yul\":9493:9499   */\n      dup2\n        /* \"#utility.yul\":9490:9491   */\n      dup2\n        /* \"#utility.yul\":9487:9500   */\n      lt\n        /* \"#utility.yul\":9479:9664   */\n      iszero\n      tag_516\n      jumpi\n        /* \"#utility.yul\":9568:9581   */\n      dup4\n      mload\n        /* \"#utility.yul\":9561:9582   */\n      iszero\n        /* \"#utility.yul\":9554:9583   */\n      iszero\n        /* \"#utility.yul\":9542:9584   */\n      dup4\n      mstore\n        /* \"#utility.yul\":9639:9654   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":9604:9616   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":9515:9516   */\n      0x01\n        /* \"#utility.yul\":9508:9517   */\n      add\n        /* \"#utility.yul\":9479:9664   */\n      jump(tag_514)\n    tag_516:\n      pop\n        /* \"#utility.yul\":9681:9684   */\n      swap1\n      swap7\n        /* \"#utility.yul\":9048:9690   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9926:10044   */\n    tag_426:\n        /* \"#utility.yul\":10012:10017   */\n      dup1\n        /* \"#utility.yul\":10005:10018   */\n      iszero\n        /* \"#utility.yul\":9998:10019   */\n      iszero\n        /* \"#utility.yul\":9991:9996   */\n      dup2\n        /* \"#utility.yul\":9988:10020   */\n      eq\n        /* \"#utility.yul\":9978:10038   */\n      tag_519\n      jumpi\n        /* \"#utility.yul\":10034:10035   */\n      0x00\n        /* \"#utility.yul\":10031:10032   */\n      dup1\n        /* \"#utility.yul\":10024:10036   */\n      revert\n        /* \"#utility.yul\":9978:10038   */\n    tag_519:\n        /* \"#utility.yul\":9926:10044   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10049:10294   */\n    tag_83:\n        /* \"#utility.yul\":10116:10122   */\n      0x00\n        /* \"#utility.yul\":10169:10171   */\n      0x20\n        /* \"#utility.yul\":10157:10166   */\n      dup3\n        /* \"#utility.yul\":10148:10155   */\n      dup5\n        /* \"#utility.yul\":10144:10167   */\n      sub\n        /* \"#utility.yul\":10140:10172   */\n      slt\n        /* \"#utility.yul\":10137:10189   */\n      iszero\n      tag_521\n      jumpi\n        /* \"#utility.yul\":10185:10186   */\n      0x00\n        /* \"#utility.yul\":10182:10183   */\n      dup1\n        /* \"#utility.yul\":10175:10187   */\n      revert\n        /* \"#utility.yul\":10137:10189   */\n    tag_521:\n        /* \"#utility.yul\":10217:10226   */\n      dup2\n        /* \"#utility.yul\":10211:10227   */\n      mload\n        /* \"#utility.yul\":10236:10264   */\n      tag_432\n        /* \"#utility.yul\":10258:10263   */\n      dup2\n        /* \"#utility.yul\":10236:10264   */\n      tag_426\n      jump\t// in\n        /* \"#utility.yul\":10711:10987   */\n    tag_92:\n        /* \"#utility.yul\":10790:10796   */\n      0x00\n        /* \"#utility.yul\":10843:10845   */\n      0x20\n        /* \"#utility.yul\":10831:10840   */\n      dup3\n        /* \"#utility.yul\":10822:10829   */\n      dup5\n        /* \"#utility.yul\":10818:10841   */\n      sub\n        /* \"#utility.yul\":10814:10846   */\n      slt\n        /* \"#utility.yul\":10811:10863   */\n      iszero\n      tag_525\n      jumpi\n        /* \"#utility.yul\":10859:10860   */\n      0x00\n        /* \"#utility.yul\":10856:10857   */\n      dup1\n        /* \"#utility.yul\":10849:10861   */\n      revert\n        /* \"#utility.yul\":10811:10863   */\n    tag_525:\n        /* \"#utility.yul\":10898:10907   */\n      dup2\n        /* \"#utility.yul\":10885:10908   */\n      calldataload\n        /* \"#utility.yul\":10937:10938   */\n      0x04\n        /* \"#utility.yul\":10930:10935   */\n      dup2\n        /* \"#utility.yul\":10927:10939   */\n      lt\n        /* \"#utility.yul\":10917:10957   */\n      tag_432\n      jumpi\n        /* \"#utility.yul\":10953:10954   */\n      0x00\n        /* \"#utility.yul\":10950:10951   */\n      dup1\n        /* \"#utility.yul\":10943:10955   */\n      revert\n        /* \"#utility.yul\":11408:11688   */\n    tag_99:\n        /* \"#utility.yul\":11466:11472   */\n      0x00\n        /* \"#utility.yul\":11519:11521   */\n      0x20\n        /* \"#utility.yul\":11507:11516   */\n      dup3\n        /* \"#utility.yul\":11498:11505   */\n      dup5\n        /* \"#utility.yul\":11494:11517   */\n      sub\n        /* \"#utility.yul\":11490:11522   */\n      slt\n        /* \"#utility.yul\":11487:11539   */\n      iszero\n      tag_529\n      jumpi\n        /* \"#utility.yul\":11535:11536   */\n      0x00\n        /* \"#utility.yul\":11532:11533   */\n      dup1\n        /* \"#utility.yul\":11525:11537   */\n      revert\n        /* \"#utility.yul\":11487:11539   */\n    tag_529:\n        /* \"#utility.yul\":11574:11583   */\n      dup2\n        /* \"#utility.yul\":11561:11584   */\n      calldataload\n        /* \"#utility.yul\":11624:11638   */\n      0xffffffffffff\n        /* \"#utility.yul\":11617:11622   */\n      dup2\n        /* \"#utility.yul\":11613:11639   */\n      and\n        /* \"#utility.yul\":11606:11611   */\n      dup2\n        /* \"#utility.yul\":11603:11640   */\n      eq\n        /* \"#utility.yul\":11593:11658   */\n      tag_432\n      jumpi\n        /* \"#utility.yul\":11654:11655   */\n      0x00\n        /* \"#utility.yul\":11651:11652   */\n      dup1\n        /* \"#utility.yul\":11644:11656   */\n      revert\n        /* \"#utility.yul\":12116:12300   */\n    tag_108:\n        /* \"#utility.yul\":12174:12180   */\n      0x00\n        /* \"#utility.yul\":12227:12229   */\n      0x20\n        /* \"#utility.yul\":12215:12224   */\n      dup3\n        /* \"#utility.yul\":12206:12213   */\n      dup5\n        /* \"#utility.yul\":12202:12225   */\n      sub\n        /* \"#utility.yul\":12198:12230   */\n      slt\n        /* \"#utility.yul\":12195:12247   */\n      iszero\n      tag_533\n      jumpi\n        /* \"#utility.yul\":12243:12244   */\n      0x00\n        /* \"#utility.yul\":12240:12241   */\n      dup1\n        /* \"#utility.yul\":12233:12245   */\n      revert\n        /* \"#utility.yul\":12195:12247   */\n    tag_533:\n        /* \"#utility.yul\":12266:12294   */\n      tag_432\n        /* \"#utility.yul\":12284:12293   */\n      dup3\n        /* \"#utility.yul\":12266:12294   */\n      tag_425\n      jump\t// in\n        /* \"#utility.yul\":12723:12907   */\n    tag_427:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":12772:12773   */\n      0x00\n        /* \"#utility.yul\":12765:12853   */\n      mstore\n        /* \"#utility.yul\":12872:12876   */\n      0x11\n        /* \"#utility.yul\":12869:12870   */\n      0x04\n        /* \"#utility.yul\":12862:12877   */\n      mstore\n        /* \"#utility.yul\":12896:12900   */\n      0x24\n        /* \"#utility.yul\":12893:12894   */\n      0x00\n        /* \"#utility.yul\":12886:12901   */\n      revert\n        /* \"#utility.yul\":12912:13162   */\n    tag_113:\n        /* \"#utility.yul\":12951:12954   */\n      0x00\n      sub(shl(0xe0, 0x01), 0x01)\n        /* \"#utility.yul\":13072:13074   */\n      dup1\n        /* \"#utility.yul\":13065:13070   */\n      dup4\n        /* \"#utility.yul\":13061:13075   */\n      and\n        /* \"#utility.yul\":13099:13101   */\n      dup2\n        /* \"#utility.yul\":13090:13097   */\n      dup2\n        /* \"#utility.yul\":13087:13102   */\n      sub\n        /* \"#utility.yul\":13084:13125   */\n      tag_539\n      jumpi\n        /* \"#utility.yul\":13105:13123   */\n      tag_539\n      tag_427\n      jump\t// in\n    tag_539:\n        /* \"#utility.yul\":13154:13155   */\n      0x01\n        /* \"#utility.yul\":13141:13156   */\n      add\n      swap4\n        /* \"#utility.yul\":12912:13162   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13167:13408   */\n    tag_122:\n        /* \"#utility.yul\":13223:13229   */\n      0x00\n        /* \"#utility.yul\":13276:13278   */\n      0x20\n        /* \"#utility.yul\":13264:13273   */\n      dup3\n        /* \"#utility.yul\":13255:13262   */\n      dup5\n        /* \"#utility.yul\":13251:13274   */\n      sub\n        /* \"#utility.yul\":13247:13279   */\n      slt\n        /* \"#utility.yul\":13244:13296   */\n      iszero\n      tag_541\n      jumpi\n        /* \"#utility.yul\":13292:13293   */\n      0x00\n        /* \"#utility.yul\":13289:13290   */\n      dup1\n        /* \"#utility.yul\":13282:13294   */\n      revert\n        /* \"#utility.yul\":13244:13296   */\n    tag_541:\n        /* \"#utility.yul\":13331:13340   */\n      dup2\n        /* \"#utility.yul\":13318:13341   */\n      calldataload\n        /* \"#utility.yul\":13350:13378   */\n      tag_432\n        /* \"#utility.yul\":13372:13377   */\n      dup2\n        /* \"#utility.yul\":13350:13378   */\n      tag_426\n      jump\t// in\n        /* \"#utility.yul\":13413:13935   */\n    tag_124:\n        /* \"#utility.yul\":13491:13495   */\n      0x00\n        /* \"#utility.yul\":13497:13503   */\n      dup1\n        /* \"#utility.yul\":13557:13568   */\n      dup4\n        /* \"#utility.yul\":13544:13569   */\n      calldataload\n        /* \"#utility.yul\":13651:13653   */\n      0x1e\n        /* \"#utility.yul\":13647:13654   */\n      not\n        /* \"#utility.yul\":13636:13644   */\n      dup5\n        /* \"#utility.yul\":13620:13634   */\n      calldatasize\n        /* \"#utility.yul\":13616:13645   */\n      sub\n        /* \"#utility.yul\":13612:13655   */\n      add\n        /* \"#utility.yul\":13592:13610   */\n      dup2\n        /* \"#utility.yul\":13588:13656   */\n      slt\n        /* \"#utility.yul\":13578:13674   */\n      tag_544\n      jumpi\n        /* \"#utility.yul\":13670:13671   */\n      0x00\n        /* \"#utility.yul\":13667:13668   */\n      dup1\n        /* \"#utility.yul\":13660:13672   */\n      revert\n        /* \"#utility.yul\":13578:13674   */\n    tag_544:\n        /* \"#utility.yul\":13697:13730   */\n      dup4\n      add\n        /* \"#utility.yul\":13749:13769   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":13792:13810   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":13781:13811   */\n      dup3\n      gt\n        /* \"#utility.yul\":13778:13828   */\n      iszero\n      tag_545\n      jumpi\n        /* \"#utility.yul\":13824:13825   */\n      0x00\n        /* \"#utility.yul\":13821:13822   */\n      dup1\n        /* \"#utility.yul\":13814:13826   */\n      revert\n        /* \"#utility.yul\":13778:13828   */\n    tag_545:\n        /* \"#utility.yul\":13857:13861   */\n      0x20\n        /* \"#utility.yul\":13845:13862   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":13888:13902   */\n      calldatasize\n        /* \"#utility.yul\":13884:13911   */\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":13874:13912   */\n      dup3\n      sgt\n        /* \"#utility.yul\":13871:13929   */\n      iszero\n      tag_477\n      jumpi\n        /* \"#utility.yul\":13925:13926   */\n      0x00\n        /* \"#utility.yul\":13922:13923   */\n      dup1\n        /* \"#utility.yul\":13915:13927   */\n      revert\n        /* \"#utility.yul\":14290:14727   */\n    tag_145:\n        /* \"#utility.yul\":14369:14370   */\n      0x01\n        /* \"#utility.yul\":14365:14377   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":14412:14424   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":14433:14494   */\n      tag_549\n      jumpi\n        /* \"#utility.yul\":14487:14491   */\n      0x7f\n        /* \"#utility.yul\":14479:14485   */\n      dup3\n        /* \"#utility.yul\":14475:14492   */\n      and\n        /* \"#utility.yul\":14465:14492   */\n      swap2\n      pop\n        /* \"#utility.yul\":14433:14494   */\n    tag_549:\n        /* \"#utility.yul\":14540:14542   */\n      0x20\n        /* \"#utility.yul\":14532:14538   */\n      dup3\n        /* \"#utility.yul\":14529:14543   */\n      lt\n        /* \"#utility.yul\":14509:14527   */\n      dup2\n        /* \"#utility.yul\":14506:14544   */\n      sub\n        /* \"#utility.yul\":14503:14721   */\n      tag_438\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":14574:14575   */\n      0x00\n        /* \"#utility.yul\":14567:14655   */\n      mstore\n        /* \"#utility.yul\":14678:14682   */\n      0x22\n        /* \"#utility.yul\":14675:14676   */\n      0x04\n        /* \"#utility.yul\":14668:14683   */\n      mstore\n        /* \"#utility.yul\":14706:14710   */\n      0x24\n        /* \"#utility.yul\":14703:14704   */\n      0x00\n        /* \"#utility.yul\":14696:14711   */\n      revert\n        /* \"#utility.yul\":16556:16784   */\n    tag_217:\n        /* \"#utility.yul\":16595:16598   */\n      0x00\n        /* \"#utility.yul\":16623:16633   */\n      0xffffffff\n        /* \"#utility.yul\":16660:16662   */\n      dup1\n        /* \"#utility.yul\":16657:16658   */\n      dup4\n        /* \"#utility.yul\":16653:16663   */\n      and\n        /* \"#utility.yul\":16690:16692   */\n      dup2\n        /* \"#utility.yul\":16687:16688   */\n      dup6\n        /* \"#utility.yul\":16683:16693   */\n      and\n        /* \"#utility.yul\":16721:16724   */\n      dup1\n        /* \"#utility.yul\":16717:16719   */\n      dup4\n        /* \"#utility.yul\":16713:16725   */\n      sub\n        /* \"#utility.yul\":16708:16711   */\n      dup3\n        /* \"#utility.yul\":16705:16726   */\n      gt\n        /* \"#utility.yul\":16702:16749   */\n      iszero\n      tag_558\n      jumpi\n        /* \"#utility.yul\":16729:16747   */\n      tag_558\n      tag_427\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":16765:16778   */\n      add\n      swap5\n        /* \"#utility.yul\":16556:16784   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17533:17717   */\n    tag_232:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":17582:17583   */\n      0x00\n        /* \"#utility.yul\":17575:17663   */\n      mstore\n        /* \"#utility.yul\":17682:17686   */\n      0x32\n        /* \"#utility.yul\":17679:17680   */\n      0x04\n        /* \"#utility.yul\":17672:17687   */\n      mstore\n        /* \"#utility.yul\":17706:17710   */\n      0x24\n        /* \"#utility.yul\":17703:17704   */\n      0x00\n        /* \"#utility.yul\":17696:17711   */\n      revert\n        /* \"#utility.yul\":17722:18267   */\n    tag_237:\n        /* \"#utility.yul\":17815:17819   */\n      0x00\n        /* \"#utility.yul\":17821:17827   */\n      dup1\n        /* \"#utility.yul\":17881:17892   */\n      dup4\n        /* \"#utility.yul\":17868:17893   */\n      calldataload\n        /* \"#utility.yul\":17975:17977   */\n      0x1e\n        /* \"#utility.yul\":17971:17978   */\n      not\n        /* \"#utility.yul\":17960:17968   */\n      dup5\n        /* \"#utility.yul\":17944:17958   */\n      calldatasize\n        /* \"#utility.yul\":17940:17969   */\n      sub\n        /* \"#utility.yul\":17936:17979   */\n      add\n        /* \"#utility.yul\":17916:17934   */\n      dup2\n        /* \"#utility.yul\":17912:17980   */\n      slt\n        /* \"#utility.yul\":17902:17998   */\n      tag_563\n      jumpi\n        /* \"#utility.yul\":17994:17995   */\n      0x00\n        /* \"#utility.yul\":17991:17992   */\n      dup1\n        /* \"#utility.yul\":17984:17996   */\n      revert\n        /* \"#utility.yul\":17902:17998   */\n    tag_563:\n        /* \"#utility.yul\":18021:18054   */\n      dup4\n      add\n        /* \"#utility.yul\":18073:18093   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":18116:18134   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":18105:18135   */\n      dup3\n      gt\n        /* \"#utility.yul\":18102:18152   */\n      iszero\n      tag_564\n      jumpi\n        /* \"#utility.yul\":18148:18149   */\n      0x00\n        /* \"#utility.yul\":18145:18146   */\n      dup1\n        /* \"#utility.yul\":18138:18150   */\n      revert\n        /* \"#utility.yul\":18102:18152   */\n    tag_564:\n        /* \"#utility.yul\":18181:18185   */\n      0x20\n        /* \"#utility.yul\":18169:18186   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":18232:18233   */\n      0x05\n        /* \"#utility.yul\":18228:18242   */\n      dup2\n      swap1\n      shl\n        /* \"#utility.yul\":18212:18226   */\n      calldatasize\n        /* \"#utility.yul\":18208:18243   */\n      sub\n        /* \"#utility.yul\":18198:18244   */\n      dup3\n      sgt\n        /* \"#utility.yul\":18195:18261   */\n      iszero\n      tag_477\n      jumpi\n        /* \"#utility.yul\":18257:18258   */\n      0x00\n        /* \"#utility.yul\":18254:18255   */\n      dup1\n        /* \"#utility.yul\":18247:18259   */\n      revert\n        /* \"#utility.yul\":18272:18400   */\n    tag_243:\n        /* \"#utility.yul\":18312:18315   */\n      0x00\n        /* \"#utility.yul\":18343:18344   */\n      dup3\n        /* \"#utility.yul\":18339:18345   */\n      not\n        /* \"#utility.yul\":18336:18337   */\n      dup3\n        /* \"#utility.yul\":18333:18346   */\n      gt\n        /* \"#utility.yul\":18330:18369   */\n      iszero\n      tag_568\n      jumpi\n        /* \"#utility.yul\":18349:18367   */\n      tag_568\n      tag_427\n      jump\t// in\n    tag_568:\n      pop\n        /* \"#utility.yul\":18385:18394   */\n      add\n      swap1\n        /* \"#utility.yul\":18272:18400   */\n      jump\t// out\n        /* \"#utility.yul\":19121:19305   */\n    tag_345:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":19170:19171   */\n      0x00\n        /* \"#utility.yul\":19163:19251   */\n      mstore\n        /* \"#utility.yul\":19270:19274   */\n      0x41\n        /* \"#utility.yul\":19267:19268   */\n      0x04\n        /* \"#utility.yul\":19260:19275   */\n      mstore\n        /* \"#utility.yul\":19294:19298   */\n      0x24\n        /* \"#utility.yul\":19291:19292   */\n      0x00\n        /* \"#utility.yul\":19284:19299   */\n      revert\n        /* \"#utility.yul\":19310:20415   */\n    tag_252:\n        /* \"#utility.yul\":19405:19411   */\n      0x00\n        /* \"#utility.yul\":19436:19438   */\n      0x20\n        /* \"#utility.yul\":19479:19481   */\n      dup1\n        /* \"#utility.yul\":19467:19476   */\n      dup4\n        /* \"#utility.yul\":19458:19465   */\n      dup6\n        /* \"#utility.yul\":19454:19477   */\n      sub\n        /* \"#utility.yul\":19450:19482   */\n      slt\n        /* \"#utility.yul\":19447:19499   */\n      iszero\n      tag_573\n      jumpi\n        /* \"#utility.yul\":19495:19496   */\n      0x00\n        /* \"#utility.yul\":19492:19493   */\n      dup1\n        /* \"#utility.yul\":19485:19497   */\n      revert\n        /* \"#utility.yul\":19447:19499   */\n    tag_573:\n        /* \"#utility.yul\":19528:19537   */\n      dup3\n        /* \"#utility.yul\":19522:19538   */\n      mload\n        /* \"#utility.yul\":19557:19575   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":19598:19600   */\n      dup1\n        /* \"#utility.yul\":19590:19596   */\n      dup3\n        /* \"#utility.yul\":19587:19601   */\n      gt\n        /* \"#utility.yul\":19584:19618   */\n      iszero\n      tag_574\n      jumpi\n        /* \"#utility.yul\":19614:19615   */\n      0x00\n        /* \"#utility.yul\":19611:19612   */\n      dup1\n        /* \"#utility.yul\":19604:19616   */\n      revert\n        /* \"#utility.yul\":19584:19618   */\n    tag_574:\n        /* \"#utility.yul\":19652:19658   */\n      dup2\n        /* \"#utility.yul\":19641:19650   */\n      dup6\n        /* \"#utility.yul\":19637:19659   */\n      add\n        /* \"#utility.yul\":19627:19659   */\n      swap2\n      pop\n        /* \"#utility.yul\":19697:19704   */\n      dup6\n        /* \"#utility.yul\":19690:19694   */\n      0x1f\n        /* \"#utility.yul\":19686:19688   */\n      dup4\n        /* \"#utility.yul\":19682:19695   */\n      add\n        /* \"#utility.yul\":19678:19705   */\n      slt\n        /* \"#utility.yul\":19668:19723   */\n      tag_575\n      jumpi\n        /* \"#utility.yul\":19719:19720   */\n      0x00\n        /* \"#utility.yul\":19716:19717   */\n      dup1\n        /* \"#utility.yul\":19709:19721   */\n      revert\n        /* \"#utility.yul\":19668:19723   */\n    tag_575:\n        /* \"#utility.yul\":19748:19750   */\n      dup2\n        /* \"#utility.yul\":19742:19751   */\n      mload\n        /* \"#utility.yul\":19770:19772   */\n      dup2\n        /* \"#utility.yul\":19766:19768   */\n      dup2\n        /* \"#utility.yul\":19763:19773   */\n      gt\n        /* \"#utility.yul\":19760:19796   */\n      iszero\n      tag_577\n      jumpi\n        /* \"#utility.yul\":19776:19794   */\n      tag_577\n      tag_345\n      jump\t// in\n    tag_577:\n        /* \"#utility.yul\":19822:19824   */\n      dup1\n        /* \"#utility.yul\":19819:19820   */\n      0x05\n        /* \"#utility.yul\":19815:19825   */\n      shl\n        /* \"#utility.yul\":19854:19856   */\n      0x40\n        /* \"#utility.yul\":19848:19857   */\n      mload\n        /* \"#utility.yul\":19917:19919   */\n      0x1f\n        /* \"#utility.yul\":19913:19920   */\n      not\n        /* \"#utility.yul\":19908:19910   */\n      0x3f\n        /* \"#utility.yul\":19904:19906   */\n      dup4\n        /* \"#utility.yul\":19900:19911   */\n      add\n        /* \"#utility.yul\":19896:19921   */\n      and\n        /* \"#utility.yul\":19888:19894   */\n      dup2\n        /* \"#utility.yul\":19884:19922   */\n      add\n        /* \"#utility.yul\":19972:19978   */\n      dup2\n        /* \"#utility.yul\":19960:19970   */\n      dup2\n        /* \"#utility.yul\":19957:19979   */\n      lt\n        /* \"#utility.yul\":19952:19954   */\n      dup6\n        /* \"#utility.yul\":19940:19950   */\n      dup3\n        /* \"#utility.yul\":19937:19955   */\n      gt\n        /* \"#utility.yul\":19934:19980   */\n      or\n        /* \"#utility.yul\":19931:20003   */\n      iszero\n      tag_579\n      jumpi\n        /* \"#utility.yul\":19983:20001   */\n      tag_579\n      tag_345\n      jump\t// in\n    tag_579:\n        /* \"#utility.yul\":20019:20021   */\n      0x40\n        /* \"#utility.yul\":20012:20034   */\n      mstore\n        /* \"#utility.yul\":20069:20087   */\n      swap2\n      dup3\n      mstore\n        /* \"#utility.yul\":20103:20118   */\n      dup5\n      dup3\n      add\n      swap3\n      pop\n        /* \"#utility.yul\":20145:20156   */\n      dup4\n      dup2\n      add\n        /* \"#utility.yul\":20141:20161   */\n      dup6\n      add\n      swap2\n        /* \"#utility.yul\":20173:20192   */\n      dup9\n      dup4\n      gt\n        /* \"#utility.yul\":20170:20209   */\n      iszero\n      tag_580\n      jumpi\n        /* \"#utility.yul\":20205:20206   */\n      0x00\n        /* \"#utility.yul\":20202:20203   */\n      dup1\n        /* \"#utility.yul\":20195:20207   */\n      revert\n        /* \"#utility.yul\":20170:20209   */\n    tag_580:\n        /* \"#utility.yul\":20229:20240   */\n      swap4\n      dup6\n      add\n      swap4\n        /* \"#utility.yul\":20249:20384   */\n    tag_581:\n        /* \"#utility.yul\":20265:20271   */\n      dup3\n        /* \"#utility.yul\":20260:20263   */\n      dup6\n        /* \"#utility.yul\":20257:20272   */\n      lt\n        /* \"#utility.yul\":20249:20384   */\n      iszero\n      tag_583\n      jumpi\n        /* \"#utility.yul\":20331:20341   */\n      dup5\n      mload\n        /* \"#utility.yul\":20319:20342   */\n      dup5\n      mstore\n        /* \"#utility.yul\":20282:20294   */\n      swap4\n      dup6\n      add\n      swap4\n        /* \"#utility.yul\":20362:20374   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":20249:20384   */\n      jump(tag_581)\n    tag_583:\n        /* \"#utility.yul\":20403:20409   */\n      swap9\n        /* \"#utility.yul\":19310:20415   */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21863:22047   */\n    tag_299:\n        /* \"#utility.yul\":21933:21939   */\n      0x00\n        /* \"#utility.yul\":21986:21988   */\n      0x20\n        /* \"#utility.yul\":21974:21983   */\n      dup3\n        /* \"#utility.yul\":21965:21972   */\n      dup5\n        /* \"#utility.yul\":21961:21984   */\n      sub\n        /* \"#utility.yul\":21957:21989   */\n      slt\n        /* \"#utility.yul\":21954:22006   */\n      iszero\n      tag_589\n      jumpi\n        /* \"#utility.yul\":22002:22003   */\n      0x00\n        /* \"#utility.yul\":21999:22000   */\n      dup1\n        /* \"#utility.yul\":21992:22004   */\n      revert\n        /* \"#utility.yul\":21954:22006   */\n    tag_589:\n      pop\n        /* \"#utility.yul\":22025:22041   */\n      mload\n      swap2\n        /* \"#utility.yul\":21863:22047   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22758:23228   */\n    tag_336:\n        /* \"#utility.yul\":22937:22940   */\n      0x00\n        /* \"#utility.yul\":22975:22981   */\n      dup4\n        /* \"#utility.yul\":22969:22982   */\n      mload\n        /* \"#utility.yul\":22991:23044   */\n      tag_593\n        /* \"#utility.yul\":23037:23043   */\n      dup2\n        /* \"#utility.yul\":23032:23035   */\n      dup5\n        /* \"#utility.yul\":23025:23029   */\n      0x20\n        /* \"#utility.yul\":23017:23023   */\n      dup9\n        /* \"#utility.yul\":23013:23030   */\n      add\n        /* \"#utility.yul\":22991:23044   */\n      tag_422\n      jump\t// in\n    tag_593:\n        /* \"#utility.yul\":23107:23120   */\n      dup4\n      mload\n        /* \"#utility.yul\":23066:23082   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":23129:23186   */\n      tag_558\n        /* \"#utility.yul\":23107:23120   */\n      dup2\n        /* \"#utility.yul\":23066:23082   */\n      dup4\n        /* \"#utility.yul\":23163:23167   */\n      0x20\n        /* \"#utility.yul\":23151:23168   */\n      dup9\n      add\n        /* \"#utility.yul\":23129:23186   */\n      tag_422\n      jump\t// in\n        /* \"#utility.yul\":23233:23847   */\n    tag_341:\n        /* \"#utility.yul\":23513:23516   */\n      0x00\n        /* \"#utility.yul\":23551:23557   */\n      dup4\n        /* \"#utility.yul\":23545:23558   */\n      mload\n        /* \"#utility.yul\":23567:23620   */\n      tag_596\n        /* \"#utility.yul\":23613:23619   */\n      dup2\n        /* \"#utility.yul\":23608:23611   */\n      dup5\n        /* \"#utility.yul\":23601:23605   */\n      0x20\n        /* \"#utility.yul\":23593:23599   */\n      dup9\n        /* \"#utility.yul\":23589:23606   */\n      add\n        /* \"#utility.yul\":23567:23620   */\n      tag_422\n      jump\t// in\n    tag_596:\n        /* \"#utility.yul\":23681:23684   */\n      0x2f00000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":23642:23658   */\n      swap1\n      dup4\n      add\n        /* \"#utility.yul\":23667:23685   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":23710:23723   */\n      dup4\n      mload\n        /* \"#utility.yul\":23732:23797   */\n      tag_597\n        /* \"#utility.yul\":23710:23723   */\n      dup2\n        /* \"#utility.yul\":23784:23785   */\n      0x01\n        /* \"#utility.yul\":23773:23786   */\n      dup5\n      add\n        /* \"#utility.yul\":23766:23770   */\n      0x20\n        /* \"#utility.yul\":23754:23771   */\n      dup9\n      add\n        /* \"#utility.yul\":23732:23797   */\n      tag_422\n      jump\t// in\n    tag_597:\n        /* \"#utility.yul\":23817:23837   */\n      add\n        /* \"#utility.yul\":23839:23840   */\n      0x01\n        /* \"#utility.yul\":23813:23841   */\n      add\n      swap5\n        /* \"#utility.yul\":23233:23847   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23852:23987   */\n    tag_357:\n        /* \"#utility.yul\":23891:23894   */\n      0x00\n        /* \"#utility.yul\":23912:23929   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":23909:23952   */\n      tag_600\n      jumpi\n        /* \"#utility.yul\":23932:23950   */\n      tag_600\n      tag_427\n      jump\t// in\n    tag_600:\n      pop\n        /* \"#utility.yul\":23979:23980   */\n      0x01\n        /* \"#utility.yul\":23968:23981   */\n      add\n      swap1\n        /* \"#utility.yul\":23852:23987   */\n      jump\t// out\n        /* \"#utility.yul\":25073:25257   */\n    tag_428:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":25122:25123   */\n      0x00\n        /* \"#utility.yul\":25115:25203   */\n      mstore\n        /* \"#utility.yul\":25222:25226   */\n      0x12\n        /* \"#utility.yul\":25219:25220   */\n      0x04\n        /* \"#utility.yul\":25212:25227   */\n      mstore\n        /* \"#utility.yul\":25246:25250   */\n      0x24\n        /* \"#utility.yul\":25243:25244   */\n      0x00\n        /* \"#utility.yul\":25236:25251   */\n      revert\n        /* \"#utility.yul\":25262:25382   */\n    tag_375:\n        /* \"#utility.yul\":25302:25303   */\n      0x00\n        /* \"#utility.yul\":25328:25329   */\n      dup3\n        /* \"#utility.yul\":25318:25353   */\n      tag_607\n      jumpi\n        /* \"#utility.yul\":25333:25351   */\n      tag_607\n      tag_428\n      jump\t// in\n    tag_607:\n      pop\n        /* \"#utility.yul\":25367:25376   */\n      div\n      swap1\n        /* \"#utility.yul\":25262:25382   */\n      jump\t// out\n        /* \"#utility.yul\":25387:25512   */\n    tag_382:\n        /* \"#utility.yul\":25427:25431   */\n      0x00\n        /* \"#utility.yul\":25455:25456   */\n      dup3\n        /* \"#utility.yul\":25452:25453   */\n      dup3\n        /* \"#utility.yul\":25449:25457   */\n      lt\n        /* \"#utility.yul\":25446:25480   */\n      iszero\n      tag_610\n      jumpi\n        /* \"#utility.yul\":25460:25478   */\n      tag_610\n      tag_427\n      jump\t// in\n    tag_610:\n      pop\n        /* \"#utility.yul\":25497:25506   */\n      sub\n      swap1\n        /* \"#utility.yul\":25387:25512   */\n      jump\t// out\n        /* \"#utility.yul\":25517:25629   */\n    tag_384:\n        /* \"#utility.yul\":25549:25550   */\n      0x00\n        /* \"#utility.yul\":25575:25576   */\n      dup3\n        /* \"#utility.yul\":25565:25600   */\n      tag_613\n      jumpi\n        /* \"#utility.yul\":25580:25598   */\n      tag_613\n      tag_428\n      jump\t// in\n    tag_613:\n      pop\n        /* \"#utility.yul\":25614:25623   */\n      mod\n      swap1\n        /* \"#utility.yul\":25517:25629   */\n      jump\t// out\n\n    auxdata: 0xa264697066735822122036a9685f79261920cebda45a8dbb9bdb76ddd5b19b4fd52c3d0e88fffbcd500c64736f6c634300080e0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_748": {
									"entryPoint": null,
									"id": 748,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600160005561306e806100256000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806342f3bef411610081578063d5fdfe871161005b578063d5fdfe87146101ad578063e9dc6375146101df578063f8a6137b146101ff57600080fd5b806342f3bef41461015f578063bbf2a8c614610187578063cda085361461019a57600080fd5b80630f79ab39116100b25780630f79ab39146101175780631831a643146101375780633512da331461014c57600080fd5b806301ffc9a7146100ce578063037b79db146100f6575b600080fd5b6100e16100dc366004612724565b61021f565b60405190151581526020015b60405180910390f35b61010961010436600461278a565b6102bc565b6040519081526020016100ed565b61012a6101253660046127d8565b6108d3565b6040516100ed9190612896565b61014a610145366004612949565b610b14565b005b61014a61015a3660046129ec565b61120a565b61017261016d366004612a90565b611832565b60405163ffffffff90911681526020016100ed565b61014a610195366004612ae0565b611973565b6100e16101a8366004612b4f565b611e00565b6101096101bb366004612b8b565b6001600160a01b03166000908152600160205260409020546001600160e01b031690565b6101f26101ed3660046127d8565b611f22565b6040516100ed9190612ba6565b61021261020d366004612bb9565b612260565b6040516100ed9190612c13565b60006001600160e01b031982167f38dbd06a00000000000000000000000000000000000000000000000000000000148061028257506001600160e01b031982167fe9dc637500000000000000000000000000000000000000000000000000000000145b806102b657506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b604051630935e01b60e21b8152336004820152600090839081906001600160a01b038216906324d7806c90602401602060405180830381865afa158015610307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032b9190612c6a565b6103905760405162461bcd60e51b815260206004820152602b60248201527f57616c6c6574206973206e6f7420616e2061646d696e6973747261746f72206660448201526a1bdc8818dbdb9d1c9858dd60aa1b60648201526084015b60405180910390fd5b60006103a260a0860160808701612c87565b60038111156103b3576103b3612802565b036104265760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420696e697469616c697a65207769746820696e76616c6964207360448201527f746f726167652070726f746f636f6c00000000000000000000000000000000006064820152608401610387565b6104366080850160608601612ca8565b65ffffffffffff16158061047757506104556080850160608601612ca8565b65ffffffffffff1661046d6060860160408701612ca8565b65ffffffffffff16105b6104e95760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206861766520737461727444617465206772656174657220746860448201527f616e206f7220657175616c20746f20656e6444617465000000000000000000006064820152608401610387565b60c0840135158061050d57506105056040850160208601612cd0565b63ffffffff16155b61057f5760405162461bcd60e51b815260206004820152603160248201527f43616e6e6f742070726f7669646520626f7468206d696e747350657257616c6c60448201527f657420616e64206d65726b6c65526f6f740000000000000000000000000000006064820152608401610387565b6001600160a01b038516600090815260016020526040812080546001600160e01b0316916105ac83612d01565b82546101009290920a6001600160e01b038181021990931691831602179091556001600160a01b03871660009081526001602090815260408083205481516101208101909252928152919092169250908181019061060c90880188612cd0565b63ffffffff16815260200186602001602081019061062a9190612cd0565b63ffffffff1681526020016106456060880160408901612ca8565b65ffffffffffff1681526020016106626080880160608901612ca8565b65ffffffffffff16815260200161067f60a0880160808901612c87565b600381111561069057610690612802565b81526020016106a560c0880160a08901612d27565b1515815260c087013560208201526040016106c360e0880188612d44565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160a01b03891681526002602090815260408083206001600160e01b03871684528252918290208451815492860151938601516060870151608088015165ffffffffffff908116600160901b027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff91909216600160601b0271ffffffffffff0000000000000000000000001963ffffffff948516600160401b021671ffffffffffffffffffff0000000000000000199885166401000000000267ffffffffffffffff199098169490951693909317959095179590951691909117179182168317815560a085015190935091839160ff60c01b199091167fffffffffffffff00000000000000ffffffffffffffffffffffffffffffffffff90911617600160c01b83600381111561082e5761082e612802565b021790555060c08201518154901515600160c81b0260ff60c81b1990911617815560e08201516001820155610100820151805161087591600284019160209091019061268b565b50506040513381526001600160e01b03831691506001600160a01b038816907fcf76e1beb8dcf887c917933e1d0970eafadb9a69b82cfd5f44740a0dce6f45a69060200160405180910390a36001600160e01b031695945050505050565b610920604080516101208101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152600060208201819052604082015260609081015290565b60006001600160a01b0384166000908152600260209081526040808320868452909152902054600160c01b900460ff16600381111561096157610961612802565b036109a65760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b6001600160a01b0383166000908152600260209081526040808320858452825291829020825161012081018452815463ffffffff80821683526401000000008204811694830194909452600160401b81049093169381019390935265ffffffffffff600160601b830481166060850152600160901b83041660808401529060a083019060ff600160c01b909104166003811115610a4557610a45612802565b6003811115610a5657610a56612802565b81528154600160c81b900460ff161515602082015260018201546040820152600282018054606090920191610a8a90612d8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab690612d8b565b8015610b035780601f10610ad857610100808354040283529160200191610b03565b820191906000526020600020905b815481529060010190602001808311610ae657829003601f168201915b505050505081525050905092915050565b604051630935e01b60e21b8152336004820152839081906001600160a01b038216906324d7806c90602401602060405180830381865afa158015610b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b809190612c6a565b610be05760405162461bcd60e51b815260206004820152602b60248201527f57616c6c6574206973206e6f7420616e2061646d696e6973747261746f72206660448201526a1bdc8818dbdb9d1c9858dd60aa1b6064820152608401610387565b60006001600160a01b0386166000908152600260209081526040808320888452909152902054600160c01b900460ff166003811115610c2157610c21612802565b03610c665760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b6000610c7860a0850160808601612c87565b6003811115610c8957610c89612802565b03610cfc5760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420696e76616c69642073746f726167652070726f746f60448201527f636f6c00000000000000000000000000000000000000000000000000000000006064820152608401610387565b6001600160a01b0385166000908152600260209081526040808320878452909152902054640100000000900463ffffffff161580610d7d5750610d426020840184612cd0565b6001600160a01b038616600090815260026020908152604080832088845290915290205463ffffffff91821664010000000090910490911611155b610dc95760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420646563726561736520746f74616c4d617800000000000000006044820152606401610387565b6001600160a01b0385166000908152600260209081526040808320878452909152902054600160401b900463ffffffff161580610e4b5750610e116040840160208501612cd0565b6001600160a01b038616600090815260026020908152604080832088845290915290205463ffffffff918216600160401b90910490911611155b610e975760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742064656372656173652077616c6c65744d6178000000000000006044820152606401610387565b610ea76080840160608501612ca8565b65ffffffffffff161580610ee85750610ec66080840160608501612ca8565b65ffffffffffff16610ede6060850160408601612ca8565b65ffffffffffff16105b610f5a5760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206861766520737461727444617465206772656174657220746860448201527f616e206f7220657175616c20746f20656e6444617465000000000000000000006064820152608401610387565b60408051610120810182526001600160a01b03871660009081526002602090815283822088835281529290205463ffffffff1681529080820190610fa090860186612cd0565b63ffffffff168152602001846020016020810190610fbe9190612cd0565b63ffffffff168152602001610fd96060860160408701612ca8565b65ffffffffffff168152602001610ff66080860160608701612ca8565b65ffffffffffff16815260200161101360a0860160808701612c87565b600381111561102457611024612802565b815260200161103960c0860160a08701612d27565b1515815260c0850135602082015260400161105760e0860186612d44565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160a01b03881681526002602090815260408083208984528252918290208451815492860151938601516060870151608088015165ffffffffffff908116600160901b027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff91909216600160601b0271ffffffffffff0000000000000000000000001963ffffffff948516600160401b021671ffffffffffffffffffff0000000000000000199885166401000000000267ffffffffffffffff199098169490951693909317959095179590951691909117179182168317815560a085015190935091839160ff60c01b199091167fffffffffffffff00000000000000ffffffffffffffffffffffffffffffffffff90911617600160c01b8360038111156111b9576111b9612802565b021790555060c08201518154901515600160c81b0260ff60c81b1990911617815560e08201516001820155610100820151805161120091600284019160209091019061268b565b5050505050505050565b6001600160a01b03871660009081526002602090815260408083208984529091528120908154600160c01b900460ff16600381111561124b5761124b612802565b036112905760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8054600160601b900465ffffffffffff1615806112bd5750805442600160601b90910465ffffffffffff16105b6113095760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e206265666f726520737461727420646174650000006044820152606401610387565b8054600160901b900465ffffffffffff1615806113375750805442600160901b90910465ffffffffffff1610155b6113835760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20616674657220656e6420646174650000000000006044820152606401610387565b8054640100000000900463ffffffff1615806113c55750805463ffffffff64010000000082048116916113bc9161ffff8a169116612dbf565b63ffffffff1611155b6114375760405162461bcd60e51b815260206004820152602160248201527f546f6f206d616e792072657175657374656420666f72207468697320636c616960448201527f6d000000000000000000000000000000000000000000000000000000000000006064820152608401610387565b805460009061144d9063ffffffff166001612dbf565b825463ffffffff19811661ffff8a1663ffffffff9283160182161784556001840154911691501561158e5761ffff87168514801561148e575061ffff871683145b6114da5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e707574000000000000000000000000000000000000006044820152606401610387565b60005b8761ffff168110156115885760008787838181106114fd576114fd612de7565b90506020020160208101906115129190612cd0565b9050600086868481811061152857611528612de7565b905060200281019061153a9190612dfd565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092935061157e92508791508e90508d858561231b565b50506001016114dd565b50611698565b8154600160401b900463ffffffff16156116985781546001600160a01b038a1660009081526003602090815260408083208c84528252808320338452909152902054600160401b90910463ffffffff16906115ee9061ffff8a1690612e47565b11156116625760405162461bcd60e51b815260206004820152602260248201527f546f6f206d616e792072657175657374656420666f7220746869732077616c6c60448201527f65740000000000000000000000000000000000000000000000000000000000006064820152608401610387565b6001600160a01b03891660009081526003602090815260408083208b845282528083203384529091529020805461ffff89160190555b6040517fe00aab4b00000000000000000000000000000000000000000000000000000000815233600482015261ffff881660248201526000906001600160a01b038b169063e00aab4b906044016000604051808303816000875af1158015611704573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261172c9190810190612e75565b905060005b8861ffff168110156117e15760405180604001604052808b6001600160e01b0316815260200182856117639190612e47565b63ffffffff1690526001600160a01b038c166000908152600560205260408120845190919085908590811061179a5761179a612de7565b6020908102919091018101518252818101929092526040016000208251929091015163ffffffff16600160e01b026001600160e01b03909216919091179055600101611731565b5060405161ffff8916815289906001600160a01b038c16907f74f5d3254dfa39a7b1217a27d5d9b3e061eafe11720eca1cf499da2dc1eb12599060200160405180910390a350505050505050505050565b6001600160a01b03821660009081526002602090815260408083208484529091528120818154600160c01b900460ff16600381111561187357611873612802565b036118b85760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8054600160401b900463ffffffff1660000361193c5760405162461bcd60e51b815260206004820152603660248201527f43616e206f6e6c7920726574726965766520666f72206e6f6e2d6d65726b6c6560448201527f20636c61696d7320776974682077616c6c65744d6178000000000000000000006064820152608401610387565b50506001600160a01b0380831660009081526003602090815260408083208584528252808320938716835292905220549392505050565b6001600160a01b03851660009081526002602090815260408083208784529091528120908154600160c01b900460ff1660038111156119b4576119b4612802565b036119f95760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8054600160601b900465ffffffffffff161580611a265750805442600160601b90910465ffffffffffff16105b611a725760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e206265666f726520737461727420646174650000006044820152606401610387565b8054600160901b900465ffffffffffff161580611aa05750805442600160901b90910465ffffffffffff1610155b611aec5760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20616674657220656e6420646174650000000000006044820152606401610387565b8054640100000000900463ffffffff161580611b185750805463ffffffff640100000000820481169116105b611b8a5760405162461bcd60e51b815260206004820152602c60248201527f4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f60448201527f72207468697320636c61696d00000000000000000000000000000000000000006064820152608401610387565b600181015415611bd957611bd48187878787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061231b92505050565b611ccf565b8054600160401b900463ffffffff1615611ccf5780546001600160a01b03871660009081526003602090815260408083208984528252808320338452909152902054600160401b90910463ffffffff1611611c9c5760405162461bcd60e51b815260206004820152602d60248201527f4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f60448201527f7220746869732077616c6c6574000000000000000000000000000000000000006064820152608401610387565b6001600160a01b038616600090815260036020908152604080832088845282528083203384529091529020805460010190555b805463ffffffff8082166001011663ffffffff199091161781556040517f2928ca580000000000000000000000000000000000000000000000000000000081523360048201526000906001600160a01b03881690632928ca58906024016020604051808303816000875af1158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6f9190612f33565b6040805180820182526001600160e01b03808a168252855463ffffffff90811660208085019182526001600160a01b038e1660008181526005835287812089825290925286822095519251909316600160e01b0291909316179092559151929350889290917f5d404f369772cfab2b65717fca9bc2077efeab89a0dbec036bf0c13783154eb191a350505050505050565b6001600160a01b03831660009081526002602090815260408083208584529091528120818154600160c01b900460ff166003811115611e4157611e41612802565b03611e865760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8060010154600003611eda5760405162461bcd60e51b815260206004820152601c60248201527f43616e206f6e6c7920636865636b206d65726b6c6520636c61696d73000000006044820152606401610387565b50506001600160a01b0383166000908152600460209081526040808320858452825280832062ffffff600886901c168452909152902054600160ff83161b1615159392505050565b6001600160a01b03821660009081526005602090815260408083208484528252918290208251808401909352546001600160e01b038116808452600160e01b90910463ffffffff169183019190915260609190611fc15760405162461bcd60e51b815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610387565b6001600160a01b038416600090815260026020908152604080832084516001600160e01b031684528252808320815161012081018352815463ffffffff80821683526401000000008204811695830195909552600160401b81049094169281019290925265ffffffffffff600160601b840481166060840152600160901b8404166080830152909160a083019060ff600160c01b90910416600381111561206a5761206a612802565b600381111561207b5761207b612802565b81528154600160c81b900460ff1615156020820152600182015460408201526002820180546060909201916120af90612d8b565b80601f01602080910402602001604051908101604052809291908181526020018280546120db90612d8b565b80156121285780601f106120fd57610100808354040283529160200191612128565b820191906000526020600020905b81548152906001019060200180831161210b57829003601f168201915b505050919092525050604080516020810190915260008152919250600290508260a00151600381111561215d5761215d612802565b0361219c575060408051808201909152601481527f68747470733a2f2f617277656176652e6e65742f00000000000000000000000060208201526121ef565b60038260a0015160038111156121b4576121b4612802565b036121ef575060408051808201909152600781527f697066733a2f2f0000000000000000000000000000000000000000000000000060208201525b610100820151604051612206918391602001612f4c565b60405160208183030381529060405293508160c001516122575783612234846020015163ffffffff1661248c565b604051602001612245929190612f72565b60405160208183030381529060405293505b50505092915050565b60608167ffffffffffffffff81111561227b5761227b612e5f565b6040519080825280602002602001820160405280156122a4578160200160208202803683370190505b50905060005b82811015612312576122de86868686858181106122c9576122c9612de7565b90506020020160208101906101a89190612cd0565b8282815181106122f0576122f0612de7565b911515602092830291909101909101528061230a81612fca565b9150506122aa565b50949350505050565b6040516bffffffffffffffffffffffff193360601b1660208201526001600160e01b031960e084901b166034820152600090603801604051602081830303815290604052805190602001209050612377828760010154836125c9565b6123c35760405162461bcd60e51b815260206004820152601d60248201527f436f756c64206e6f7420766572696679206d65726b6c652070726f6f660000006044820152606401610387565b6001600160a01b0385166000908152600460209081526040808320878452825280832062ffffff600888901c16808552925290912054600160ff86161b808216156124505760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206d696e7465640000000000000000000000000000000000006044820152606401610387565b6001600160a01b039097166000908152600460209081526040808320988352978152878220938252929092529490209390941790925550505050565b6060816000036124cf57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156124f957806124e381612fca565b91506124f29050600a83612ff9565b91506124d3565b60008167ffffffffffffffff81111561251457612514612e5f565b6040519080825280601f01601f19166020018201604052801561253e576020820181803683370190505b5090505b84156125c15761255360018361300d565b9150612560600a86613024565b61256b906030612e47565b60f81b81838151811061258057612580612de7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506125ba600a86612ff9565b9450612542565b949350505050565b6000826125d685846125df565b14949350505050565b600081815b845181101561268357600085828151811061260157612601612de7565b60200260200101519050808311612643576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612670565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061267b81612fca565b9150506125e4565b509392505050565b82805461269790612d8b565b90600052602060002090601f0160209004810192826126b957600085556126ff565b82601f106126d257805160ff19168380011785556126ff565b828001600101855582156126ff579182015b828111156126ff5782518255916020019190600101906126e4565b5061270b92915061270f565b5090565b5b8082111561270b5760008155600101612710565b60006020828403121561273657600080fd5b81356001600160e01b03198116811461274e57600080fd5b9392505050565b80356001600160a01b038116811461276c57600080fd5b919050565b6000610100828403121561278457600080fd5b50919050565b6000806040838503121561279d57600080fd5b6127a683612755565b9150602083013567ffffffffffffffff8111156127c257600080fd5b6127ce85828601612771565b9150509250929050565b600080604083850312156127eb57600080fd5b6127f483612755565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6004811061283657634e487b7160e01b600052602160045260246000fd5b9052565b60005b8381101561285557818101518382015260200161283d565b83811115612864576000848401525b50505050565b6000815180845261288281602086016020860161283a565b601f01601f19169290920160200192915050565b602081526128ad60208201835163ffffffff169052565b600060208301516128c6604084018263ffffffff169052565b50604083015163ffffffff8116606084015250606083015165ffffffffffff8116608084015250608083015165ffffffffffff811660a08401525060a083015161291360c0840182612818565b5060c083015180151560e08401525060e083015161010083810191909152830151610120808401526125c161014084018261286a565b60008060006060848603121561295e57600080fd5b61296784612755565b925060208401359150604084013567ffffffffffffffff81111561298a57600080fd5b61299686828701612771565b9150509250925092565b60008083601f8401126129b257600080fd5b50813567ffffffffffffffff8111156129ca57600080fd5b6020830191508360208260051b85010111156129e557600080fd5b9250929050565b600080600080600080600060a0888a031215612a0757600080fd5b612a1088612755565b965060208801359550604088013561ffff81168114612a2e57600080fd5b9450606088013567ffffffffffffffff80821115612a4b57600080fd5b612a578b838c016129a0565b909650945060808a0135915080821115612a7057600080fd5b50612a7d8a828b016129a0565b989b979a50959850939692959293505050565b600080600060608486031215612aa557600080fd5b612aae84612755565b9250612abc60208501612755565b9150604084013590509250925092565b803563ffffffff8116811461276c57600080fd5b600080600080600060808688031215612af857600080fd5b612b0186612755565b945060208601359350612b1660408701612acc565b9250606086013567ffffffffffffffff811115612b3257600080fd5b612b3e888289016129a0565b969995985093965092949392505050565b600080600060608486031215612b6457600080fd5b612b6d84612755565b925060208401359150612b8260408501612acc565b90509250925092565b600060208284031215612b9d57600080fd5b61274e82612755565b60208152600061274e602083018461286a565b60008060008060608587031215612bcf57600080fd5b612bd885612755565b935060208501359250604085013567ffffffffffffffff811115612bfb57600080fd5b612c07878288016129a0565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015612c4d578351151583529284019291840191600101612c2f565b50909695505050505050565b8015158114612c6757600080fd5b50565b600060208284031215612c7c57600080fd5b815161274e81612c59565b600060208284031215612c9957600080fd5b81356004811061274e57600080fd5b600060208284031215612cba57600080fd5b813565ffffffffffff8116811461274e57600080fd5b600060208284031215612ce257600080fd5b61274e82612acc565b634e487b7160e01b600052601160045260246000fd5b60006001600160e01b03808316818103612d1d57612d1d612ceb565b6001019392505050565b600060208284031215612d3957600080fd5b813561274e81612c59565b6000808335601e19843603018112612d5b57600080fd5b83018035915067ffffffffffffffff821115612d7657600080fd5b6020019150368190038213156129e557600080fd5b600181811c90821680612d9f57607f821691505b60208210810361278457634e487b7160e01b600052602260045260246000fd5b600063ffffffff808316818516808303821115612dde57612dde612ceb565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612e1457600080fd5b83018035915067ffffffffffffffff821115612e2f57600080fd5b6020019150600581901b36038213156129e557600080fd5b60008219821115612e5a57612e5a612ceb565b500190565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612e8857600080fd5b825167ffffffffffffffff80821115612ea057600080fd5b818501915085601f830112612eb457600080fd5b815181811115612ec657612ec6612e5f565b8060051b604051601f19603f83011681018181108582111715612eeb57612eeb612e5f565b604052918252848201925083810185019188831115612f0957600080fd5b938501935b82851015612f2757845184529385019392850192612f0e565b98975050505050505050565b600060208284031215612f4557600080fd5b5051919050565b60008351612f5e81846020880161283a565b835190830190612dde81836020880161283a565b60008351612f8481846020880161283a565b7f2f000000000000000000000000000000000000000000000000000000000000009083019081528351612fbe81600184016020880161283a565b01600101949350505050565b600060018201612fdc57612fdc612ceb565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261300857613008612fe3565b500490565b60008282101561301f5761301f612ceb565b500390565b60008261303357613033612fe3565b50069056fea264697066735822122036a9685f79261920cebda45a8dbb9bdb76ddd5b19b4fd52c3d0e88fffbcd500c64736f6c634300080e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x306E DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42F3BEF4 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xD5FDFE87 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xD5FDFE87 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xE9DC6375 EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0xF8A6137B EQ PUSH2 0x1FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42F3BEF4 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xBBF2A8C6 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xCDA08536 EQ PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF79AB39 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xF79AB39 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x1831A643 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x3512DA33 EQ PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x37B79DB EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0x2724 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x109 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x278A JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D8 JUMP JUMPDEST PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x2896 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0x2949 JUMP JUMPDEST PUSH2 0xB14 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14A PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0x29EC JUMP JUMPDEST PUSH2 0x120A JUMP JUMPDEST PUSH2 0x172 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x2A90 JUMP JUMPDEST PUSH2 0x1832 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST PUSH2 0x14A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AE0 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B4F JUMP JUMPDEST PUSH2 0x1E00 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2B8B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x27D8 JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x2BA6 JUMP JUMPDEST PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x2BB9 JUMP JUMPDEST PUSH2 0x2260 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x2C13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x38DBD06A00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x282 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xE9DC637500000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x2B6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x935E01B PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x24D7806C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x307 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32B SWAP2 SWAP1 PUSH2 0x2C6A JUMP JUMPDEST PUSH2 0x390 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57616C6C6574206973206E6F7420616E2061646D696E6973747261746F722066 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1BDC8818DBDB9D1C9858DD PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A2 PUSH1 0xA0 DUP7 ADD PUSH1 0x80 DUP8 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3B3 JUMPI PUSH2 0x3B3 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420696E697469616C697A65207769746820696E76616C69642073 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x746F726167652070726F746F636F6C0000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH2 0x436 PUSH1 0x80 DUP6 ADD PUSH1 0x60 DUP7 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x477 JUMPI POP PUSH2 0x455 PUSH1 0x80 DUP6 ADD PUSH1 0x60 DUP7 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x46D PUSH1 0x60 DUP7 ADD PUSH1 0x40 DUP8 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0x4E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742068617665207374617274446174652067726561746572207468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616E206F7220657175616C20746F20656E644461746500000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD CALLDATALOAD ISZERO DUP1 PUSH2 0x50D JUMPI POP PUSH2 0x505 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND ISZERO JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742070726F7669646520626F7468206D696E747350657257616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x657420616E64206D65726B6C65526F6F74000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP2 PUSH2 0x5AC DUP4 PUSH2 0x2D01 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP3 DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND SWAP3 POP SWAP1 DUP2 DUP2 ADD SWAP1 PUSH2 0x60C SWAP1 DUP9 ADD DUP9 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x62A SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x645 PUSH1 0x60 DUP9 ADD PUSH1 0x40 DUP10 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x662 PUSH1 0x80 DUP9 ADD PUSH1 0x60 DUP10 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x67F PUSH1 0xA0 DUP9 ADD PUSH1 0x80 DUP10 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x690 JUMPI PUSH2 0x690 PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6A5 PUSH1 0xC0 DUP9 ADD PUSH1 0xA0 DUP10 ADD PUSH2 0x2D27 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0xC0 DUP8 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x6C3 PUSH1 0xE0 DUP9 ADD DUP9 PUSH2 0x2D44 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP8 AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP4 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x90 SHL MUL PUSH32 0xFFFFFFFFFFFFFFFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH18 0xFFFFFFFFFFFF000000000000000000000000 NOT PUSH4 0xFFFFFFFF SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x40 SHL MUL AND PUSH18 0xFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT SWAP9 DUP6 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP9 AND SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 OR SWAP6 SWAP1 SWAP6 OR SWAP6 SWAP1 SWAP6 AND SWAP2 SWAP1 SWAP2 OR OR SWAP2 DUP3 AND DUP4 OR DUP2 SSTORE PUSH1 0xA0 DUP6 ADD MLOAD SWAP1 SWAP4 POP SWAP2 DUP4 SWAP2 PUSH1 0xFF PUSH1 0xC0 SHL NOT SWAP1 SWAP2 AND PUSH32 0xFFFFFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR PUSH1 0x1 PUSH1 0xC0 SHL DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x82E JUMPI PUSH2 0x82E PUSH2 0x2802 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 SLOAD SWAP1 ISZERO ISZERO PUSH1 0x1 PUSH1 0xC8 SHL MUL PUSH1 0xFF PUSH1 0xC8 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP1 MLOAD PUSH2 0x875 SWAP2 PUSH1 0x2 DUP5 ADD SWAP2 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x268B JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH32 0xCF76E1BEB8DCF887C917933E1D0970EAFADB9A69B82CFD5F44740A0DCE6F45A6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x920 PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0xA0 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x961 JUMPI PUSH2 0x961 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x9A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x120 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV SWAP1 SWAP4 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x60 SHL DUP4 DIV DUP2 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x90 SHL DUP4 DIV AND PUSH1 0x80 DUP5 ADD MSTORE SWAP1 PUSH1 0xA0 DUP4 ADD SWAP1 PUSH1 0xFF PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xA45 JUMPI PUSH2 0xA45 PUSH2 0x2802 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xA56 JUMPI PUSH2 0xA56 PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0xC8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xA8A SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAB6 SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB03 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAD8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB03 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAE6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x935E01B PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x24D7806C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB80 SWAP2 SWAP1 PUSH2 0x2C6A JUMP JUMPDEST PUSH2 0xBE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57616C6C6574206973206E6F7420616E2061646D696E6973747261746F722066 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1BDC8818DBDB9D1C9858DD PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC21 JUMPI PUSH2 0xC21 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0xC66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC78 PUSH1 0xA0 DUP6 ADD PUSH1 0x80 DUP7 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC89 JUMPI PUSH2 0xC89 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0xCFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742073657420696E76616C69642073746F726167652070726F746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636F6C0000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0xD7D JUMPI POP PUSH2 0xD42 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP2 DUP3 AND PUSH5 0x100000000 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND GT ISZERO JUMPDEST PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420646563726561736520746F74616C4D61780000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0xE4B JUMPI POP PUSH2 0xE11 PUSH1 0x40 DUP5 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV SWAP1 SWAP2 AND GT ISZERO JUMPDEST PUSH2 0xE97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742064656372656173652077616C6C65744D617800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH2 0xEA7 PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0xEE8 JUMPI POP PUSH2 0xEC6 PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0xEDE PUSH1 0x60 DUP6 ADD PUSH1 0x40 DUP7 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0xF5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742068617665207374617274446174652067726561746572207468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616E206F7220657175616C20746F20656E644461746500000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP9 DUP4 MSTORE DUP2 MSTORE SWAP3 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE SWAP1 DUP1 DUP3 ADD SWAP1 PUSH2 0xFA0 SWAP1 DUP7 ADD DUP7 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFBE SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD9 PUSH1 0x60 DUP7 ADD PUSH1 0x40 DUP8 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF6 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0xA0 DUP7 ADD PUSH1 0x80 DUP8 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1024 JUMPI PUSH2 0x1024 PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1039 PUSH1 0xC0 DUP7 ADD PUSH1 0xA0 DUP8 ADD PUSH2 0x2D27 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0xC0 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x1057 PUSH1 0xE0 DUP7 ADD DUP7 PUSH2 0x2D44 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP4 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x90 SHL MUL PUSH32 0xFFFFFFFFFFFFFFFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH18 0xFFFFFFFFFFFF000000000000000000000000 NOT PUSH4 0xFFFFFFFF SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x40 SHL MUL AND PUSH18 0xFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT SWAP9 DUP6 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP9 AND SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 OR SWAP6 SWAP1 SWAP6 OR SWAP6 SWAP1 SWAP6 AND SWAP2 SWAP1 SWAP2 OR OR SWAP2 DUP3 AND DUP4 OR DUP2 SSTORE PUSH1 0xA0 DUP6 ADD MLOAD SWAP1 SWAP4 POP SWAP2 DUP4 SWAP2 PUSH1 0xFF PUSH1 0xC0 SHL NOT SWAP1 SWAP2 AND PUSH32 0xFFFFFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR PUSH1 0x1 PUSH1 0xC0 SHL DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11B9 PUSH2 0x2802 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 SLOAD SWAP1 ISZERO ISZERO PUSH1 0x1 PUSH1 0xC8 SHL MUL PUSH1 0xFF PUSH1 0xC8 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP1 MLOAD PUSH2 0x1200 SWAP2 PUSH1 0x2 DUP5 ADD SWAP2 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x268B JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x124B JUMPI PUSH2 0x124B PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x1290 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x12BD JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0x1309 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E206265666F72652073746172742064617465000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x90 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x1337 JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x90 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT ISZERO JUMPDEST PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E20616674657220656E642064617465000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0x13C5 JUMPI POP DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 PUSH2 0x13BC SWAP2 PUSH2 0xFFFF DUP11 AND SWAP2 AND PUSH2 0x2DBF JUMP JUMPDEST PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST PUSH2 0x1437 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6F206D616E792072657175657374656420666F72207468697320636C6169 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x144D SWAP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 PUSH2 0x2DBF JUMP JUMPDEST DUP3 SLOAD PUSH4 0xFFFFFFFF NOT DUP2 AND PUSH2 0xFFFF DUP11 AND PUSH4 0xFFFFFFFF SWAP3 DUP4 AND ADD DUP3 AND OR DUP5 SSTORE PUSH1 0x1 DUP5 ADD SLOAD SWAP2 AND SWAP2 POP ISZERO PUSH2 0x158E JUMPI PUSH2 0xFFFF DUP8 AND DUP6 EQ DUP1 ISZERO PUSH2 0x148E JUMPI POP PUSH2 0xFFFF DUP8 AND DUP4 EQ JUMPDEST PUSH2 0x14DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420696E70757400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 PUSH2 0xFFFF AND DUP2 LT ISZERO PUSH2 0x1588 JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x14FD JUMPI PUSH2 0x14FD PUSH2 0x2DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1512 SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1528 JUMPI PUSH2 0x1528 PUSH2 0x2DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x153A SWAP2 SWAP1 PUSH2 0x2DFD JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 POP PUSH2 0x157E SWAP3 POP DUP8 SWAP2 POP DUP15 SWAP1 POP DUP14 DUP6 DUP6 PUSH2 0x231B JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x14DD JUMP JUMPDEST POP PUSH2 0x1698 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x1698 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP13 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP1 PUSH2 0x15EE SWAP1 PUSH2 0xFFFF DUP11 AND SWAP1 PUSH2 0x2E47 JUMP JUMPDEST GT ISZERO PUSH2 0x1662 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6F206D616E792072657175657374656420666F7220746869732077616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6574000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF DUP10 AND ADD SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE00AAB4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0xFFFF DUP9 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND SWAP1 PUSH4 0xE00AAB4B SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x172C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2E75 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP9 PUSH2 0xFFFF AND DUP2 LT ISZERO PUSH2 0x17E1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP6 PUSH2 0x1763 SWAP2 SWAP1 PUSH2 0x2E47 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP5 MLOAD SWAP1 SWAP2 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x179A JUMPI PUSH2 0x179A PUSH2 0x2DE7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x1731 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xFFFF DUP10 AND DUP2 MSTORE DUP10 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP1 PUSH32 0x74F5D3254DFA39A7B1217A27D5D9B3E061EAFE11720ECA1CF499DA2DC1EB1259 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1873 JUMPI PUSH2 0x1873 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x18B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x0 SUB PUSH2 0x193C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920726574726965766520666F72206E6F6E2D6D65726B6C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20636C61696D7320776974682077616C6C65744D617800000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x19B4 JUMPI PUSH2 0x19B4 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x19F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x1A26 JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0x1A72 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E206265666F72652073746172742064617465000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x90 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x1AA0 JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x90 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT ISZERO JUMPDEST PUSH2 0x1AEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E20616674657220656E642064617465000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0x1B18 JUMPI POP DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 AND LT JUMPDEST PUSH2 0x1B8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6178696D756D20746F6B656E7320616C7265616479206D696E74656420666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207468697320636C61696D0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD ISZERO PUSH2 0x1BD9 JUMPI PUSH2 0x1BD4 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x231B SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1CCF JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x1CCF JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND GT PUSH2 0x1C9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6178696D756D20746F6B656E7320616C7265616479206D696E74656420666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7220746869732077616C6C657400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST DUP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x1 ADD AND PUSH4 0xFFFFFFFF NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2928CA5800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x2928CA58 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D4B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D6F SWAP2 SWAP1 PUSH2 0x2F33 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP11 AND DUP3 MSTORE DUP6 SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 DUP4 MSTORE DUP8 DUP2 KECCAK256 DUP10 DUP3 MSTORE SWAP1 SWAP3 MSTORE DUP7 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP3 SWAP4 POP DUP9 SWAP3 SWAP1 SWAP2 PUSH32 0x5D404F369772CFAB2B65717FCA9BC2077EFEAB89A0DBEC036BF0C13783154EB1 SWAP2 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1E41 JUMPI PUSH2 0x1E41 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x1E86 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD PUSH1 0x0 SUB PUSH2 0x1EDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920636865636B206D65726B6C6520636C61696D7300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH3 0xFFFFFF PUSH1 0x8 DUP7 SWAP1 SHR AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xFF DUP4 AND SHL AND ISZERO ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1FC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20646F6573206E6F74206578697374000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH2 0x120 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV SWAP1 SWAP5 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x60 SHL DUP5 DIV DUP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x90 SHL DUP5 DIV AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0xA0 DUP4 ADD SWAP1 PUSH1 0xFF PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x206A JUMPI PUSH2 0x206A PUSH2 0x2802 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x207B JUMPI PUSH2 0x207B PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0xC8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x20AF SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x20DB SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2128 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x20FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2128 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x210B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x2 SWAP1 POP DUP3 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x215D JUMPI PUSH2 0x215D PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x219C JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x68747470733A2F2F617277656176652E6E65742F000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x21EF JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x21B4 JUMPI PUSH2 0x21B4 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x21EF JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH32 0x697066733A2F2F00000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2206 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0x2F4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH2 0x2257 JUMPI DUP4 PUSH2 0x2234 DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x248C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2245 SWAP3 SWAP2 SWAP1 PUSH2 0x2F72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x227B JUMPI PUSH2 0x227B PUSH2 0x2E5F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22A4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2312 JUMPI PUSH2 0x22DE DUP7 DUP7 DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x22C9 JUMPI PUSH2 0x22C9 PUSH2 0x2DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x22F0 JUMPI PUSH2 0x22F0 PUSH2 0x2DE7 JUMP JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 PUSH2 0x230A DUP2 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x22AA JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x38 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x2377 DUP3 DUP8 PUSH1 0x1 ADD SLOAD DUP4 PUSH2 0x25C9 JUMP JUMPDEST PUSH2 0x23C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F756C64206E6F7420766572696679206D65726B6C652070726F6F66000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH3 0xFFFFFF PUSH1 0x8 DUP9 SWAP1 SHR AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xFF DUP7 AND SHL DUP1 DUP3 AND ISZERO PUSH2 0x2450 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C7265616479206D696E746564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP9 DUP4 MSTORE SWAP8 DUP2 MSTORE DUP8 DUP3 KECCAK256 SWAP4 DUP3 MSTORE SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP5 OR SWAP1 SWAP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0x24CF JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x24F9 JUMPI DUP1 PUSH2 0x24E3 DUP2 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP PUSH2 0x24F2 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x2FF9 JUMP JUMPDEST SWAP2 POP PUSH2 0x24D3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2514 JUMPI PUSH2 0x2514 PUSH2 0x2E5F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x253E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x25C1 JUMPI PUSH2 0x2553 PUSH1 0x1 DUP4 PUSH2 0x300D JUMP JUMPDEST SWAP2 POP PUSH2 0x2560 PUSH1 0xA DUP7 PUSH2 0x3024 JUMP JUMPDEST PUSH2 0x256B SWAP1 PUSH1 0x30 PUSH2 0x2E47 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2580 JUMPI PUSH2 0x2580 PUSH2 0x2DE7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x25BA PUSH1 0xA DUP7 PUSH2 0x2FF9 JUMP JUMPDEST SWAP5 POP PUSH2 0x2542 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x25D6 DUP6 DUP5 PUSH2 0x25DF JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2683 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2601 JUMPI PUSH2 0x2601 PUSH2 0x2DE7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x2643 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x2670 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x267B DUP2 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25E4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2697 SWAP1 PUSH2 0x2D8B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x26B9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x26FF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x26D2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x26FF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x26FF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x26FF JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x26E4 JUMP JUMPDEST POP PUSH2 0x270B SWAP3 SWAP2 POP PUSH2 0x270F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x270B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2736 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x276C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x279D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27A6 DUP4 PUSH2 0x2755 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27CE DUP6 DUP3 DUP7 ADD PUSH2 0x2771 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27F4 DUP4 PUSH2 0x2755 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x2836 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2855 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x283D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2864 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2882 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x283A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x28AD PUSH1 0x20 DUP3 ADD DUP4 MLOAD PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x28C6 PUSH1 0x40 DUP5 ADD DUP3 PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x60 DUP4 ADD MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x2913 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2818 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD DUP1 ISZERO ISZERO PUSH1 0xE0 DUP5 ADD MSTORE POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 ADD MLOAD PUSH2 0x120 DUP1 DUP5 ADD MSTORE PUSH2 0x25C1 PUSH2 0x140 DUP5 ADD DUP3 PUSH2 0x286A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x295E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2967 DUP5 PUSH2 0x2755 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x298A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2996 DUP7 DUP3 DUP8 ADD PUSH2 0x2771 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x29B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x29E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2A07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A10 DUP9 PUSH2 0x2755 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x2A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2A4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A57 DUP12 DUP4 DUP13 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2A70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A7D DUP11 DUP3 DUP12 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AAE DUP5 PUSH2 0x2755 JUMP JUMPDEST SWAP3 POP PUSH2 0x2ABC PUSH1 0x20 DUP6 ADD PUSH2 0x2755 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x276C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2AF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B01 DUP7 PUSH2 0x2755 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2B16 PUSH1 0x40 DUP8 ADD PUSH2 0x2ACC JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B3E DUP9 DUP3 DUP10 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B6D DUP5 PUSH2 0x2755 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x2B82 PUSH1 0x40 DUP6 ADD PUSH2 0x2ACC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x274E DUP3 PUSH2 0x2755 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x274E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x286A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2BCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BD8 DUP6 PUSH2 0x2755 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C07 DUP8 DUP3 DUP9 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2C4D JUMPI DUP4 MLOAD ISZERO ISZERO DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2C2F JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2C67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x274E DUP2 PUSH2 0x2C59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x274E DUP3 PUSH2 0x2ACC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x2D1D JUMPI PUSH2 0x2D1D PUSH2 0x2CEB JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x274E DUP2 PUSH2 0x2C59 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x29E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2D9F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2784 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x2DDE JUMPI PUSH2 0x2DDE PUSH2 0x2CEB JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2E14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2E2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x29E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2E5A JUMPI PUSH2 0x2E5A PUSH2 0x2CEB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2EA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2EB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2EC6 JUMPI PUSH2 0x2EC6 PUSH2 0x2E5F JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2EEB JUMPI PUSH2 0x2EEB PUSH2 0x2E5F JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x2F09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x2F27 JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x2F0E JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2F5E DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2DDE DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2F84 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST PUSH32 0x2F00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP4 MLOAD PUSH2 0x2FBE DUP2 PUSH1 0x1 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST ADD PUSH1 0x1 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2FDC JUMPI PUSH2 0x2FDC PUSH2 0x2CEB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3008 JUMPI PUSH2 0x3008 PUSH2 0x2FE3 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x301F JUMPI PUSH2 0x301F PUSH2 0x2CEB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3033 JUMPI PUSH2 0x3033 PUSH2 0x2FE3 JUMP JUMPDEST POP MOD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xA9 PUSH9 0x5F79261920CEBDA45A DUP14 0xBB SWAP12 0xDB PUSH23 0xDDD5B19B4FD52C3D0E88FFFBCD500C64736F6C63430008 0xE STOP CALLER ",
							"sourceMap": "703:13886:14:-:0;;;;;;;;;;;;-1:-1:-1;1701:1:7;1806:7;:22;703:13886:14;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_checkMerkleAndUpdate_2767": {
									"entryPoint": 8987,
									"id": 2767,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"@checkMintIndex_2183": {
									"entryPoint": 7680,
									"id": 2183,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@checkMintIndices_2233": {
									"entryPoint": 8800,
									"id": 2233,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@getClaimCount_2080": {
									"entryPoint": null,
									"id": 2080,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getClaim_2112": {
									"entryPoint": 2259,
									"id": 2112,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getTotalMints_2284": {
									"entryPoint": 6194,
									"id": 2284,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@initializeClaim_1939": {
									"entryPoint": 700,
									"id": 1939,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@mintBatch_2682": {
									"entryPoint": 4618,
									"id": 2682,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@mint_2442": {
									"entryPoint": 6515,
									"id": 2442,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"@processProof_1081": {
									"entryPoint": 9695,
									"id": 1081,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@supportsInterface_1818": {
									"entryPoint": 543,
									"id": 1818,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toString_876": {
									"entryPoint": 9356,
									"id": 876,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_2867": {
									"entryPoint": 7970,
									"id": 2867,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@updateClaim_2066": {
									"entryPoint": 2836,
									"id": 2066,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@verify_1018": {
									"entryPoint": 9673,
									"id": 1018,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 10069,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_array_uint32_dyn_calldata": {
									"entryPoint": 10656,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_struct_ClaimParameters_calldata": {
									"entryPoint": 10097,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 11147,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 10896,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_struct$_ClaimParameters_$2894_calldata_ptr": {
									"entryPoint": 10122,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 10200,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256t_array$_t_uint32_$dyn_calldata_ptr": {
									"entryPoint": 11193,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_uint256t_struct$_ClaimParameters_$2894_calldata_ptr": {
									"entryPoint": 10569,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256t_uint16t_array$_t_uint32_$dyn_calldata_ptrt_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr": {
									"entryPoint": 10732,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256t_uint32": {
									"entryPoint": 11087,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256t_uint32t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 10976,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
									"entryPoint": 11893,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool": {
									"entryPoint": 11559,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 11370,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 10020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_enum$_StorageProtocol_$2876": {
									"entryPoint": 11399,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 12083,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint32": {
									"entryPoint": 11472,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint48": {
									"entryPoint": 11432,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_uint32": {
									"entryPoint": 10956,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_bool": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_enum_StorageProtocol": {
									"entryPoint": 10264,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_string": {
									"entryPoint": 10346,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_address_t_uint32__to_t_address_t_uint32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 12108,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 12146,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_bool_$dyn_memory_ptr__to_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 11283,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 11174,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_07a393aaecec82831fb8eedd24a09ceedd55f6988f2ff034d4b7c484567c4a59__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0dd873da6e54c819da89101e3c7a7edbcf1e0fc965622b329e4e29f1cc77ee05__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_146dad66b1b90b66cf08f31cd5f1132fa61f7194c7b13b907b231b2105155f03__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_40d3da3f1cf495ca8b1686f660a03e4645cfeec4684d719c5244003a37e1e2de__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_42b687a6639e652ea37178739a4ab95bb07672c62684b4a62e571c9e1a205775__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_547be7f5ed2d17cca91d35e8212265e350385ed13daeee07722cf3e686dd6726__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_690ad167d9c0d18045f3238b8710ea874d83a5730ad53646f5b32f7026999ef5__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_6ae859f4c318934d1c1540d470af55351546754524d10a0c41cf65079e142430__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_6bec182c6648e90b34719fa5b642f9790a766997d7be738e340e7c43012f6516__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_722bfb9e6f51de2ac25a130ee15ede1c320fb11a5fb4945e68c259606e22d8f9__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a73c9cbdd36b84e32f3134c03a48a3cb66257f6d282e484e7987fa4b9858350__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a0dc35c7649c1e335260206285bfe8152a96b0e7f380816b1c7d9a75573461b0__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_aade674a50c17e6c9b1a3f4b46576d7560de13880fef977bd2209416b8046908__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ba5e5dec206d197966e9ab456bd2bee43d54c19e2e749c630df6c82053139ca1__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c04d8c41f3a3839789e85527bb789b661300247e74592dd7d62d3957410112e5__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c5e312a2cbf4118be2a78426cfed7bc7e02e5fe6558e638fd8ea454df9a21590__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d0b37c55f628bdb89b05cd566ea32d2ceee5fc940b974ae83f994bcaa49cb067__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f1e3325b95d8cd383ede03396ff57664e987cafe112e517ad4d28993393d304f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_Claim_$2914_memory_ptr__to_t_struct$_Claim_$2914_memory_ptr__fromStack_reversed": {
									"entryPoint": 10390,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_uint32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_uint48": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"access_calldata_tail_t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 11773,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"access_calldata_tail_t_string_calldata_ptr": {
									"entryPoint": 11588,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_add_t_uint256": {
									"entryPoint": 11847,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint32": {
									"entryPoint": 11711,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 12281,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 12301,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 10298,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 11659,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint224": {
									"entryPoint": 11521,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 12234,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 12324,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 11499,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 12259,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 10242,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 11751,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 11871,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bool": {
									"entryPoint": 11353,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:25883:16",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:16",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "83:263:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "129:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "138:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "141:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "131:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "131:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "131:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "104:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "113:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "100:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "100:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "125:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "96:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:32:16"
															},
															"nodeType": "YulIf",
															"src": "93:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "154:36:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "180:9:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "167:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "167:23:16"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "158:5:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "300:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "309:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "312:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "302:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "302:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "302:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "212:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "223:5:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "230:66:16",
																						"type": "",
																						"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "219:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "219:78:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "209:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "209:89:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "202:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:97:16"
															},
															"nodeType": "YulIf",
															"src": "199:117:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "325:15:16",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "335:5:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "325:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "49:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "60:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "72:6:16",
														"type": ""
													}
												],
												"src": "14:332:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "392:50:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "409:3:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "428:5:16"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "421:6:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "421:13:16"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "414:6:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "414:21:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "402:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "402:34:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "402:34:16"
														}
													]
												},
												"name": "abi_encode_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "376:5:16",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "383:3:16",
														"type": ""
													}
												],
												"src": "351:91:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "542:92:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "552:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "564:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "575:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "560:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "560:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "552:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "594:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "619:6:16"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "612:6:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "612:14:16"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "605:6:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "605:22:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "587:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "587:41:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "587:41:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "511:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "522:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "533:4:16",
														"type": ""
													}
												],
												"src": "447:187:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "688:147:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "698:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "720:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "707:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "707:20:16"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "698:5:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "813:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "822:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "825:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "815:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "815:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "815:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "749:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "760:5:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "767:42:16",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "756:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "756:54:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "746:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "746:65:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "739:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "739:73:16"
															},
															"nodeType": "YulIf",
															"src": "736:93:16"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "667:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "678:5:16",
														"type": ""
													}
												],
												"src": "639:196:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "918:86:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "958:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "967:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "970:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "960:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "960:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "960:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "939:3:16"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "944:6:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "935:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "935:16:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "953:3:16",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "931:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "931:26:16"
															},
															"nodeType": "YulIf",
															"src": "928:46:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "983:15:16",
															"value": {
																"name": "offset",
																"nodeType": "YulIdentifier",
																"src": "992:6:16"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "983:5:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_struct_ClaimParameters_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "892:6:16",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "900:3:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "908:5:16",
														"type": ""
													}
												],
												"src": "840:164:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1131:324:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1177:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1186:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1189:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1179:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1179:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1179:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1152:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1161:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1148:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1148:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1173:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1144:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1144:32:16"
															},
															"nodeType": "YulIf",
															"src": "1141:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1202:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1231:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1212:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1212:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1202:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1250:46:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1281:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1292:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1277:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1277:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1264:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1264:32:16"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1254:6:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1339:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1348:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1351:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1341:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1341:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1341:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1311:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1319:18:16",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1308:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1308:30:16"
															},
															"nodeType": "YulIf",
															"src": "1305:50:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1364:85:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1421:9:16"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1432:6:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1417:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1417:22:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1441:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_struct_ClaimParameters_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "1374:42:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1374:75:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1364:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_struct$_ClaimParameters_$2894_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1089:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1100:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1112:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1120:6:16",
														"type": ""
													}
												],
												"src": "1009:446:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1561:76:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1571:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1583:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1594:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1579:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1579:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1571:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1613:9:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1624:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1606:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1606:25:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1606:25:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1530:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1541:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1552:4:16",
														"type": ""
													}
												],
												"src": "1460:177:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1729:167:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1775:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1784:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1787:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1777:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1777:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1777:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1750:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1759:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1746:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1746:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1771:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1742:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1742:32:16"
															},
															"nodeType": "YulIf",
															"src": "1739:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1800:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1829:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1810:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1810:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1800:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1848:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1875:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1886:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1871:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1871:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1858:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1858:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1848:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1687:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1698:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1710:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1718:6:16",
														"type": ""
													}
												],
												"src": "1642:254:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1944:51:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1961:3:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1970:5:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1977:10:16",
																				"type": "",
																				"value": "0xffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1966:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1966:22:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1954:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "1954:35:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1954:35:16"
														}
													]
												},
												"name": "abi_encode_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1928:5:16",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1935:3:16",
														"type": ""
													}
												],
												"src": "1901:94:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2043:55:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2060:3:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2069:5:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2076:14:16",
																				"type": "",
																				"value": "0xffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2065:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2065:26:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2053:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2053:39:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2053:39:16"
														}
													]
												},
												"name": "abi_encode_uint48",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2027:5:16",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2034:3:16",
														"type": ""
													}
												],
												"src": "2000:98:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2135:152:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2152:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2155:77:16",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2145:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2145:88:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2145:88:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2249:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2252:4:16",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2242:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2242:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2242:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2273:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2276:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2266:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2266:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2266:15:16"
														}
													]
												},
												"name": "panic_error_0x21",
												"nodeType": "YulFunctionDefinition",
												"src": "2103:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2349:243:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2391:168:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2412:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2415:77:16",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2405:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2405:88:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2405:88:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2513:1:16",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2516:4:16",
																					"type": "",
																					"value": "0x21"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2506:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2506:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2506:15:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2541:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2544:4:16",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2534:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2534:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2534:15:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2372:5:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2379:1:16",
																				"type": "",
																				"value": "4"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2369:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2369:12:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2362:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2362:20:16"
															},
															"nodeType": "YulIf",
															"src": "2359:200:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2575:3:16"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2580:5:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2568:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2568:18:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2568:18:16"
														}
													]
												},
												"name": "abi_encode_enum_StorageProtocol",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2333:5:16",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2340:3:16",
														"type": ""
													}
												],
												"src": "2292:300:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2650:205:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2660:10:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2669:1:16",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2664:1:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2729:63:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2754:3:16"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "2759:1:16"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2750:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2750:11:16"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "2773:3:16"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "2778:1:16"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2769:3:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2769:11:16"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2763:5:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2763:18:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2743:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2743:39:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2743:39:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2690:1:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2693:6:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2687:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2687:13:16"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2701:19:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2703:15:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2712:1:16"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2715:2:16",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2708:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2708:10:16"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2703:1:16"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2683:3:16",
																"statements": []
															},
															"src": "2679:113:16"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2818:31:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2831:3:16"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2836:6:16"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2827:3:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2827:16:16"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2845:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2820:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2820:27:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2820:27:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2807:1:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2810:6:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2804:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2804:13:16"
															},
															"nodeType": "YulIf",
															"src": "2801:48:16"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2628:3:16",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "2633:3:16",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2638:6:16",
														"type": ""
													}
												],
												"src": "2597:258:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2910:208:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2920:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2940:5:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2934:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2934:12:16"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2924:6:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2962:3:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2967:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2955:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2955:19:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2955:19:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3009:5:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3016:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3005:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3005:16:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3027:3:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3032:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3023:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3023:14:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3039:6:16"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2983:21:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "2983:63:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2983:63:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3055:57:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3070:3:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "3083:6:16"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3091:2:16",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3079:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3079:15:16"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3100:2:16",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "3096:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3096:7:16"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "3075:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3075:29:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3066:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3066:39:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3107:4:16",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3062:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3062:50:16"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3055:3:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2887:5:16",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2894:3:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2902:3:16",
														"type": ""
													}
												],
												"src": "2860:258:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3270:1094:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3287:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3298:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3280:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3280:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3280:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3334:6:16"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3328:5:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3328:13:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3347:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3358:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3343:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3343:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_uint32",
																	"nodeType": "YulIdentifier",
																	"src": "3310:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3310:52:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3310:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3371:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3401:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3409:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3397:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3397:15:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3391:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3391:22:16"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "3375:12:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "3440:12:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3458:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3469:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3454:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3454:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_uint32",
																	"nodeType": "YulIdentifier",
																	"src": "3422:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3422:51:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3422:51:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3482:44:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3514:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3522:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3510:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3510:15:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3504:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3504:22:16"
															},
															"variables": [
																{
																	"name": "memberValue0_1",
																	"nodeType": "YulTypedName",
																	"src": "3486:14:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_1",
																		"nodeType": "YulIdentifier",
																		"src": "3553:14:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3573:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3584:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3569:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3569:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_uint32",
																	"nodeType": "YulIdentifier",
																	"src": "3535:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3535:53:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3535:53:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3597:44:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3629:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3637:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3625:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3625:15:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3619:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3619:22:16"
															},
															"variables": [
																{
																	"name": "memberValue0_2",
																	"nodeType": "YulTypedName",
																	"src": "3601:14:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_2",
																		"nodeType": "YulIdentifier",
																		"src": "3668:14:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3688:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3699:3:16",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3684:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3684:19:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_uint48",
																	"nodeType": "YulIdentifier",
																	"src": "3650:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3650:54:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3650:54:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3713:45:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3745:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3753:3:16",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3741:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3741:16:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3735:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3735:23:16"
															},
															"variables": [
																{
																	"name": "memberValue0_3",
																	"nodeType": "YulTypedName",
																	"src": "3717:14:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_3",
																		"nodeType": "YulIdentifier",
																		"src": "3785:14:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3805:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3816:3:16",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3801:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3801:19:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_uint48",
																	"nodeType": "YulIdentifier",
																	"src": "3767:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3767:54:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3767:54:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3830:45:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3862:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3870:3:16",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3858:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3858:16:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3852:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3852:23:16"
															},
															"variables": [
																{
																	"name": "memberValue0_4",
																	"nodeType": "YulTypedName",
																	"src": "3834:14:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_4",
																		"nodeType": "YulIdentifier",
																		"src": "3916:14:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3936:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3947:3:16",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3932:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3932:19:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_enum_StorageProtocol",
																	"nodeType": "YulIdentifier",
																	"src": "3884:31:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3884:68:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3884:68:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3961:45:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3993:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4001:3:16",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3989:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3989:16:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3983:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "3983:23:16"
															},
															"variables": [
																{
																	"name": "memberValue0_5",
																	"nodeType": "YulTypedName",
																	"src": "3965:14:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_5",
																		"nodeType": "YulIdentifier",
																		"src": "4031:14:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4051:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4062:3:16",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4047:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4047:19:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_bool",
																	"nodeType": "YulIdentifier",
																	"src": "4015:15:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:52:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4076:33:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4096:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4104:3:16",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4092:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4092:16:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4086:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4086:23:16"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4080:2:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4118:13:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4128:3:16",
																"type": "",
																"value": "256"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4122:2:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4151:9:16"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4162:2:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4147:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4147:18:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4167:2:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4140:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4140:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4140:30:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4179:44:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4211:6:16"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4219:2:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4207:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4207:15:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4201:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4201:22:16"
															},
															"variables": [
																{
																	"name": "memberValue0_6",
																	"nodeType": "YulTypedName",
																	"src": "4183:14:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4232:16:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4242:6:16",
																"type": "",
																"value": "0x0120"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "4236:2:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4268:9:16"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "4279:2:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4264:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4264:18:16"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4284:2:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4257:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4257:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4257:30:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4296:62:16",
															"value": {
																"arguments": [
																	{
																		"name": "memberValue0_6",
																		"nodeType": "YulIdentifier",
																		"src": "4322:14:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4342:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4353:3:16",
																				"type": "",
																				"value": "320"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4338:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4338:19:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "4304:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4304:54:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4296:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_Claim_$2914_memory_ptr__to_t_struct$_Claim_$2914_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3239:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3250:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3261:4:16",
														"type": ""
													}
												],
												"src": "3123:1241:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4508:375:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4554:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4563:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4566:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4556:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4556:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4556:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4529:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4538:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4525:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4525:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4550:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4521:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4521:32:16"
															},
															"nodeType": "YulIf",
															"src": "4518:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4579:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4608:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4589:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4589:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4579:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4627:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4654:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4665:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4650:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4650:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4637:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4637:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4627:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4678:46:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4709:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4720:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4705:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4705:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4692:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4692:32:16"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4682:6:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4767:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4776:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4779:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4769:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4769:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4769:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4739:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4747:18:16",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4736:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4736:30:16"
															},
															"nodeType": "YulIf",
															"src": "4733:50:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4792:85:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4849:9:16"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "4860:6:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4845:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4845:22:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4869:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_struct_ClaimParameters_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "4802:42:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4802:75:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4792:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_struct$_ClaimParameters_$2894_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4458:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4469:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4481:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4489:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4497:6:16",
														"type": ""
													}
												],
												"src": "4369:514:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4971:283:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5020:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5029:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5032:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5022:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5022:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5022:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4999:6:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5007:4:16",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4995:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4995:17:16"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "5014:3:16"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "4991:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4991:27:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4984:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "4984:35:16"
															},
															"nodeType": "YulIf",
															"src": "4981:55:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5045:30:16",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5068:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5055:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5055:20:16"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5045:6:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5118:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5127:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5130:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5120:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5120:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5120:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5090:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5098:18:16",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5087:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5087:30:16"
															},
															"nodeType": "YulIf",
															"src": "5084:50:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5143:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5159:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5167:4:16",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5155:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5155:17:16"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nodeType": "YulIdentifier",
																	"src": "5143:8:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5232:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5241:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5244:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5234:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5234:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5234:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5195:6:16"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5207:1:16",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "5210:6:16"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5203:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5203:14:16"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5191:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5191:27:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5220:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5187:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5187:38:16"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "5227:3:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5184:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5184:47:16"
															},
															"nodeType": "YulIf",
															"src": "5181:67:16"
														}
													]
												},
												"name": "abi_decode_array_uint32_dyn_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4934:6:16",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4942:3:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nodeType": "YulTypedName",
														"src": "4950:8:16",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4960:6:16",
														"type": ""
													}
												],
												"src": "4888:366:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5492:868:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5539:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5548:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5551:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5541:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5541:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5541:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5513:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5522:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5509:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5509:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5534:3:16",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5505:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5505:33:16"
															},
															"nodeType": "YulIf",
															"src": "5502:53:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5564:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5574:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5574:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5564:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5612:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5639:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5650:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5635:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5635:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5622:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5622:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5612:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5663:45:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5693:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5704:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5689:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5689:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5676:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5676:32:16"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5667:5:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5758:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5767:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5770:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5760:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5760:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5760:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5730:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5741:5:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5748:6:16",
																						"type": "",
																						"value": "0xffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5737:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5737:18:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5727:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5727:29:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5720:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:37:16"
															},
															"nodeType": "YulIf",
															"src": "5717:57:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5783:15:16",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5793:5:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "5783:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5807:46:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5838:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5849:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5834:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5834:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5821:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5821:32:16"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5811:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5862:28:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5872:18:16",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5866:2:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5917:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5926:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5929:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5919:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5919:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5919:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5905:6:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5913:2:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5902:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5902:14:16"
															},
															"nodeType": "YulIf",
															"src": "5899:34:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5942:95:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6009:9:16"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "6020:6:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6005:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6005:22:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "6029:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_uint32_dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "5968:36:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "5968:69:16"
															},
															"variables": [
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "5946:8:16",
																	"type": ""
																},
																{
																	"name": "value4_1",
																	"nodeType": "YulTypedName",
																	"src": "5956:8:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6046:18:16",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "6056:8:16"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "6046:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6073:18:16",
															"value": {
																"name": "value4_1",
																"nodeType": "YulIdentifier",
																"src": "6083:8:16"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "6073:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6100:49:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6133:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6144:3:16",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6129:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6129:19:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6116:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6116:33:16"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "6104:8:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6178:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6187:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6190:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6180:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6180:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6180:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "6164:8:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "6174:2:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6161:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6161:16:16"
															},
															"nodeType": "YulIf",
															"src": "6158:36:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6203:97:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6270:9:16"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "6281:8:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6266:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6266:24:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "6292:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_uint32_dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "6229:36:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6229:71:16"
															},
															"variables": [
																{
																	"name": "value5_1",
																	"nodeType": "YulTypedName",
																	"src": "6207:8:16",
																	"type": ""
																},
																{
																	"name": "value6_1",
																	"nodeType": "YulTypedName",
																	"src": "6217:8:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6309:18:16",
															"value": {
																"name": "value5_1",
																"nodeType": "YulIdentifier",
																"src": "6319:8:16"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "6309:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6336:18:16",
															"value": {
																"name": "value6_1",
																"nodeType": "YulIdentifier",
																"src": "6346:8:16"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nodeType": "YulIdentifier",
																	"src": "6336:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint16t_array$_t_uint32_$dyn_calldata_ptrt_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5410:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5421:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5433:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5441:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5449:6:16",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5457:6:16",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "5465:6:16",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "5473:6:16",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "5481:6:16",
														"type": ""
													}
												],
												"src": "5259:1101:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6469:224:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6515:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6524:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6527:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6517:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6517:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6517:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6490:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6499:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6486:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6486:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6511:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6482:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6482:32:16"
															},
															"nodeType": "YulIf",
															"src": "6479:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6540:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6569:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6550:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6550:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6540:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6588:48:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6621:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6632:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6617:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6617:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "6598:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6598:38:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6588:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6645:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6672:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6683:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6668:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6668:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6655:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6655:32:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "6645:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6419:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6430:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6442:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6450:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6458:6:16",
														"type": ""
													}
												],
												"src": "6365:328:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6797:93:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6807:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6819:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6830:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6815:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6815:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6807:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6849:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6864:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6872:10:16",
																				"type": "",
																				"value": "0xffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6860:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6860:23:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6842:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6842:42:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6842:42:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6766:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6777:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6788:4:16",
														"type": ""
													}
												],
												"src": "6698:192:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6943:115:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6953:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6975:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6962:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6962:20:16"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6953:5:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7036:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7045:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7048:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7038:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7038:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7038:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7004:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7015:5:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7022:10:16",
																						"type": "",
																						"value": "0xffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "7011:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7011:22:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7001:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7001:33:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6994:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "6994:41:16"
															},
															"nodeType": "YulIf",
															"src": "6991:61:16"
														}
													]
												},
												"name": "abi_decode_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6922:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6933:5:16",
														"type": ""
													}
												],
												"src": "6895:163:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7218:496:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7265:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7274:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7277:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7267:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7267:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7267:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7239:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7248:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7235:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7235:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7260:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7231:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7231:33:16"
															},
															"nodeType": "YulIf",
															"src": "7228:53:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7290:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7319:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "7300:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7300:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7290:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7338:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7365:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7376:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7361:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7361:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "7348:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7348:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "7338:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7389:47:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7421:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7432:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7417:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7417:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_uint32",
																	"nodeType": "YulIdentifier",
																	"src": "7399:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7399:37:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "7389:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7445:46:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7476:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7487:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7472:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7472:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "7459:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7459:32:16"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "7449:6:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7534:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7543:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7546:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7536:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7536:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7536:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7506:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7514:18:16",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7503:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7503:30:16"
															},
															"nodeType": "YulIf",
															"src": "7500:50:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7559:95:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7626:9:16"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "7637:6:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7622:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7622:22:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "7646:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_uint32_dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "7585:36:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7585:69:16"
															},
															"variables": [
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "7563:8:16",
																	"type": ""
																},
																{
																	"name": "value4_1",
																	"nodeType": "YulTypedName",
																	"src": "7573:8:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7663:18:16",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "7673:8:16"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "7663:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7690:18:16",
															"value": {
																"name": "value4_1",
																"nodeType": "YulIdentifier",
																"src": "7700:8:16"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "7690:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint32t_array$_t_bytes32_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7152:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7163:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7175:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7183:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7191:6:16",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "7199:6:16",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "7207:6:16",
														"type": ""
													}
												],
												"src": "7063:651:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7822:223:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7868:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7877:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7880:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7870:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7870:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7870:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7843:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7852:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7839:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7839:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7864:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7835:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7835:32:16"
															},
															"nodeType": "YulIf",
															"src": "7832:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7893:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7922:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "7903:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7903:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7893:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7941:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7968:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7979:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7964:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7964:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "7951:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "7951:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "7941:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7992:47:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8024:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8035:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8020:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8020:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_uint32",
																	"nodeType": "YulIdentifier",
																	"src": "8002:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8002:37:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "7992:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7772:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7783:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7795:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7803:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7811:6:16",
														"type": ""
													}
												],
												"src": "7719:326:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8120:116:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8166:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8175:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8178:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8168:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8168:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8168:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8141:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8150:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8137:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8137:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8162:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8133:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8133:32:16"
															},
															"nodeType": "YulIf",
															"src": "8130:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8191:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8220:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "8201:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8201:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8191:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8086:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8097:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8109:6:16",
														"type": ""
													}
												],
												"src": "8050:186:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8362:99:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8379:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8390:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8372:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8372:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8372:21:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8402:53:16",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8428:6:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8440:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8451:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8436:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8436:18:16"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "8410:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8410:45:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8402:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8331:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8342:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8353:4:16",
														"type": ""
													}
												],
												"src": "8241:220:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8604:439:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8650:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8659:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8662:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8652:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8652:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8652:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8625:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8634:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8621:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8621:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8646:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8617:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8617:32:16"
															},
															"nodeType": "YulIf",
															"src": "8614:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8675:39:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8704:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "8685:18:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8685:29:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8675:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8723:42:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8750:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8761:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8746:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8746:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8733:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8733:32:16"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "8723:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8774:46:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8805:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8816:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8801:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8801:18:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8788:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8788:32:16"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "8778:6:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8863:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8872:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8875:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8865:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8865:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8865:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8835:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8843:18:16",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8832:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8832:30:16"
															},
															"nodeType": "YulIf",
															"src": "8829:50:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8888:95:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8955:9:16"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "8966:6:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8951:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8951:22:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "8975:7:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_uint32_dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "8914:36:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "8914:69:16"
															},
															"variables": [
																{
																	"name": "value2_1",
																	"nodeType": "YulTypedName",
																	"src": "8892:8:16",
																	"type": ""
																},
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "8902:8:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8992:18:16",
															"value": {
																"name": "value2_1",
																"nodeType": "YulIdentifier",
																"src": "9002:8:16"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "8992:6:16"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9019:18:16",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "9029:8:16"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "9019:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_array$_t_uint32_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8546:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8557:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8569:6:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8577:6:16",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8585:6:16",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "8593:6:16",
														"type": ""
													}
												],
												"src": "8466:577:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9193:497:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9203:12:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9213:2:16",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "9207:2:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9224:32:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9242:9:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "9253:2:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9238:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9238:18:16"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "9228:6:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9272:9:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "9283:2:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9265:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9265:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9265:21:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9295:17:16",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "9306:6:16"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "9299:3:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9321:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9341:6:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9335:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9335:13:16"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9325:6:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "9364:6:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9372:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9357:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9357:22:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9357:22:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9388:25:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9399:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9410:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9395:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9395:18:16"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9388:3:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9422:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9440:6:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "9448:2:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9436:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9436:15:16"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "9426:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9460:10:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9469:1:16",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "9464:1:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9528:136:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "9549:3:16"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "srcPtr",
																											"nodeType": "YulIdentifier",
																											"src": "9574:6:16"
																										}
																									],
																									"functionName": {
																										"name": "mload",
																										"nodeType": "YulIdentifier",
																										"src": "9568:5:16"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "9568:13:16"
																								}
																							],
																							"functionName": {
																								"name": "iszero",
																								"nodeType": "YulIdentifier",
																								"src": "9561:6:16"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9561:21:16"
																						}
																					],
																					"functionName": {
																						"name": "iszero",
																						"nodeType": "YulIdentifier",
																						"src": "9554:6:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9554:29:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9542:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9542:42:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9542:42:16"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "9597:19:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "9608:3:16"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "9613:2:16"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9604:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9604:12:16"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "9597:3:16"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "9629:25:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "9643:6:16"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "9651:2:16"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9639:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9639:15:16"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9629:6:16"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9490:1:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9493:6:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9487:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9487:13:16"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "9501:18:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "9503:14:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "9512:1:16"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9515:1:16",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9508:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9508:9:16"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "9503:1:16"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "9483:3:16",
																"statements": []
															},
															"src": "9479:185:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9673:11:16",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "9681:3:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9673:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_bool_$dyn_memory_ptr__to_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9162:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9173:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9184:4:16",
														"type": ""
													}
												],
												"src": "9048:642:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9796:125:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9806:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9818:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9829:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9814:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9814:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9806:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9848:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9863:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9871:42:16",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "9859:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9859:55:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9841:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9841:74:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9841:74:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9765:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9776:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9787:4:16",
														"type": ""
													}
												],
												"src": "9695:226:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9968:76:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10022:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10031:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10034:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10024:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10024:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10024:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9991:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "10012:5:16"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "10005:6:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10005:13:16"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "9998:6:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9998:21:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "9988:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9988:32:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9981:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "9981:40:16"
															},
															"nodeType": "YulIf",
															"src": "9978:60:16"
														}
													]
												},
												"name": "validator_revert_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9957:5:16",
														"type": ""
													}
												],
												"src": "9926:118:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10127:167:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10173:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10182:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10185:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10175:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10175:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10175:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10148:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10157:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10144:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10144:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10169:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10140:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10140:32:16"
															},
															"nodeType": "YulIf",
															"src": "10137:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10198:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10217:9:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10211:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10211:16:16"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "10202:5:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10258:5:16"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "10236:21:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10236:28:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10236:28:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10273:15:16",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10283:5:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10273:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10093:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10104:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10116:6:16",
														"type": ""
													}
												],
												"src": "10049:245:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10473:233:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10490:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10501:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10483:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10483:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10483:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10524:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10535:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10520:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10520:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10540:2:16",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10513:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10513:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10513:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10563:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10574:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10559:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10559:18:16"
																	},
																	{
																		"hexValue": "57616c6c6574206973206e6f7420616e2061646d696e6973747261746f722066",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10579:34:16",
																		"type": "",
																		"value": "Wallet is not an administrator f"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10552:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10552:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10552:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10634:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10645:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10630:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10630:18:16"
																	},
																	{
																		"hexValue": "6f7220636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10650:13:16",
																		"type": "",
																		"value": "or contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10623:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10623:41:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10623:41:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10673:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10685:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10696:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10681:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10681:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10673:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_42b687a6639e652ea37178739a4ab95bb07672c62684b4a62e571c9e1a205775__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10450:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10464:4:16",
														"type": ""
													}
												],
												"src": "10299:407:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10801:186:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10847:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10856:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10859:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10849:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10849:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10849:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10822:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10831:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10818:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10818:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10843:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10814:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10814:32:16"
															},
															"nodeType": "YulIf",
															"src": "10811:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10872:36:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10898:9:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "10885:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10885:23:16"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "10876:5:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10941:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10950:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10953:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10943:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10943:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10943:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10930:5:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10937:1:16",
																				"type": "",
																				"value": "4"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "10927:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10927:12:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10920:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "10920:20:16"
															},
															"nodeType": "YulIf",
															"src": "10917:40:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10966:15:16",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10976:5:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10966:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_enum$_StorageProtocol_$2876",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10767:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10778:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10790:6:16",
														"type": ""
													}
												],
												"src": "10711:276:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11166:237:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11183:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11194:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11176:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11176:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11176:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11217:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11228:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11213:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11213:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11233:2:16",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11206:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11206:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11206:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11256:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11267:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11252:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11252:18:16"
																	},
																	{
																		"hexValue": "43616e6e6f7420696e697469616c697a65207769746820696e76616c69642073",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11272:34:16",
																		"type": "",
																		"value": "Cannot initialize with invalid s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11245:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11245:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11245:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11327:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11338:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11323:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11323:18:16"
																	},
																	{
																		"hexValue": "746f726167652070726f746f636f6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11343:17:16",
																		"type": "",
																		"value": "torage protocol"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11316:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11316:45:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11316:45:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11370:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11382:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11393:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11378:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11378:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11370:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_40d3da3f1cf495ca8b1686f660a03e4645cfeec4684d719c5244003a37e1e2de__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11143:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11157:4:16",
														"type": ""
													}
												],
												"src": "10992:411:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11477:211:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11523:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11532:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11535:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11525:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11525:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11525:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11498:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11507:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11494:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11494:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11519:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "11490:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11490:32:16"
															},
															"nodeType": "YulIf",
															"src": "11487:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11548:36:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11574:9:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "11561:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11561:23:16"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "11552:5:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11642:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11651:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11654:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11644:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11644:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11644:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11606:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11617:5:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11624:14:16",
																						"type": "",
																						"value": "0xffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "11613:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11613:26:16"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11603:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11603:37:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11596:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11596:45:16"
															},
															"nodeType": "YulIf",
															"src": "11593:65:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11667:15:16",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "11677:5:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "11667:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint48",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11443:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "11454:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11466:6:16",
														"type": ""
													}
												],
												"src": "11408:280:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11867:244:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11884:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11895:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11877:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11877:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11877:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11918:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11929:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11914:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11914:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11934:2:16",
																		"type": "",
																		"value": "54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11907:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11907:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11907:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11957:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11968:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11953:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11953:18:16"
																	},
																	{
																		"hexValue": "43616e6e6f742068617665207374617274446174652067726561746572207468",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11973:34:16",
																		"type": "",
																		"value": "Cannot have startDate greater th"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11946:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "11946:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11946:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12028:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12039:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12024:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12024:18:16"
																	},
																	{
																		"hexValue": "616e206f7220657175616c20746f20656e6444617465",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12044:24:16",
																		"type": "",
																		"value": "an or equal to endDate"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12017:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12017:52:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12017:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12078:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12090:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12101:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12086:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12086:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12078:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_146dad66b1b90b66cf08f31cd5f1132fa61f7194c7b13b907b231b2105155f03__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11844:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11858:4:16",
														"type": ""
													}
												],
												"src": "11693:418:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12185:115:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12231:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12240:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12243:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12233:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12233:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12233:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12206:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12215:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12202:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12202:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12227:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "12198:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12198:32:16"
															},
															"nodeType": "YulIf",
															"src": "12195:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12256:38:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12284:9:16"
																	}
																],
																"functionName": {
																	"name": "abi_decode_uint32",
																	"nodeType": "YulIdentifier",
																	"src": "12266:17:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12266:28:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "12256:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12151:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "12162:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12174:6:16",
														"type": ""
													}
												],
												"src": "12116:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12479:239:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12496:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12507:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12489:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12489:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12489:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12530:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12541:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12526:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12526:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12546:2:16",
																		"type": "",
																		"value": "49"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12519:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12519:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12519:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12569:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12580:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12565:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12565:18:16"
																	},
																	{
																		"hexValue": "43616e6e6f742070726f7669646520626f7468206d696e747350657257616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12585:34:16",
																		"type": "",
																		"value": "Cannot provide both mintsPerWall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12558:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12558:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12558:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12640:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12651:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12636:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12636:18:16"
																	},
																	{
																		"hexValue": "657420616e64206d65726b6c65526f6f74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12656:19:16",
																		"type": "",
																		"value": "et and merkleRoot"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12629:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12629:47:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12629:47:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12685:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12697:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12708:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12693:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12693:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12685:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_722bfb9e6f51de2ac25a130ee15ede1c320fb11a5fb4945e68c259606e22d8f9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12456:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12470:4:16",
														"type": ""
													}
												],
												"src": "12305:413:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12755:152:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12772:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12775:77:16",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12765:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12765:88:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12765:88:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12869:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12872:4:16",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12862:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12862:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12862:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12893:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12896:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12886:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "12886:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12886:15:16"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "12723:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12959:203:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12969:68:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "12979:58:16",
																"type": "",
																"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "12973:2:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13046:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13065:5:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "13072:2:16"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13061:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13061:14:16"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "13050:7:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13103:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13105:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13105:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13105:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "13090:7:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "13099:2:16"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "13087:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13087:15:16"
															},
															"nodeType": "YulIf",
															"src": "13084:41:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13134:22:16",
															"value": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "13145:7:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13154:1:16",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13141:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13141:15:16"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "13134:3:16"
																}
															]
														}
													]
												},
												"name": "increment_t_uint224",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12941:5:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "12951:3:16",
														"type": ""
													}
												],
												"src": "12912:250:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13234:174:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13280:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13289:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13292:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13282:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13282:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13282:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "13255:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13264:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13251:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13251:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13276:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "13247:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13247:32:16"
															},
															"nodeType": "YulIf",
															"src": "13244:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13305:36:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13331:9:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "13318:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13318:23:16"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "13309:5:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13372:5:16"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "13350:21:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13350:28:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13350:28:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13387:15:16",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "13397:5:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "13387:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13200:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "13211:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13223:6:16",
														"type": ""
													}
												],
												"src": "13167:241:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13508:427:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13518:51:16",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "13557:11:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "13544:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13544:25:16"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "13522:18:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13658:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13667:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13670:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13660:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13660:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13660:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "13592:18:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "13620:12:16"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "13620:14:16"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "13636:8:16"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "13616:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13616:29:16"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13651:2:16",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "13647:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13647:7:16"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "13612:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13612:43:16"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "13588:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13588:68:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13581:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13581:76:16"
															},
															"nodeType": "YulIf",
															"src": "13578:96:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13683:47:16",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "13701:8:16"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "13711:18:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13697:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13697:33:16"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "13687:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13739:30:16",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "13762:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "13749:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13749:20:16"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "13739:6:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13812:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13821:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13824:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13814:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13814:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13814:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13784:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13792:18:16",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13781:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13781:30:16"
															},
															"nodeType": "YulIf",
															"src": "13778:50:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13837:25:16",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "13849:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13857:4:16",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13845:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13845:17:16"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "13837:4:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13913:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13922:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13925:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13915:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13915:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13915:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "13878:4:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "13888:12:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13888:14:16"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "13904:6:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13884:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13884:27:16"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "13874:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "13874:38:16"
															},
															"nodeType": "YulIf",
															"src": "13871:58:16"
														}
													]
												},
												"name": "access_calldata_tail_t_string_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "13465:8:16",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "13475:11:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "13491:4:16",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13497:6:16",
														"type": ""
													}
												],
												"src": "13413:522:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14114:171:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14131:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14142:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14124:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14124:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14124:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14165:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14176:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14161:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14161:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14181:2:16",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14154:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14154:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14154:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14204:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14215:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14200:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14200:18:16"
																	},
																	{
																		"hexValue": "436c61696d206e6f7420696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14220:23:16",
																		"type": "",
																		"value": "Claim not initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14193:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14193:51:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14193:51:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14253:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14265:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14276:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14261:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14261:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14253:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14091:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14105:4:16",
														"type": ""
													}
												],
												"src": "13940:345:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14345:382:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14355:22:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14369:1:16",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "14372:4:16"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "14365:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14365:12:16"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "14355:6:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14386:38:16",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "14416:4:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14422:1:16",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "14412:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14412:12:16"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "14390:18:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14463:31:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "14465:27:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "14479:6:16"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14487:4:16",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "14475:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14475:17:16"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "14465:6:16"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "14443:18:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14436:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14436:26:16"
															},
															"nodeType": "YulIf",
															"src": "14433:61:16"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14553:168:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14574:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14577:77:16",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14567:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14567:88:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14567:88:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14675:1:16",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14678:4:16",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14668:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14668:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14668:15:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14703:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14706:4:16",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14696:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14696:15:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14696:15:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "14509:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "14532:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14540:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "14529:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14529:14:16"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "14506:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14506:38:16"
															},
															"nodeType": "YulIf",
															"src": "14503:218:16"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "14325:4:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14334:6:16",
														"type": ""
													}
												],
												"src": "14290:437:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14906:225:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14923:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14934:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14916:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14916:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14916:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14957:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14968:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14953:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14953:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14973:2:16",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14946:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14946:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14946:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14996:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15007:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14992:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14992:18:16"
																	},
																	{
																		"hexValue": "43616e6e6f742073657420696e76616c69642073746f726167652070726f746f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15012:34:16",
																		"type": "",
																		"value": "Cannot set invalid storage proto"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14985:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "14985:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14985:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15067:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15078:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15063:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15063:18:16"
																	},
																	{
																		"hexValue": "636f6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15083:5:16",
																		"type": "",
																		"value": "col"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15056:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15056:33:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15056:33:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15098:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15110:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15121:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15106:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15106:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15098:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d0b37c55f628bdb89b05cd566ea32d2ceee5fc940b974ae83f994bcaa49cb067__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14883:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14897:4:16",
														"type": ""
													}
												],
												"src": "14732:399:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15310:174:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15327:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15338:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15320:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15320:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15320:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15361:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15372:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15357:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15357:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15377:2:16",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15350:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15350:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15350:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15400:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15411:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15396:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15396:18:16"
																	},
																	{
																		"hexValue": "43616e6e6f7420646563726561736520746f74616c4d6178",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15416:26:16",
																		"type": "",
																		"value": "Cannot decrease totalMax"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15389:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15389:54:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15389:54:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15452:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15464:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15475:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15460:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15460:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15452:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0dd873da6e54c819da89101e3c7a7edbcf1e0fc965622b329e4e29f1cc77ee05__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15287:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15301:4:16",
														"type": ""
													}
												],
												"src": "15136:348:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15663:175:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15680:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15691:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15673:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15673:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15673:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15714:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15725:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15710:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15710:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15730:2:16",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15703:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15703:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15703:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15753:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15764:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15749:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15749:18:16"
																	},
																	{
																		"hexValue": "43616e6e6f742064656372656173652077616c6c65744d6178",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15769:27:16",
																		"type": "",
																		"value": "Cannot decrease walletMax"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15742:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15742:55:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15742:55:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15806:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15818:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15829:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15814:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "15814:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15806:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a0dc35c7649c1e335260206285bfe8152a96b0e7f380816b1c7d9a75573461b0__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15640:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15654:4:16",
														"type": ""
													}
												],
												"src": "15489:349:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16017:179:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16034:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16045:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16027:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16027:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16027:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16068:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16079:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16064:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16064:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16084:2:16",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16057:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16057:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16057:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16107:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16118:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16103:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16103:18:16"
																	},
																	{
																		"hexValue": "5472616e73616374696f6e206265666f72652073746172742064617465",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16123:31:16",
																		"type": "",
																		"value": "Transaction before start date"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16096:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16096:59:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16096:59:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16164:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16176:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16187:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16172:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16172:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16164:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a73c9cbdd36b84e32f3134c03a48a3cb66257f6d282e484e7987fa4b9858350__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15994:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16008:4:16",
														"type": ""
													}
												],
												"src": "15843:353:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16375:176:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16392:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16403:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16385:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16385:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16385:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16426:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16437:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16422:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16422:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16442:2:16",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16415:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16415:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16415:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16465:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16476:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16461:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16461:18:16"
																	},
																	{
																		"hexValue": "5472616e73616374696f6e20616674657220656e642064617465",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "16481:28:16",
																		"type": "",
																		"value": "Transaction after end date"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16454:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16454:56:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16454:56:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16519:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16531:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16542:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16527:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16527:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16519:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f1e3325b95d8cd383ede03396ff57664e987cafe112e517ad4d28993393d304f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16352:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16366:4:16",
														"type": ""
													}
												],
												"src": "16201:350:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16603:181:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16613:20:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "16623:10:16",
																"type": "",
																"value": "0xffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "16617:2:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16642:21:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16657:1:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "16660:2:16"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "16653:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16653:10:16"
															},
															"variables": [
																{
																	"name": "x_1",
																	"nodeType": "YulTypedName",
																	"src": "16646:3:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16672:21:16",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16687:1:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "16690:2:16"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "16683:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16683:10:16"
															},
															"variables": [
																{
																	"name": "y_1",
																	"nodeType": "YulTypedName",
																	"src": "16676:3:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16727:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "16729:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16729:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16729:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x_1",
																		"nodeType": "YulIdentifier",
																		"src": "16708:3:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "16717:2:16"
																			},
																			{
																				"name": "y_1",
																				"nodeType": "YulIdentifier",
																				"src": "16721:3:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16713:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16713:12:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16705:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16705:21:16"
															},
															"nodeType": "YulIf",
															"src": "16702:47:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16758:20:16",
															"value": {
																"arguments": [
																	{
																		"name": "x_1",
																		"nodeType": "YulIdentifier",
																		"src": "16769:3:16"
																	},
																	{
																		"name": "y_1",
																		"nodeType": "YulIdentifier",
																		"src": "16774:3:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16765:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16765:13:16"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "16758:3:16"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "16586:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "16589:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "16595:3:16",
														"type": ""
													}
												],
												"src": "16556:228:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16963:223:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16980:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16991:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16973:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "16973:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16973:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17014:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17025:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17010:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17010:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17030:2:16",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17003:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17003:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17003:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17053:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17064:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17049:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17049:18:16"
																	},
																	{
																		"hexValue": "546f6f206d616e792072657175657374656420666f72207468697320636c6169",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17069:34:16",
																		"type": "",
																		"value": "Too many requested for this clai"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17042:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17042:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17042:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17124:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17135:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17120:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17120:18:16"
																	},
																	{
																		"hexValue": "6d",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17140:3:16",
																		"type": "",
																		"value": "m"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17113:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17113:31:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17113:31:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17153:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17165:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17176:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17161:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17161:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17153:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6bec182c6648e90b34719fa5b642f9790a766997d7be738e340e7c43012f6516__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16940:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16954:4:16",
														"type": ""
													}
												],
												"src": "16789:397:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17365:163:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17382:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17393:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17375:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17375:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17375:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17416:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17427:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17412:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17412:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17432:2:16",
																		"type": "",
																		"value": "13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17405:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17405:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17405:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17455:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17466:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17451:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17451:18:16"
																	},
																	{
																		"hexValue": "496e76616c696420696e707574",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17471:15:16",
																		"type": "",
																		"value": "Invalid input"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17444:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17444:43:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17444:43:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17496:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17508:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17519:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17504:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17504:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17496:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17342:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17356:4:16",
														"type": ""
													}
												],
												"src": "17191:337:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17565:152:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17582:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17585:77:16",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17575:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17575:88:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17575:88:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17679:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17682:4:16",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17672:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17672:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17672:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17703:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17706:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "17696:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17696:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17696:15:16"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "17533:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17832:435:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17842:51:16",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "17881:11:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "17868:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17868:25:16"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "17846:18:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17982:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17991:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17994:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "17984:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17984:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17984:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "17916:18:16"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "17944:12:16"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17944:14:16"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "17960:8:16"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "17940:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17940:29:16"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "17975:2:16",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "17971:3:16"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17971:7:16"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "17936:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17936:43:16"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "17912:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17912:68:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "17905:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "17905:76:16"
															},
															"nodeType": "YulIf",
															"src": "17902:96:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "18007:47:16",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "18025:8:16"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "18035:18:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18021:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18021:33:16"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "18011:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "18063:30:16",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "18086:6:16"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "18073:12:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18073:20:16"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "18063:6:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18136:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18145:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18148:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "18138:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18138:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18138:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18108:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18116:18:16",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "18105:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18105:30:16"
															},
															"nodeType": "YulIf",
															"src": "18102:50:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18161:25:16",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "18173:6:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18181:4:16",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18169:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18169:17:16"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "18161:4:16"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18245:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18254:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18257:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "18247:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18247:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18247:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "18202:4:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "18212:12:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18212:14:16"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "18232:1:16",
																						"type": "",
																						"value": "5"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "18235:6:16"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "18228:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18228:14:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "18208:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18208:35:16"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "18198:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18198:46:16"
															},
															"nodeType": "YulIf",
															"src": "18195:66:16"
														}
													]
												},
												"name": "access_calldata_tail_t_array$_t_bytes32_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "17789:8:16",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "17799:11:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "17815:4:16",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17821:6:16",
														"type": ""
													}
												],
												"src": "17722:545:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18320:80:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18347:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "18349:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18349:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18349:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "18336:1:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "18343:1:16"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "18339:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18339:6:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "18333:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18333:13:16"
															},
															"nodeType": "YulIf",
															"src": "18330:39:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18378:16:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "18389:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "18392:1:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18385:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18385:9:16"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "18378:3:16"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "18303:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "18306:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "18312:3:16",
														"type": ""
													}
												],
												"src": "18272:128:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18579:224:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18596:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18607:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18589:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18589:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18589:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18630:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18641:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18626:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18626:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18646:2:16",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18619:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18619:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18619:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18669:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18680:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18665:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18665:18:16"
																	},
																	{
																		"hexValue": "546f6f206d616e792072657175657374656420666f7220746869732077616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18685:34:16",
																		"type": "",
																		"value": "Too many requested for this wall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18658:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18658:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18658:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18740:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18751:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18736:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18736:18:16"
																	},
																	{
																		"hexValue": "6574",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18756:4:16",
																		"type": "",
																		"value": "et"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18729:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18729:32:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18729:32:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18770:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18782:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18793:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18778:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18778:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18770:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_690ad167d9c0d18045f3238b8710ea874d83a5730ad53646f5b32f7026999ef5__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18556:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18570:4:16",
														"type": ""
													}
												],
												"src": "18405:398:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18935:181:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18945:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18957:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18968:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18953:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18953:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18945:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18987:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "19002:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19010:42:16",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "18998:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18998:55:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18980:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "18980:74:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18980:74:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19074:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19085:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19070:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19070:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "19094:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19102:6:16",
																				"type": "",
																				"value": "0xffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "19090:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19090:19:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19063:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19063:47:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19063:47:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18896:9:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "18907:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "18915:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18926:4:16",
														"type": ""
													}
												],
												"src": "18808:308:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19153:152:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19170:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19173:77:16",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19163:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19163:88:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19163:88:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19267:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19270:4:16",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19260:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19260:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19260:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19291:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19294:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "19284:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19284:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19284:15:16"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "19121:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19416:999:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19426:12:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "19436:2:16",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "19430:2:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19483:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19492:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19495:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "19485:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19485:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19485:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "19458:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19467:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "19454:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19454:23:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "19479:2:16"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "19450:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19450:32:16"
															},
															"nodeType": "YulIf",
															"src": "19447:52:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19508:30:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19528:9:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "19522:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19522:16:16"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "19512:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19547:28:16",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "19557:18:16",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "19551:2:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19602:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19611:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19614:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "19604:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19604:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19604:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "19590:6:16"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "19598:2:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "19587:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19587:14:16"
															},
															"nodeType": "YulIf",
															"src": "19584:34:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19627:32:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19641:9:16"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "19652:6:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19637:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19637:22:16"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "19631:2:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19707:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19716:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19719:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "19709:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19709:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19709:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "19686:2:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "19690:4:16",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "19682:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "19682:13:16"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "19697:7:16"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "19678:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19678:27:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "19671:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19671:35:16"
															},
															"nodeType": "YulIf",
															"src": "19668:55:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19732:19:16",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "19748:2:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "19742:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19742:9:16"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "19736:2:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19774:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "19776:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19776:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19776:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "19766:2:16"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "19770:2:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "19763:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19763:10:16"
															},
															"nodeType": "YulIf",
															"src": "19760:36:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19805:20:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19819:1:16",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "19822:2:16"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "19815:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19815:10:16"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "19809:2:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19834:23:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19854:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "19848:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19848:9:16"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "19838:6:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19866:56:16",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "19888:6:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_5",
																						"nodeType": "YulIdentifier",
																						"src": "19904:2:16"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "19908:2:16",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "19900:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "19900:11:16"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "19917:2:16",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "19913:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "19913:7:16"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "19896:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19896:25:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19884:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19884:38:16"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "19870:10:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19981:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "19983:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19983:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19983:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "19940:10:16"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "19952:2:16"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "19937:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19937:18:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "19960:10:16"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "19972:6:16"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "19957:2:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19957:22:16"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "19934:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "19934:46:16"
															},
															"nodeType": "YulIf",
															"src": "19931:72:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20019:2:16",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "20023:10:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20012:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20012:22:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20012:22:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "20043:17:16",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "20054:6:16"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "20047:3:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "20076:6:16"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "20084:2:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20069:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20069:18:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20069:18:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20096:22:16",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "20107:6:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "20115:2:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20103:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20103:15:16"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "20096:3:16"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "20127:34:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "20149:2:16"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "20153:2:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20145:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20145:11:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "20158:2:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20141:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20141:20:16"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nodeType": "YulTypedName",
																	"src": "20131:6:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "20193:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "20202:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "20205:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "20195:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20195:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "20195:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "20176:6:16"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "20184:7:16"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "20173:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20173:19:16"
															},
															"nodeType": "YulIf",
															"src": "20170:39:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "20218:22:16",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "20233:2:16"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "20237:2:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20229:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20229:11:16"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "20222:3:16",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "20305:79:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "20326:3:16"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "20337:3:16"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "20331:5:16"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "20331:10:16"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "20319:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20319:23:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "20319:23:16"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "20355:19:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "20366:3:16"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "20371:2:16"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "20362:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20362:12:16"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "20355:3:16"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "20260:3:16"
																	},
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "20265:6:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "20257:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20257:15:16"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "20273:23:16",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "20275:19:16",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "20286:3:16"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "20291:2:16"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "20282:3:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20282:12:16"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "20275:3:16"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "20253:3:16",
																"statements": []
															},
															"src": "20249:135:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20393:16:16",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "20403:6:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "20393:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19382:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "19393:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "19405:6:16",
														"type": ""
													}
												],
												"src": "19310:1105:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20519:89:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20529:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20541:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20552:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20537:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20537:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "20529:4:16"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20571:9:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "20586:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20594:6:16",
																				"type": "",
																				"value": "0xffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "20582:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20582:19:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20564:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20564:38:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20564:38:16"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "20488:9:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "20499:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "20510:4:16",
														"type": ""
													}
												],
												"src": "20420:188:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20787:244:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20804:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20815:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20797:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20797:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20797:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20838:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20849:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20834:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20834:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20854:2:16",
																		"type": "",
																		"value": "54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20827:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20827:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20827:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20877:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20888:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20873:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20873:18:16"
																	},
																	{
																		"hexValue": "43616e206f6e6c7920726574726965766520666f72206e6f6e2d6d65726b6c65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20893:34:16",
																		"type": "",
																		"value": "Can only retrieve for non-merkle"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20866:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20866:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20866:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20948:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20959:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20944:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20944:18:16"
																	},
																	{
																		"hexValue": "20636c61696d7320776974682077616c6c65744d6178",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20964:24:16",
																		"type": "",
																		"value": " claims with walletMax"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20937:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "20937:52:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20937:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20998:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21010:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21021:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21006:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21006:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "20998:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_aade674a50c17e6c9b1a3f4b46576d7560de13880fef977bd2209416b8046908__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "20764:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "20778:4:16",
														"type": ""
													}
												],
												"src": "20613:418:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21210:234:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21227:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21238:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21220:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21220:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21220:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21261:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21272:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21257:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21257:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21277:2:16",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21250:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21250:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21250:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21300:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21311:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21296:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21296:18:16"
																	},
																	{
																		"hexValue": "4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21316:34:16",
																		"type": "",
																		"value": "Maximum tokens already minted fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21289:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21289:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21289:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21371:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21382:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21367:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21367:18:16"
																	},
																	{
																		"hexValue": "72207468697320636c61696d",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21387:14:16",
																		"type": "",
																		"value": "r this claim"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21360:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21360:42:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21360:42:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21411:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21423:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21434:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21419:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21419:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "21411:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ba5e5dec206d197966e9ab456bd2bee43d54c19e2e749c630df6c82053139ca1__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "21187:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "21201:4:16",
														"type": ""
													}
												],
												"src": "21036:408:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21623:235:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21640:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21651:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21633:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21633:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21633:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21674:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21685:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21670:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21670:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21690:2:16",
																		"type": "",
																		"value": "45"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21663:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21663:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21663:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21713:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21724:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21709:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21709:18:16"
																	},
																	{
																		"hexValue": "4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21729:34:16",
																		"type": "",
																		"value": "Maximum tokens already minted fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21702:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21702:62:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21702:62:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21784:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21795:2:16",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21780:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21780:18:16"
																	},
																	{
																		"hexValue": "7220746869732077616c6c6574",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21800:15:16",
																		"type": "",
																		"value": "r this wallet"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21773:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21773:43:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21773:43:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21825:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21837:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21848:3:16",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21833:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21833:19:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "21825:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c5e312a2cbf4118be2a78426cfed7bc7e02e5fe6558e638fd8ea454df9a21590__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "21600:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "21614:4:16",
														"type": ""
													}
												],
												"src": "21449:409:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21944:103:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "21990:16:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "21999:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "22002:1:16",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "21992:6:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "21992:12:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "21992:12:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "21965:7:16"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21974:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "21961:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21961:23:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21986:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "21957:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "21957:32:16"
															},
															"nodeType": "YulIf",
															"src": "21954:52:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22015:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22031:9:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "22025:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22025:16:16"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "22015:6:16"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "21910:9:16",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "21921:7:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "21933:6:16",
														"type": ""
													}
												],
												"src": "21863:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22226:178:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22243:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22254:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22236:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22236:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22236:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22277:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22288:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22273:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22273:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22293:2:16",
																		"type": "",
																		"value": "28"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22266:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22266:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22266:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22316:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22327:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22312:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22312:18:16"
																	},
																	{
																		"hexValue": "43616e206f6e6c7920636865636b206d65726b6c6520636c61696d73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22332:30:16",
																		"type": "",
																		"value": "Can only check merkle claims"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22305:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22305:58:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22305:58:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22372:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22384:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22395:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "22380:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22380:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "22372:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6ae859f4c318934d1c1540d470af55351546754524d10a0c41cf65079e142430__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "22203:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "22217:4:16",
														"type": ""
													}
												],
												"src": "22052:352:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22583:170:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22600:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22611:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22593:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22593:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22593:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22634:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22645:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22630:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22630:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22650:2:16",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22623:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22623:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22623:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22673:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22684:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22669:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22669:18:16"
																	},
																	{
																		"hexValue": "546f6b656e20646f6573206e6f74206578697374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22689:22:16",
																		"type": "",
																		"value": "Token does not exist"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22662:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22662:50:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22662:50:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22721:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22733:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22744:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "22729:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22729:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "22721:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_547be7f5ed2d17cca91d35e8212265e350385ed13daeee07722cf3e686dd6726__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "22560:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "22574:4:16",
														"type": ""
													}
												],
												"src": "22409:344:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22945:283:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "22955:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "22975:6:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "22969:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22969:13:16"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "22959:6:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "23017:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23025:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23013:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23013:17:16"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23032:3:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23037:6:16"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "22991:21:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "22991:53:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22991:53:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23053:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23070:3:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23075:6:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23066:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23066:16:16"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "23057:5:16",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23091:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "23113:6:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "23107:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23107:13:16"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "23095:8:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "23155:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23163:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23151:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23151:17:16"
																	},
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "23170:5:16"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "23177:8:16"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "23129:21:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23129:57:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23129:57:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23195:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "23206:5:16"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "23213:8:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23202:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23202:20:16"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "23195:3:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "22913:3:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "22918:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "22926:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "22937:3:16",
														"type": ""
													}
												],
												"src": "22758:470:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23521:326:16",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23531:27:16",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "23551:6:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "23545:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23545:13:16"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "23535:6:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "23593:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23601:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23589:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23589:17:16"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23608:3:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23613:6:16"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "23567:21:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23567:53:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23567:53:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23629:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23646:3:16"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23651:6:16"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23642:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23642:16:16"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "23633:5:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "23674:5:16"
																	},
																	{
																		"hexValue": "2f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23681:3:16",
																		"type": "",
																		"value": "/"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23667:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23667:18:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23667:18:16"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23694:29:16",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "23716:6:16"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "23710:5:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23710:13:16"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "23698:8:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "23758:6:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23766:4:16",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23754:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23754:17:16"
																	},
																	{
																		"arguments": [
																			{
																				"name": "end_1",
																				"nodeType": "YulIdentifier",
																				"src": "23777:5:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23784:1:16",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23773:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23773:13:16"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "23788:8:16"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "23732:21:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23732:65:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23732:65:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23806:35:16",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "end_1",
																				"nodeType": "YulIdentifier",
																				"src": "23821:5:16"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "23828:8:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23817:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23817:20:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23839:1:16",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23813:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23813:28:16"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "23806:3:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "23489:3:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "23494:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "23502:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "23513:3:16",
														"type": ""
													}
												],
												"src": "23233:614:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23899:88:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23930:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "23932:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23932:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23932:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "23915:5:16"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23926:1:16",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "23922:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23922:6:16"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "23912:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23912:17:16"
															},
															"nodeType": "YulIf",
															"src": "23909:43:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23961:20:16",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "23972:5:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23979:1:16",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23968:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "23968:13:16"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "23961:3:16"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "23881:5:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "23891:3:16",
														"type": ""
													}
												],
												"src": "23852:135:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24137:230:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "24154:3:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "24167:2:16",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "24171:6:16"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "24163:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "24163:15:16"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "24184:26:16",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "24180:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "24180:31:16"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "24159:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24159:53:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24147:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24147:66:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24147:66:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "24233:3:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24238:2:16",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24229:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24229:12:16"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "24251:3:16",
																						"type": "",
																						"value": "224"
																					},
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "24256:6:16"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "24247:3:16"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "24247:16:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24265:66:16",
																				"type": "",
																				"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "24243:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24243:89:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24222:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24222:111:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24222:111:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "24342:19:16",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "24353:3:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24358:2:16",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "24349:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24349:12:16"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "24342:3:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint32__to_t_address_t_uint32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "24105:3:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "24110:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "24118:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "24129:3:16",
														"type": ""
													}
												],
												"src": "23992:375:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24546:179:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "24563:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24574:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24556:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24556:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24556:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24597:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24608:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24593:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24593:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24613:2:16",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24586:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24586:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24586:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24636:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24647:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24632:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24632:18:16"
																	},
																	{
																		"hexValue": "436f756c64206e6f7420766572696679206d65726b6c652070726f6f66",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "24652:31:16",
																		"type": "",
																		"value": "Could not verify merkle proof"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24625:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24625:59:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24625:59:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "24693:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "24705:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24716:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "24701:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24701:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "24693:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c04d8c41f3a3839789e85527bb789b661300247e74592dd7d62d3957410112e5__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "24523:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "24537:4:16",
														"type": ""
													}
												],
												"src": "24372:353:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24904:164:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "24921:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24932:2:16",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24914:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24914:21:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24914:21:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24955:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24966:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24951:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24951:18:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24971:2:16",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24944:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24944:30:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24944:30:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24994:9:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "25005:2:16",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24990:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24990:18:16"
																	},
																	{
																		"hexValue": "416c7265616479206d696e746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "25010:16:16",
																		"type": "",
																		"value": "Already minted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24983:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "24983:44:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24983:44:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "25036:26:16",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "25048:9:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25059:2:16",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "25044:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25044:18:16"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "25036:4:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_07a393aaecec82831fb8eedd24a09ceedd55f6988f2ff034d4b7c484567c4a59__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "24881:9:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "24895:4:16",
														"type": ""
													}
												],
												"src": "24730:338:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25105:152:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25122:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25125:77:16",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "25115:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25115:88:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "25115:88:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25219:1:16",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25222:4:16",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "25212:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25212:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "25212:15:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25243:1:16",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25246:4:16",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "25236:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25236:15:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "25236:15:16"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "25073:184:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25308:74:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "25331:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "25333:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "25333:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "25333:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "25328:1:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "25321:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25321:9:16"
															},
															"nodeType": "YulIf",
															"src": "25318:35:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "25362:14:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "25371:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "25374:1:16"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "25367:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25367:9:16"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "25362:1:16"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "25293:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "25296:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "25302:1:16",
														"type": ""
													}
												],
												"src": "25262:120:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25436:76:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "25458:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "25460:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "25460:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "25460:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "25452:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "25455:1:16"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "25449:2:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25449:8:16"
															},
															"nodeType": "YulIf",
															"src": "25446:34:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "25489:17:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "25501:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "25504:1:16"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "25497:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25497:9:16"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "25489:4:16"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "25418:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "25421:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "25427:4:16",
														"type": ""
													}
												],
												"src": "25387:125:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25555:74:16",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "25578:22:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "25580:16:16"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "25580:18:16"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "25580:18:16"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "25575:1:16"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "25568:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25568:9:16"
															},
															"nodeType": "YulIf",
															"src": "25565:35:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "25609:14:16",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "25618:1:16"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "25621:1:16"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "25614:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25614:9:16"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "25609:1:16"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "25540:1:16",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "25543:1:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "25549:1:16",
														"type": ""
													}
												],
												"src": "25517:112:16"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25781:100:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "25798:3:16"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "25803:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "25791:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25791:19:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "25791:19:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "25830:3:16"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "25835:2:16",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "25826:3:16"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "25826:12:16"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "25840:6:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "25819:6:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25819:28:16"
															},
															"nodeType": "YulExpressionStatement",
															"src": "25819:28:16"
														},
														{
															"nodeType": "YulAssignment",
															"src": "25856:19:16",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "25867:3:16"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25872:2:16",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "25863:3:16"
																},
																"nodeType": "YulFunctionCall",
																"src": "25863:12:16"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "25856:3:16"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "25749:3:16",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "25754:6:16",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "25762:6:16",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "25773:3:16",
														"type": ""
													}
												],
												"src": "25634:247:16"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_bool(value, pos)\n    {\n        mstore(pos, iszero(iszero(value)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_struct_ClaimParameters_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 256) { revert(0, 0) }\n        value := offset\n    }\n    function abi_decode_tuple_t_addresst_struct$_ClaimParameters_$2894_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_struct_ClaimParameters_calldata(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_uint32(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffff))\n    }\n    function abi_encode_uint48(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffff))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_enum_StorageProtocol(value, pos)\n    {\n        if iszero(lt(value, 4))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(pos, value)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_struct$_Claim_$2914_memory_ptr__to_t_struct$_Claim_$2914_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        abi_encode_uint32(mload(value0), add(headStart, 32))\n        let memberValue0 := mload(add(value0, 32))\n        abi_encode_uint32(memberValue0, add(headStart, 64))\n        let memberValue0_1 := mload(add(value0, 64))\n        abi_encode_uint32(memberValue0_1, add(headStart, 96))\n        let memberValue0_2 := mload(add(value0, 96))\n        abi_encode_uint48(memberValue0_2, add(headStart, 128))\n        let memberValue0_3 := mload(add(value0, 128))\n        abi_encode_uint48(memberValue0_3, add(headStart, 160))\n        let memberValue0_4 := mload(add(value0, 160))\n        abi_encode_enum_StorageProtocol(memberValue0_4, add(headStart, 192))\n        let memberValue0_5 := mload(add(value0, 192))\n        abi_encode_bool(memberValue0_5, add(headStart, 224))\n        let _1 := mload(add(value0, 224))\n        let _2 := 256\n        mstore(add(headStart, _2), _1)\n        let memberValue0_6 := mload(add(value0, _2))\n        let _3 := 0x0120\n        mstore(add(headStart, _3), _3)\n        tail := abi_encode_string(memberValue0_6, add(headStart, 320))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_struct$_ClaimParameters_$2894_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_struct_ClaimParameters_calldata(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_array_uint32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint16t_array$_t_uint32_$dyn_calldata_ptrt_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n        value2 := value\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_array_uint32_dyn_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n        let offset_1 := calldataload(add(headStart, 128))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value5_1, value6_1 := abi_decode_array_uint32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value5 := value5_1\n        value6 := value6_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint32t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_uint32(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_array_uint32_dyn_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_uint32(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_array$_t_uint32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint32_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_array$_t_bool_$dyn_memory_ptr__to_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, iszero(iszero(mload(srcPtr))))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_42b687a6639e652ea37178739a4ab95bb07672c62684b4a62e571c9e1a205775__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Wallet is not an administrator f\")\n        mstore(add(headStart, 96), \"or contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_enum$_StorageProtocol_$2876(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(lt(value, 4)) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_40d3da3f1cf495ca8b1686f660a03e4645cfeec4684d719c5244003a37e1e2de__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"Cannot initialize with invalid s\")\n        mstore(add(headStart, 96), \"torage protocol\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint48(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_146dad66b1b90b66cf08f31cd5f1132fa61f7194c7b13b907b231b2105155f03__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"Cannot have startDate greater th\")\n        mstore(add(headStart, 96), \"an or equal to endDate\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint32(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_722bfb9e6f51de2ac25a130ee15ede1c320fb11a5fb4945e68c259606e22d8f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"Cannot provide both mintsPerWall\")\n        mstore(add(headStart, 96), \"et and merkleRoot\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint224(value) -> ret\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        let value_1 := and(value, _1)\n        if eq(value_1, _1) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function access_calldata_tail_t_string_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Claim not initialized\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_d0b37c55f628bdb89b05cd566ea32d2ceee5fc940b974ae83f994bcaa49cb067__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Cannot set invalid storage proto\")\n        mstore(add(headStart, 96), \"col\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0dd873da6e54c819da89101e3c7a7edbcf1e0fc965622b329e4e29f1cc77ee05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot decrease totalMax\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a0dc35c7649c1e335260206285bfe8152a96b0e7f380816b1c7d9a75573461b0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Cannot decrease walletMax\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7a73c9cbdd36b84e32f3134c03a48a3cb66257f6d282e484e7987fa4b9858350__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Transaction before start date\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f1e3325b95d8cd383ede03396ff57664e987cafe112e517ad4d28993393d304f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Transaction after end date\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint32(x, y) -> sum\n    {\n        let _1 := 0xffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function abi_encode_tuple_t_stringliteral_6bec182c6648e90b34719fa5b642f9790a766997d7be738e340e7c43012f6516__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Too many requested for this clai\")\n        mstore(add(headStart, 96), \"m\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid input\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_array$_t_bytes32_$dyn_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_690ad167d9c0d18045f3238b8710ea874d83a5730ad53646f5b32f7026999ef5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Too many requested for this wall\")\n        mstore(add(headStart, 96), \"et\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_stringliteral_aade674a50c17e6c9b1a3f4b46576d7560de13880fef977bd2209416b8046908__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"Can only retrieve for non-merkle\")\n        mstore(add(headStart, 96), \" claims with walletMax\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ba5e5dec206d197966e9ab456bd2bee43d54c19e2e749c630df6c82053139ca1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Maximum tokens already minted fo\")\n        mstore(add(headStart, 96), \"r this claim\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c5e312a2cbf4118be2a78426cfed7bc7e02e5fe6558e638fd8ea454df9a21590__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"Maximum tokens already minted fo\")\n        mstore(add(headStart, 96), \"r this wallet\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_6ae859f4c318934d1c1540d470af55351546754524d10a0c41cf65079e142430__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Can only check merkle claims\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_547be7f5ed2d17cca91d35e8212265e350385ed13daeee07722cf3e686dd6726__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Token does not exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \"/\")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(end_1, 1), length_1)\n        end := add(add(end_1, length_1), 1)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint32__to_t_address_t_uint32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), and(shl(224, value1), 0xffffffff00000000000000000000000000000000000000000000000000000000))\n        end := add(pos, 24)\n    }\n    function abi_encode_tuple_t_stringliteral_c04d8c41f3a3839789e85527bb789b661300247e74592dd7d62d3957410112e5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Could not verify merkle proof\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_07a393aaecec82831fb8eedd24a09ceedd55f6988f2ff034d4b7c484567c4a59__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Already minted\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        end := add(pos, 64)\n    }\n}",
									"id": 16,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100c95760003560e01c806342f3bef411610081578063d5fdfe871161005b578063d5fdfe87146101ad578063e9dc6375146101df578063f8a6137b146101ff57600080fd5b806342f3bef41461015f578063bbf2a8c614610187578063cda085361461019a57600080fd5b80630f79ab39116100b25780630f79ab39146101175780631831a643146101375780633512da331461014c57600080fd5b806301ffc9a7146100ce578063037b79db146100f6575b600080fd5b6100e16100dc366004612724565b61021f565b60405190151581526020015b60405180910390f35b61010961010436600461278a565b6102bc565b6040519081526020016100ed565b61012a6101253660046127d8565b6108d3565b6040516100ed9190612896565b61014a610145366004612949565b610b14565b005b61014a61015a3660046129ec565b61120a565b61017261016d366004612a90565b611832565b60405163ffffffff90911681526020016100ed565b61014a610195366004612ae0565b611973565b6100e16101a8366004612b4f565b611e00565b6101096101bb366004612b8b565b6001600160a01b03166000908152600160205260409020546001600160e01b031690565b6101f26101ed3660046127d8565b611f22565b6040516100ed9190612ba6565b61021261020d366004612bb9565b612260565b6040516100ed9190612c13565b60006001600160e01b031982167f38dbd06a00000000000000000000000000000000000000000000000000000000148061028257506001600160e01b031982167fe9dc637500000000000000000000000000000000000000000000000000000000145b806102b657506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b604051630935e01b60e21b8152336004820152600090839081906001600160a01b038216906324d7806c90602401602060405180830381865afa158015610307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032b9190612c6a565b6103905760405162461bcd60e51b815260206004820152602b60248201527f57616c6c6574206973206e6f7420616e2061646d696e6973747261746f72206660448201526a1bdc8818dbdb9d1c9858dd60aa1b60648201526084015b60405180910390fd5b60006103a260a0860160808701612c87565b60038111156103b3576103b3612802565b036104265760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420696e697469616c697a65207769746820696e76616c6964207360448201527f746f726167652070726f746f636f6c00000000000000000000000000000000006064820152608401610387565b6104366080850160608601612ca8565b65ffffffffffff16158061047757506104556080850160608601612ca8565b65ffffffffffff1661046d6060860160408701612ca8565b65ffffffffffff16105b6104e95760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206861766520737461727444617465206772656174657220746860448201527f616e206f7220657175616c20746f20656e6444617465000000000000000000006064820152608401610387565b60c0840135158061050d57506105056040850160208601612cd0565b63ffffffff16155b61057f5760405162461bcd60e51b815260206004820152603160248201527f43616e6e6f742070726f7669646520626f7468206d696e747350657257616c6c60448201527f657420616e64206d65726b6c65526f6f740000000000000000000000000000006064820152608401610387565b6001600160a01b038516600090815260016020526040812080546001600160e01b0316916105ac83612d01565b82546101009290920a6001600160e01b038181021990931691831602179091556001600160a01b03871660009081526001602090815260408083205481516101208101909252928152919092169250908181019061060c90880188612cd0565b63ffffffff16815260200186602001602081019061062a9190612cd0565b63ffffffff1681526020016106456060880160408901612ca8565b65ffffffffffff1681526020016106626080880160608901612ca8565b65ffffffffffff16815260200161067f60a0880160808901612c87565b600381111561069057610690612802565b81526020016106a560c0880160a08901612d27565b1515815260c087013560208201526040016106c360e0880188612d44565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160a01b03891681526002602090815260408083206001600160e01b03871684528252918290208451815492860151938601516060870151608088015165ffffffffffff908116600160901b027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff91909216600160601b0271ffffffffffff0000000000000000000000001963ffffffff948516600160401b021671ffffffffffffffffffff0000000000000000199885166401000000000267ffffffffffffffff199098169490951693909317959095179590951691909117179182168317815560a085015190935091839160ff60c01b199091167fffffffffffffff00000000000000ffffffffffffffffffffffffffffffffffff90911617600160c01b83600381111561082e5761082e612802565b021790555060c08201518154901515600160c81b0260ff60c81b1990911617815560e08201516001820155610100820151805161087591600284019160209091019061268b565b50506040513381526001600160e01b03831691506001600160a01b038816907fcf76e1beb8dcf887c917933e1d0970eafadb9a69b82cfd5f44740a0dce6f45a69060200160405180910390a36001600160e01b031695945050505050565b610920604080516101208101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152600060208201819052604082015260609081015290565b60006001600160a01b0384166000908152600260209081526040808320868452909152902054600160c01b900460ff16600381111561096157610961612802565b036109a65760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b6001600160a01b0383166000908152600260209081526040808320858452825291829020825161012081018452815463ffffffff80821683526401000000008204811694830194909452600160401b81049093169381019390935265ffffffffffff600160601b830481166060850152600160901b83041660808401529060a083019060ff600160c01b909104166003811115610a4557610a45612802565b6003811115610a5657610a56612802565b81528154600160c81b900460ff161515602082015260018201546040820152600282018054606090920191610a8a90612d8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab690612d8b565b8015610b035780601f10610ad857610100808354040283529160200191610b03565b820191906000526020600020905b815481529060010190602001808311610ae657829003601f168201915b505050505081525050905092915050565b604051630935e01b60e21b8152336004820152839081906001600160a01b038216906324d7806c90602401602060405180830381865afa158015610b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b809190612c6a565b610be05760405162461bcd60e51b815260206004820152602b60248201527f57616c6c6574206973206e6f7420616e2061646d696e6973747261746f72206660448201526a1bdc8818dbdb9d1c9858dd60aa1b6064820152608401610387565b60006001600160a01b0386166000908152600260209081526040808320888452909152902054600160c01b900460ff166003811115610c2157610c21612802565b03610c665760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b6000610c7860a0850160808601612c87565b6003811115610c8957610c89612802565b03610cfc5760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420696e76616c69642073746f726167652070726f746f60448201527f636f6c00000000000000000000000000000000000000000000000000000000006064820152608401610387565b6001600160a01b0385166000908152600260209081526040808320878452909152902054640100000000900463ffffffff161580610d7d5750610d426020840184612cd0565b6001600160a01b038616600090815260026020908152604080832088845290915290205463ffffffff91821664010000000090910490911611155b610dc95760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420646563726561736520746f74616c4d617800000000000000006044820152606401610387565b6001600160a01b0385166000908152600260209081526040808320878452909152902054600160401b900463ffffffff161580610e4b5750610e116040840160208501612cd0565b6001600160a01b038616600090815260026020908152604080832088845290915290205463ffffffff918216600160401b90910490911611155b610e975760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742064656372656173652077616c6c65744d6178000000000000006044820152606401610387565b610ea76080840160608501612ca8565b65ffffffffffff161580610ee85750610ec66080840160608501612ca8565b65ffffffffffff16610ede6060850160408601612ca8565b65ffffffffffff16105b610f5a5760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206861766520737461727444617465206772656174657220746860448201527f616e206f7220657175616c20746f20656e6444617465000000000000000000006064820152608401610387565b60408051610120810182526001600160a01b03871660009081526002602090815283822088835281529290205463ffffffff1681529080820190610fa090860186612cd0565b63ffffffff168152602001846020016020810190610fbe9190612cd0565b63ffffffff168152602001610fd96060860160408701612ca8565b65ffffffffffff168152602001610ff66080860160608701612ca8565b65ffffffffffff16815260200161101360a0860160808701612c87565b600381111561102457611024612802565b815260200161103960c0860160a08701612d27565b1515815260c0850135602082015260400161105760e0860186612d44565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160a01b03881681526002602090815260408083208984528252918290208451815492860151938601516060870151608088015165ffffffffffff908116600160901b027fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff91909216600160601b0271ffffffffffff0000000000000000000000001963ffffffff948516600160401b021671ffffffffffffffffffff0000000000000000199885166401000000000267ffffffffffffffff199098169490951693909317959095179590951691909117179182168317815560a085015190935091839160ff60c01b199091167fffffffffffffff00000000000000ffffffffffffffffffffffffffffffffffff90911617600160c01b8360038111156111b9576111b9612802565b021790555060c08201518154901515600160c81b0260ff60c81b1990911617815560e08201516001820155610100820151805161120091600284019160209091019061268b565b5050505050505050565b6001600160a01b03871660009081526002602090815260408083208984529091528120908154600160c01b900460ff16600381111561124b5761124b612802565b036112905760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8054600160601b900465ffffffffffff1615806112bd5750805442600160601b90910465ffffffffffff16105b6113095760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e206265666f726520737461727420646174650000006044820152606401610387565b8054600160901b900465ffffffffffff1615806113375750805442600160901b90910465ffffffffffff1610155b6113835760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20616674657220656e6420646174650000000000006044820152606401610387565b8054640100000000900463ffffffff1615806113c55750805463ffffffff64010000000082048116916113bc9161ffff8a169116612dbf565b63ffffffff1611155b6114375760405162461bcd60e51b815260206004820152602160248201527f546f6f206d616e792072657175657374656420666f72207468697320636c616960448201527f6d000000000000000000000000000000000000000000000000000000000000006064820152608401610387565b805460009061144d9063ffffffff166001612dbf565b825463ffffffff19811661ffff8a1663ffffffff9283160182161784556001840154911691501561158e5761ffff87168514801561148e575061ffff871683145b6114da5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e707574000000000000000000000000000000000000006044820152606401610387565b60005b8761ffff168110156115885760008787838181106114fd576114fd612de7565b90506020020160208101906115129190612cd0565b9050600086868481811061152857611528612de7565b905060200281019061153a9190612dfd565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092935061157e92508791508e90508d858561231b565b50506001016114dd565b50611698565b8154600160401b900463ffffffff16156116985781546001600160a01b038a1660009081526003602090815260408083208c84528252808320338452909152902054600160401b90910463ffffffff16906115ee9061ffff8a1690612e47565b11156116625760405162461bcd60e51b815260206004820152602260248201527f546f6f206d616e792072657175657374656420666f7220746869732077616c6c60448201527f65740000000000000000000000000000000000000000000000000000000000006064820152608401610387565b6001600160a01b03891660009081526003602090815260408083208b845282528083203384529091529020805461ffff89160190555b6040517fe00aab4b00000000000000000000000000000000000000000000000000000000815233600482015261ffff881660248201526000906001600160a01b038b169063e00aab4b906044016000604051808303816000875af1158015611704573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261172c9190810190612e75565b905060005b8861ffff168110156117e15760405180604001604052808b6001600160e01b0316815260200182856117639190612e47565b63ffffffff1690526001600160a01b038c166000908152600560205260408120845190919085908590811061179a5761179a612de7565b6020908102919091018101518252818101929092526040016000208251929091015163ffffffff16600160e01b026001600160e01b03909216919091179055600101611731565b5060405161ffff8916815289906001600160a01b038c16907f74f5d3254dfa39a7b1217a27d5d9b3e061eafe11720eca1cf499da2dc1eb12599060200160405180910390a350505050505050505050565b6001600160a01b03821660009081526002602090815260408083208484529091528120818154600160c01b900460ff16600381111561187357611873612802565b036118b85760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8054600160401b900463ffffffff1660000361193c5760405162461bcd60e51b815260206004820152603660248201527f43616e206f6e6c7920726574726965766520666f72206e6f6e2d6d65726b6c6560448201527f20636c61696d7320776974682077616c6c65744d6178000000000000000000006064820152608401610387565b50506001600160a01b0380831660009081526003602090815260408083208584528252808320938716835292905220549392505050565b6001600160a01b03851660009081526002602090815260408083208784529091528120908154600160c01b900460ff1660038111156119b4576119b4612802565b036119f95760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8054600160601b900465ffffffffffff161580611a265750805442600160601b90910465ffffffffffff16105b611a725760405162461bcd60e51b815260206004820152601d60248201527f5472616e73616374696f6e206265666f726520737461727420646174650000006044820152606401610387565b8054600160901b900465ffffffffffff161580611aa05750805442600160901b90910465ffffffffffff1610155b611aec5760405162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20616674657220656e6420646174650000000000006044820152606401610387565b8054640100000000900463ffffffff161580611b185750805463ffffffff640100000000820481169116105b611b8a5760405162461bcd60e51b815260206004820152602c60248201527f4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f60448201527f72207468697320636c61696d00000000000000000000000000000000000000006064820152608401610387565b600181015415611bd957611bd48187878787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061231b92505050565b611ccf565b8054600160401b900463ffffffff1615611ccf5780546001600160a01b03871660009081526003602090815260408083208984528252808320338452909152902054600160401b90910463ffffffff1611611c9c5760405162461bcd60e51b815260206004820152602d60248201527f4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f60448201527f7220746869732077616c6c6574000000000000000000000000000000000000006064820152608401610387565b6001600160a01b038616600090815260036020908152604080832088845282528083203384529091529020805460010190555b805463ffffffff8082166001011663ffffffff199091161781556040517f2928ca580000000000000000000000000000000000000000000000000000000081523360048201526000906001600160a01b03881690632928ca58906024016020604051808303816000875af1158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6f9190612f33565b6040805180820182526001600160e01b03808a168252855463ffffffff90811660208085019182526001600160a01b038e1660008181526005835287812089825290925286822095519251909316600160e01b0291909316179092559151929350889290917f5d404f369772cfab2b65717fca9bc2077efeab89a0dbec036bf0c13783154eb191a350505050505050565b6001600160a01b03831660009081526002602090815260408083208584529091528120818154600160c01b900460ff166003811115611e4157611e41612802565b03611e865760405162461bcd60e51b815260206004820152601560248201527410db185a5b481b9bdd081a5b9a5d1a585b1a5e9959605a1b6044820152606401610387565b8060010154600003611eda5760405162461bcd60e51b815260206004820152601c60248201527f43616e206f6e6c7920636865636b206d65726b6c6520636c61696d73000000006044820152606401610387565b50506001600160a01b0383166000908152600460209081526040808320858452825280832062ffffff600886901c168452909152902054600160ff83161b1615159392505050565b6001600160a01b03821660009081526005602090815260408083208484528252918290208251808401909352546001600160e01b038116808452600160e01b90910463ffffffff169183019190915260609190611fc15760405162461bcd60e51b815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610387565b6001600160a01b038416600090815260026020908152604080832084516001600160e01b031684528252808320815161012081018352815463ffffffff80821683526401000000008204811695830195909552600160401b81049094169281019290925265ffffffffffff600160601b840481166060840152600160901b8404166080830152909160a083019060ff600160c01b90910416600381111561206a5761206a612802565b600381111561207b5761207b612802565b81528154600160c81b900460ff1615156020820152600182015460408201526002820180546060909201916120af90612d8b565b80601f01602080910402602001604051908101604052809291908181526020018280546120db90612d8b565b80156121285780601f106120fd57610100808354040283529160200191612128565b820191906000526020600020905b81548152906001019060200180831161210b57829003601f168201915b505050919092525050604080516020810190915260008152919250600290508260a00151600381111561215d5761215d612802565b0361219c575060408051808201909152601481527f68747470733a2f2f617277656176652e6e65742f00000000000000000000000060208201526121ef565b60038260a0015160038111156121b4576121b4612802565b036121ef575060408051808201909152600781527f697066733a2f2f0000000000000000000000000000000000000000000000000060208201525b610100820151604051612206918391602001612f4c565b60405160208183030381529060405293508160c001516122575783612234846020015163ffffffff1661248c565b604051602001612245929190612f72565b60405160208183030381529060405293505b50505092915050565b60608167ffffffffffffffff81111561227b5761227b612e5f565b6040519080825280602002602001820160405280156122a4578160200160208202803683370190505b50905060005b82811015612312576122de86868686858181106122c9576122c9612de7565b90506020020160208101906101a89190612cd0565b8282815181106122f0576122f0612de7565b911515602092830291909101909101528061230a81612fca565b9150506122aa565b50949350505050565b6040516bffffffffffffffffffffffff193360601b1660208201526001600160e01b031960e084901b166034820152600090603801604051602081830303815290604052805190602001209050612377828760010154836125c9565b6123c35760405162461bcd60e51b815260206004820152601d60248201527f436f756c64206e6f7420766572696679206d65726b6c652070726f6f660000006044820152606401610387565b6001600160a01b0385166000908152600460209081526040808320878452825280832062ffffff600888901c16808552925290912054600160ff86161b808216156124505760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206d696e7465640000000000000000000000000000000000006044820152606401610387565b6001600160a01b039097166000908152600460209081526040808320988352978152878220938252929092529490209390941790925550505050565b6060816000036124cf57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156124f957806124e381612fca565b91506124f29050600a83612ff9565b91506124d3565b60008167ffffffffffffffff81111561251457612514612e5f565b6040519080825280601f01601f19166020018201604052801561253e576020820181803683370190505b5090505b84156125c15761255360018361300d565b9150612560600a86613024565b61256b906030612e47565b60f81b81838151811061258057612580612de7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506125ba600a86612ff9565b9450612542565b949350505050565b6000826125d685846125df565b14949350505050565b600081815b845181101561268357600085828151811061260157612601612de7565b60200260200101519050808311612643576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612670565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061267b81612fca565b9150506125e4565b509392505050565b82805461269790612d8b565b90600052602060002090601f0160209004810192826126b957600085556126ff565b82601f106126d257805160ff19168380011785556126ff565b828001600101855582156126ff579182015b828111156126ff5782518255916020019190600101906126e4565b5061270b92915061270f565b5090565b5b8082111561270b5760008155600101612710565b60006020828403121561273657600080fd5b81356001600160e01b03198116811461274e57600080fd5b9392505050565b80356001600160a01b038116811461276c57600080fd5b919050565b6000610100828403121561278457600080fd5b50919050565b6000806040838503121561279d57600080fd5b6127a683612755565b9150602083013567ffffffffffffffff8111156127c257600080fd5b6127ce85828601612771565b9150509250929050565b600080604083850312156127eb57600080fd5b6127f483612755565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6004811061283657634e487b7160e01b600052602160045260246000fd5b9052565b60005b8381101561285557818101518382015260200161283d565b83811115612864576000848401525b50505050565b6000815180845261288281602086016020860161283a565b601f01601f19169290920160200192915050565b602081526128ad60208201835163ffffffff169052565b600060208301516128c6604084018263ffffffff169052565b50604083015163ffffffff8116606084015250606083015165ffffffffffff8116608084015250608083015165ffffffffffff811660a08401525060a083015161291360c0840182612818565b5060c083015180151560e08401525060e083015161010083810191909152830151610120808401526125c161014084018261286a565b60008060006060848603121561295e57600080fd5b61296784612755565b925060208401359150604084013567ffffffffffffffff81111561298a57600080fd5b61299686828701612771565b9150509250925092565b60008083601f8401126129b257600080fd5b50813567ffffffffffffffff8111156129ca57600080fd5b6020830191508360208260051b85010111156129e557600080fd5b9250929050565b600080600080600080600060a0888a031215612a0757600080fd5b612a1088612755565b965060208801359550604088013561ffff81168114612a2e57600080fd5b9450606088013567ffffffffffffffff80821115612a4b57600080fd5b612a578b838c016129a0565b909650945060808a0135915080821115612a7057600080fd5b50612a7d8a828b016129a0565b989b979a50959850939692959293505050565b600080600060608486031215612aa557600080fd5b612aae84612755565b9250612abc60208501612755565b9150604084013590509250925092565b803563ffffffff8116811461276c57600080fd5b600080600080600060808688031215612af857600080fd5b612b0186612755565b945060208601359350612b1660408701612acc565b9250606086013567ffffffffffffffff811115612b3257600080fd5b612b3e888289016129a0565b969995985093965092949392505050565b600080600060608486031215612b6457600080fd5b612b6d84612755565b925060208401359150612b8260408501612acc565b90509250925092565b600060208284031215612b9d57600080fd5b61274e82612755565b60208152600061274e602083018461286a565b60008060008060608587031215612bcf57600080fd5b612bd885612755565b935060208501359250604085013567ffffffffffffffff811115612bfb57600080fd5b612c07878288016129a0565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015612c4d578351151583529284019291840191600101612c2f565b50909695505050505050565b8015158114612c6757600080fd5b50565b600060208284031215612c7c57600080fd5b815161274e81612c59565b600060208284031215612c9957600080fd5b81356004811061274e57600080fd5b600060208284031215612cba57600080fd5b813565ffffffffffff8116811461274e57600080fd5b600060208284031215612ce257600080fd5b61274e82612acc565b634e487b7160e01b600052601160045260246000fd5b60006001600160e01b03808316818103612d1d57612d1d612ceb565b6001019392505050565b600060208284031215612d3957600080fd5b813561274e81612c59565b6000808335601e19843603018112612d5b57600080fd5b83018035915067ffffffffffffffff821115612d7657600080fd5b6020019150368190038213156129e557600080fd5b600181811c90821680612d9f57607f821691505b60208210810361278457634e487b7160e01b600052602260045260246000fd5b600063ffffffff808316818516808303821115612dde57612dde612ceb565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612e1457600080fd5b83018035915067ffffffffffffffff821115612e2f57600080fd5b6020019150600581901b36038213156129e557600080fd5b60008219821115612e5a57612e5a612ceb565b500190565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612e8857600080fd5b825167ffffffffffffffff80821115612ea057600080fd5b818501915085601f830112612eb457600080fd5b815181811115612ec657612ec6612e5f565b8060051b604051601f19603f83011681018181108582111715612eeb57612eeb612e5f565b604052918252848201925083810185019188831115612f0957600080fd5b938501935b82851015612f2757845184529385019392850192612f0e565b98975050505050505050565b600060208284031215612f4557600080fd5b5051919050565b60008351612f5e81846020880161283a565b835190830190612dde81836020880161283a565b60008351612f8481846020880161283a565b7f2f000000000000000000000000000000000000000000000000000000000000009083019081528351612fbe81600184016020880161283a565b01600101949350505050565b600060018201612fdc57612fdc612ceb565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261300857613008612fe3565b500490565b60008282101561301f5761301f612ceb565b500390565b60008261303357613033612fe3565b50069056fea264697066735822122036a9685f79261920cebda45a8dbb9bdb76ddd5b19b4fd52c3d0e88fffbcd500c64736f6c634300080e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42F3BEF4 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xD5FDFE87 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xD5FDFE87 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xE9DC6375 EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0xF8A6137B EQ PUSH2 0x1FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42F3BEF4 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xBBF2A8C6 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xCDA08536 EQ PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF79AB39 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xF79AB39 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x1831A643 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x3512DA33 EQ PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x37B79DB EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0x2724 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x109 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x278A JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x27D8 JUMP JUMPDEST PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x2896 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0x2949 JUMP JUMPDEST PUSH2 0xB14 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14A PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0x29EC JUMP JUMPDEST PUSH2 0x120A JUMP JUMPDEST PUSH2 0x172 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x2A90 JUMP JUMPDEST PUSH2 0x1832 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST PUSH2 0x14A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AE0 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B4F JUMP JUMPDEST PUSH2 0x1E00 JUMP JUMPDEST PUSH2 0x109 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2B8B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0x27D8 JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x2BA6 JUMP JUMPDEST PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x2BB9 JUMP JUMPDEST PUSH2 0x2260 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x2C13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x38DBD06A00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x282 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0xE9DC637500000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x2B6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x935E01B PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x24D7806C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x307 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32B SWAP2 SWAP1 PUSH2 0x2C6A JUMP JUMPDEST PUSH2 0x390 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57616C6C6574206973206E6F7420616E2061646D696E6973747261746F722066 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1BDC8818DBDB9D1C9858DD PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A2 PUSH1 0xA0 DUP7 ADD PUSH1 0x80 DUP8 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3B3 JUMPI PUSH2 0x3B3 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420696E697469616C697A65207769746820696E76616C69642073 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x746F726167652070726F746F636F6C0000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH2 0x436 PUSH1 0x80 DUP6 ADD PUSH1 0x60 DUP7 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x477 JUMPI POP PUSH2 0x455 PUSH1 0x80 DUP6 ADD PUSH1 0x60 DUP7 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x46D PUSH1 0x60 DUP7 ADD PUSH1 0x40 DUP8 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0x4E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742068617665207374617274446174652067726561746572207468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616E206F7220657175616C20746F20656E644461746500000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD CALLDATALOAD ISZERO DUP1 PUSH2 0x50D JUMPI POP PUSH2 0x505 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND ISZERO JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742070726F7669646520626F7468206D696E747350657257616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x657420616E64206D65726B6C65526F6F74000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP2 PUSH2 0x5AC DUP4 PUSH2 0x2D01 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x100 SWAP3 SWAP1 SWAP3 EXP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 DUP2 MUL NOT SWAP1 SWAP4 AND SWAP2 DUP4 AND MUL OR SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH2 0x120 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP3 DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND SWAP3 POP SWAP1 DUP2 DUP2 ADD SWAP1 PUSH2 0x60C SWAP1 DUP9 ADD DUP9 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x62A SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x645 PUSH1 0x60 DUP9 ADD PUSH1 0x40 DUP10 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x662 PUSH1 0x80 DUP9 ADD PUSH1 0x60 DUP10 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x67F PUSH1 0xA0 DUP9 ADD PUSH1 0x80 DUP10 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x690 JUMPI PUSH2 0x690 PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6A5 PUSH1 0xC0 DUP9 ADD PUSH1 0xA0 DUP10 ADD PUSH2 0x2D27 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0xC0 DUP8 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x6C3 PUSH1 0xE0 DUP9 ADD DUP9 PUSH2 0x2D44 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP8 AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP4 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x90 SHL MUL PUSH32 0xFFFFFFFFFFFFFFFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH18 0xFFFFFFFFFFFF000000000000000000000000 NOT PUSH4 0xFFFFFFFF SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x40 SHL MUL AND PUSH18 0xFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT SWAP9 DUP6 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP9 AND SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 OR SWAP6 SWAP1 SWAP6 OR SWAP6 SWAP1 SWAP6 AND SWAP2 SWAP1 SWAP2 OR OR SWAP2 DUP3 AND DUP4 OR DUP2 SSTORE PUSH1 0xA0 DUP6 ADD MLOAD SWAP1 SWAP4 POP SWAP2 DUP4 SWAP2 PUSH1 0xFF PUSH1 0xC0 SHL NOT SWAP1 SWAP2 AND PUSH32 0xFFFFFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR PUSH1 0x1 PUSH1 0xC0 SHL DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x82E JUMPI PUSH2 0x82E PUSH2 0x2802 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 SLOAD SWAP1 ISZERO ISZERO PUSH1 0x1 PUSH1 0xC8 SHL MUL PUSH1 0xFF PUSH1 0xC8 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP1 MLOAD PUSH2 0x875 SWAP2 PUSH1 0x2 DUP5 ADD SWAP2 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x268B JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH32 0xCF76E1BEB8DCF887C917933E1D0970EAFADB9A69B82CFD5F44740A0DCE6F45A6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x920 PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 0xA0 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x961 JUMPI PUSH2 0x961 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x9A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH2 0x120 DUP2 ADD DUP5 MSTORE DUP2 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP5 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV SWAP1 SWAP4 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x60 SHL DUP4 DIV DUP2 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x90 SHL DUP4 DIV AND PUSH1 0x80 DUP5 ADD MSTORE SWAP1 PUSH1 0xA0 DUP4 ADD SWAP1 PUSH1 0xFF PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xA45 JUMPI PUSH2 0xA45 PUSH2 0x2802 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xA56 JUMPI PUSH2 0xA56 PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0xC8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xA8A SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAB6 SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB03 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAD8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB03 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAE6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x935E01B PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x24D7806C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB80 SWAP2 SWAP1 PUSH2 0x2C6A JUMP JUMPDEST PUSH2 0xBE0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57616C6C6574206973206E6F7420616E2061646D696E6973747261746F722066 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1BDC8818DBDB9D1C9858DD PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC21 JUMPI PUSH2 0xC21 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0xC66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC78 PUSH1 0xA0 DUP6 ADD PUSH1 0x80 DUP7 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC89 JUMPI PUSH2 0xC89 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0xCFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742073657420696E76616C69642073746F726167652070726F746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636F6C0000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0xD7D JUMPI POP PUSH2 0xD42 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP2 DUP3 AND PUSH5 0x100000000 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND GT ISZERO JUMPDEST PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420646563726561736520746F74616C4D61780000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0xE4B JUMPI POP PUSH2 0xE11 PUSH1 0x40 DUP5 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF SWAP2 DUP3 AND PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV SWAP1 SWAP2 AND GT ISZERO JUMPDEST PUSH2 0xE97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742064656372656173652077616C6C65744D617800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH2 0xEA7 PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0xEE8 JUMPI POP PUSH2 0xEC6 PUSH1 0x80 DUP5 ADD PUSH1 0x60 DUP6 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0xEDE PUSH1 0x60 DUP6 ADD PUSH1 0x40 DUP7 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0xF5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742068617665207374617274446174652067726561746572207468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616E206F7220657175616C20746F20656E644461746500000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x120 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP9 DUP4 MSTORE DUP2 MSTORE SWAP3 SWAP1 KECCAK256 SLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE SWAP1 DUP1 DUP3 ADD SWAP1 PUSH2 0xFA0 SWAP1 DUP7 ADD DUP7 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFBE SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFD9 PUSH1 0x60 DUP7 ADD PUSH1 0x40 DUP8 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF6 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x2CA8 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0xA0 DUP7 ADD PUSH1 0x80 DUP8 ADD PUSH2 0x2C87 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1024 JUMPI PUSH2 0x1024 PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1039 PUSH1 0xC0 DUP7 ADD PUSH1 0xA0 DUP8 ADD PUSH2 0x2D27 JUMP JUMPDEST ISZERO ISZERO DUP2 MSTORE PUSH1 0xC0 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x1057 PUSH1 0xE0 DUP7 ADD DUP7 PUSH2 0x2D44 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD DUP2 SLOAD SWAP3 DUP7 ADD MLOAD SWAP4 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x90 SHL MUL PUSH32 0xFFFFFFFFFFFFFFFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x60 SHL MUL PUSH18 0xFFFFFFFFFFFF000000000000000000000000 NOT PUSH4 0xFFFFFFFF SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x40 SHL MUL AND PUSH18 0xFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT SWAP9 DUP6 AND PUSH5 0x100000000 MUL PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP9 AND SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 OR SWAP6 SWAP1 SWAP6 OR SWAP6 SWAP1 SWAP6 AND SWAP2 SWAP1 SWAP2 OR OR SWAP2 DUP3 AND DUP4 OR DUP2 SSTORE PUSH1 0xA0 DUP6 ADD MLOAD SWAP1 SWAP4 POP SWAP2 DUP4 SWAP2 PUSH1 0xFF PUSH1 0xC0 SHL NOT SWAP1 SWAP2 AND PUSH32 0xFFFFFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR PUSH1 0x1 PUSH1 0xC0 SHL DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11B9 PUSH2 0x2802 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 SLOAD SWAP1 ISZERO ISZERO PUSH1 0x1 PUSH1 0xC8 SHL MUL PUSH1 0xFF PUSH1 0xC8 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP1 MLOAD PUSH2 0x1200 SWAP2 PUSH1 0x2 DUP5 ADD SWAP2 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x268B JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x124B JUMPI PUSH2 0x124B PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x1290 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x12BD JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0x1309 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E206265666F72652073746172742064617465000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x90 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x1337 JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x90 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT ISZERO JUMPDEST PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E20616674657220656E642064617465000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0x13C5 JUMPI POP DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 PUSH2 0x13BC SWAP2 PUSH2 0xFFFF DUP11 AND SWAP2 AND PUSH2 0x2DBF JUMP JUMPDEST PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST PUSH2 0x1437 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6F206D616E792072657175657374656420666F72207468697320636C6169 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x144D SWAP1 PUSH4 0xFFFFFFFF AND PUSH1 0x1 PUSH2 0x2DBF JUMP JUMPDEST DUP3 SLOAD PUSH4 0xFFFFFFFF NOT DUP2 AND PUSH2 0xFFFF DUP11 AND PUSH4 0xFFFFFFFF SWAP3 DUP4 AND ADD DUP3 AND OR DUP5 SSTORE PUSH1 0x1 DUP5 ADD SLOAD SWAP2 AND SWAP2 POP ISZERO PUSH2 0x158E JUMPI PUSH2 0xFFFF DUP8 AND DUP6 EQ DUP1 ISZERO PUSH2 0x148E JUMPI POP PUSH2 0xFFFF DUP8 AND DUP4 EQ JUMPDEST PUSH2 0x14DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420696E70757400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 PUSH2 0xFFFF AND DUP2 LT ISZERO PUSH2 0x1588 JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x14FD JUMPI PUSH2 0x14FD PUSH2 0x2DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1512 SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1528 JUMPI PUSH2 0x1528 PUSH2 0x2DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x153A SWAP2 SWAP1 PUSH2 0x2DFD JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP4 POP PUSH2 0x157E SWAP3 POP DUP8 SWAP2 POP DUP15 SWAP1 POP DUP14 DUP6 DUP6 PUSH2 0x231B JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x14DD JUMP JUMPDEST POP PUSH2 0x1698 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x1698 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP13 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP1 PUSH2 0x15EE SWAP1 PUSH2 0xFFFF DUP11 AND SWAP1 PUSH2 0x2E47 JUMP JUMPDEST GT ISZERO PUSH2 0x1662 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6F206D616E792072657175657374656420666F7220746869732077616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6574000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF DUP10 AND ADD SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE00AAB4B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0xFFFF DUP9 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND SWAP1 PUSH4 0xE00AAB4B SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x172C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2E75 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP9 PUSH2 0xFFFF AND DUP2 LT ISZERO PUSH2 0x17E1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP6 PUSH2 0x1763 SWAP2 SWAP1 PUSH2 0x2E47 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP5 MLOAD SWAP1 SWAP2 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x179A JUMPI PUSH2 0x179A PUSH2 0x2DE7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x1731 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xFFFF DUP10 AND DUP2 MSTORE DUP10 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP1 PUSH32 0x74F5D3254DFA39A7B1217A27D5D9B3E061EAFE11720ECA1CF499DA2DC1EB1259 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1873 JUMPI PUSH2 0x1873 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x18B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x0 SUB PUSH2 0x193C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920726574726965766520666F72206E6F6E2D6D65726B6C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20636C61696D7320776974682077616C6C65744D617800000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP1 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x19B4 JUMPI PUSH2 0x19B4 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x19F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x1A26 JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x60 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST PUSH2 0x1A72 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E206265666F72652073746172742064617465000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x90 SHL SWAP1 DIV PUSH6 0xFFFFFFFFFFFF AND ISZERO DUP1 PUSH2 0x1AA0 JUMPI POP DUP1 SLOAD TIMESTAMP PUSH1 0x1 PUSH1 0x90 SHL SWAP1 SWAP2 DIV PUSH6 0xFFFFFFFFFFFF AND LT ISZERO JUMPDEST PUSH2 0x1AEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73616374696F6E20616674657220656E642064617465000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO DUP1 PUSH2 0x1B18 JUMPI POP DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 AND LT JUMPDEST PUSH2 0x1B8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6178696D756D20746F6B656E7320616C7265616479206D696E74656420666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72207468697320636C61696D0000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD ISZERO PUSH2 0x1BD9 JUMPI PUSH2 0x1BD4 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x231B SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1CCF JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x1CCF JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND GT PUSH2 0x1C9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6178696D756D20746F6B656E7320616C7265616479206D696E74656420666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7220746869732077616C6C657400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST DUP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x1 ADD AND PUSH4 0xFFFFFFFF NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2928CA5800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x2928CA58 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D4B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D6F SWAP2 SWAP1 PUSH2 0x2F33 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP11 AND DUP3 MSTORE DUP6 SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 DUP4 MSTORE DUP8 DUP2 KECCAK256 DUP10 DUP3 MSTORE SWAP1 SWAP3 MSTORE DUP7 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP3 SWAP4 POP DUP9 SWAP3 SWAP1 SWAP2 PUSH32 0x5D404F369772CFAB2B65717FCA9BC2077EFEAB89A0DBEC036BF0C13783154EB1 SWAP2 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1E41 JUMPI PUSH2 0x1E41 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x1E86 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD PUSH1 0x0 SUB PUSH2 0x1EDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920636865636B206D65726B6C6520636C61696D7300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH3 0xFFFFFF PUSH1 0x8 DUP7 SWAP1 SHR AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xFF DUP4 AND SHL AND ISZERO ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP2 SWAP1 PUSH2 0x1FC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20646F6573206E6F74206578697374000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH2 0x120 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP4 MSTORE PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP6 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV SWAP1 SWAP5 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x60 SHL DUP5 DIV DUP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x90 SHL DUP5 DIV AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0xA0 DUP4 ADD SWAP1 PUSH1 0xFF PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP2 DIV AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x206A JUMPI PUSH2 0x206A PUSH2 0x2802 JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x207B JUMPI PUSH2 0x207B PUSH2 0x2802 JUMP JUMPDEST DUP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0xC8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x20AF SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x20DB SWAP1 PUSH2 0x2D8B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2128 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x20FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2128 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x210B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x2 SWAP1 POP DUP3 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x215D JUMPI PUSH2 0x215D PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x219C JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH32 0x68747470733A2F2F617277656176652E6E65742F000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x21EF JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x21B4 JUMPI PUSH2 0x21B4 PUSH2 0x2802 JUMP JUMPDEST SUB PUSH2 0x21EF JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH32 0x697066733A2F2F00000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2206 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0x2F4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP DUP2 PUSH1 0xC0 ADD MLOAD PUSH2 0x2257 JUMPI DUP4 PUSH2 0x2234 DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x248C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2245 SWAP3 SWAP2 SWAP1 PUSH2 0x2F72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x227B JUMPI PUSH2 0x227B PUSH2 0x2E5F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22A4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2312 JUMPI PUSH2 0x22DE DUP7 DUP7 DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x22C9 JUMPI PUSH2 0x22C9 PUSH2 0x2DE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0x2CD0 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x22F0 JUMPI PUSH2 0x22F0 PUSH2 0x2DE7 JUMP JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP1 PUSH2 0x230A DUP2 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x22AA JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x38 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x2377 DUP3 DUP8 PUSH1 0x1 ADD SLOAD DUP4 PUSH2 0x25C9 JUMP JUMPDEST PUSH2 0x23C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F756C64206E6F7420766572696679206D65726B6C652070726F6F66000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 PUSH3 0xFFFFFF PUSH1 0x8 DUP9 SWAP1 SHR AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xFF DUP7 AND SHL DUP1 DUP3 AND ISZERO PUSH2 0x2450 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C7265616479206D696E746564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x387 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP9 DUP4 MSTORE SWAP8 DUP2 MSTORE DUP8 DUP3 KECCAK256 SWAP4 DUP3 MSTORE SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP5 OR SWAP1 SWAP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0x24CF JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x24F9 JUMPI DUP1 PUSH2 0x24E3 DUP2 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP PUSH2 0x24F2 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x2FF9 JUMP JUMPDEST SWAP2 POP PUSH2 0x24D3 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2514 JUMPI PUSH2 0x2514 PUSH2 0x2E5F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x253E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x25C1 JUMPI PUSH2 0x2553 PUSH1 0x1 DUP4 PUSH2 0x300D JUMP JUMPDEST SWAP2 POP PUSH2 0x2560 PUSH1 0xA DUP7 PUSH2 0x3024 JUMP JUMPDEST PUSH2 0x256B SWAP1 PUSH1 0x30 PUSH2 0x2E47 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2580 JUMPI PUSH2 0x2580 PUSH2 0x2DE7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x25BA PUSH1 0xA DUP7 PUSH2 0x2FF9 JUMP JUMPDEST SWAP5 POP PUSH2 0x2542 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x25D6 DUP6 DUP5 PUSH2 0x25DF JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2683 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2601 JUMPI PUSH2 0x2601 PUSH2 0x2DE7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x2643 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x2670 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x267B DUP2 PUSH2 0x2FCA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25E4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2697 SWAP1 PUSH2 0x2D8B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x26B9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x26FF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x26D2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x26FF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x26FF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x26FF JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x26E4 JUMP JUMPDEST POP PUSH2 0x270B SWAP3 SWAP2 POP PUSH2 0x270F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x270B JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2710 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2736 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x276C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x279D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27A6 DUP4 PUSH2 0x2755 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27CE DUP6 DUP3 DUP7 ADD PUSH2 0x2771 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27F4 DUP4 PUSH2 0x2755 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x2836 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2855 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x283D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2864 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2882 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x283A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x28AD PUSH1 0x20 DUP3 ADD DUP4 MLOAD PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x28C6 PUSH1 0x40 DUP5 ADD DUP3 PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x60 DUP4 ADD MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x2913 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2818 JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD DUP1 ISZERO ISZERO PUSH1 0xE0 DUP5 ADD MSTORE POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 ADD MLOAD PUSH2 0x120 DUP1 DUP5 ADD MSTORE PUSH2 0x25C1 PUSH2 0x140 DUP5 ADD DUP3 PUSH2 0x286A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x295E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2967 DUP5 PUSH2 0x2755 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x298A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2996 DUP7 DUP3 DUP8 ADD PUSH2 0x2771 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x29B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x29E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2A07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A10 DUP9 PUSH2 0x2755 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x2A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2A4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A57 DUP12 DUP4 DUP13 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2A70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A7D DUP11 DUP3 DUP12 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2AA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AAE DUP5 PUSH2 0x2755 JUMP JUMPDEST SWAP3 POP PUSH2 0x2ABC PUSH1 0x20 DUP6 ADD PUSH2 0x2755 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x276C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2AF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B01 DUP7 PUSH2 0x2755 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2B16 PUSH1 0x40 DUP8 ADD PUSH2 0x2ACC JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B3E DUP9 DUP3 DUP10 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B6D DUP5 PUSH2 0x2755 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x2B82 PUSH1 0x40 DUP6 ADD PUSH2 0x2ACC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x274E DUP3 PUSH2 0x2755 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x274E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x286A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2BCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BD8 DUP6 PUSH2 0x2755 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C07 DUP8 DUP3 DUP9 ADD PUSH2 0x29A0 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2C4D JUMPI DUP4 MLOAD ISZERO ISZERO DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2C2F JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2C67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x274E DUP2 PUSH2 0x2C59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x274E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x274E DUP3 PUSH2 0x2ACC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x2D1D JUMPI PUSH2 0x2D1D PUSH2 0x2CEB JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x274E DUP2 PUSH2 0x2C59 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2D76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x29E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2D9F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2784 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x2DDE JUMPI PUSH2 0x2DDE PUSH2 0x2CEB JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2E14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2E2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x29E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2E5A JUMPI PUSH2 0x2E5A PUSH2 0x2CEB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2EA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2EB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2EC6 JUMPI PUSH2 0x2EC6 PUSH2 0x2E5F JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2EEB JUMPI PUSH2 0x2EEB PUSH2 0x2E5F JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x2F09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x2F27 JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x2F0E JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2F5E DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2DDE DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2F84 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST PUSH32 0x2F00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP4 MLOAD PUSH2 0x2FBE DUP2 PUSH1 0x1 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x283A JUMP JUMPDEST ADD PUSH1 0x1 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2FDC JUMPI PUSH2 0x2FDC PUSH2 0x2CEB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3008 JUMPI PUSH2 0x3008 PUSH2 0x2FE3 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x301F JUMPI PUSH2 0x301F PUSH2 0x2CEB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3033 JUMPI PUSH2 0x3033 PUSH2 0x2FE3 JUMP JUMPDEST POP MOD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xA9 PUSH9 0x5F79261920CEBDA45A DUP14 0xBB SWAP12 0xDB PUSH23 0xDDD5B19B4FD52C3D0E88FFFBCD500C64736F6C63430008 0xE STOP CALLER ",
							"sourceMap": "703:13886:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2304:303;;;;;;:::i;:::-;;:::i;:::-;;;612:14:16;;605:22;587:41;;575:2;560:18;2304:303:14;;;;;;;;3221:1452;;;;;;:::i;:::-;;:::i;:::-;;;1606:25:16;;;1594:2;1579:18;3221:1452:14;1460:177:16;6639:312:14;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4738:1617::-;;;;;;:::i;:::-;;:::i;:::-;;10469:2189;;;;;;:::i;:::-;;:::i;8186:486::-;;;;;;:::i;:::-;;:::i;:::-;;;6872:10:16;6860:23;;;6842:42;;6830:2;6815:18;8186:486:14;6698:192:16;8730:1676:14;;;;;;:::i;:::-;;:::i;7019:654::-;;;;;;:::i;:::-;;:::i;6422:155::-;;;;;;:::i;:::-;-1:-1:-1;;;;;6534:36:14;6508:7;6534:36;;;:12;:36;;;;;;-1:-1:-1;;;;;6534:36:14;;6422:155;13697:890;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7743:376::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2304:303::-;2398:4;-1:-1:-1;;;;;;2421:49:14;;2436:34;2421:49;;:123;;-1:-1:-1;;;;;;;2486:58:14;;2501:43;2486:58;2421:123;:179;;;-1:-1:-1;;;;;;;2560:40:14;;2575:25;2560:40;2421:179;2414:186;2304:303;-1:-1:-1;;2304:303:14:o;3221:1452::-;3047:39;;-1:-1:-1;;;3047:39:14;;3075:10;3047:39;;;9841:74:16;3414:7:14;;3381:22;;;;-1:-1:-1;;;;;3047:27:14;;;;;9814:18:16;;3047:39:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3039:95;;;;-1:-1:-1;;;3039:95:14;;10501:2:16;3039:95:14;;;10483:21:16;10540:2;10520:18;;;10513:30;10579:34;10559:18;;;10552:62;-1:-1:-1;;;10630:18:16;;;10623:41;10681:19;;3039:95:14;;;;;;;;;3501:23:::1;3466:31;::::0;;;::::1;::::0;::::1;;:::i;:::-;:58;;;;;;;;:::i;:::-;::::0;3458:118:::1;;;::::0;-1:-1:-1;;;3458:118:14;;11194:2:16;3458:118:14::1;::::0;::::1;11176:21:16::0;11233:2;11213:18;;;11206:30;11272:34;11252:18;;;11245:62;11343:17;11323:18;;;11316:45;11378:19;;3458:118:14::1;10992:411:16::0;3458:118:14::1;3594:23;::::0;;;::::1;::::0;::::1;;:::i;:::-;:28;;::::0;;:83:::1;;-1:-1:-1::0;3654:23:14::1;::::0;;;::::1;::::0;::::1;;:::i;:::-;3626:51;;:25;::::0;;;::::1;::::0;::::1;;:::i;:::-;:51;;;3594:83;3586:150;;;::::0;-1:-1:-1;;;3586:150:14;;11895:2:16;3586:150:14::1;::::0;::::1;11877:21:16::0;11934:2;11914:18;;;11907:30;11973:34;11953:18;;;11946:62;12044:24;12024:18;;;12017:52;12086:19;;3586:150:14::1;11693:418:16::0;3586:150:14::1;3754:26;::::0;::::1;;:32:::0;;:66:::1;;-1:-1:-1::0;3790:25:14::1;::::0;;;::::1;::::0;::::1;;:::i;:::-;:30;;::::0;3754:66:::1;3746:128;;;::::0;-1:-1:-1;;;3746:128:14;;12507:2:16;3746:128:14::1;::::0;::::1;12489:21:16::0;12546:2;12526:18;;;12519:30;12585:34;12565:18;;;12558:62;12656:19;12636:18;;;12629:47;12693:19;;3746:128:14::1;12305:413:16::0;3746:128:14::1;-1:-1:-1::0;;;;;3932:36:14;::::1;;::::0;;;:12:::1;:36;::::0;;;;:38;;-1:-1:-1;;;;;3932:38:14::1;::::0;::::1;::::0;::::1;:::i;:::-;::::0;;::::1;::::0;;;::::1;-1:-1:-1::0;;;;;3932:38:14;;::::1;;::::0;;::::1;::::0;;::::1;;;::::0;;;-1:-1:-1;;;;;3999:36:14;::::1;-1:-1:-1::0;3999:36:14;;;-1:-1:-1;3999:36:14::1;::::0;;;;;;;;4118:445;;::::1;::::0;::::1;::::0;;;;;;3999:36;;;::::1;::::0;-1:-1:-1;4118:445:14;;;::::1;::::0;4170:24:::1;::::0;;::::1;::::0;::::1;:::i;:::-;4118:445;;;;;;4219:15;:25;;;;;;;;;;:::i;:::-;4118:445;;::::0;;::::1;;4269:25;::::0;;;::::1;::::0;::::1;;:::i;:::-;4118:445;;::::0;;::::1;;4317:23;::::0;;;::::1;::::0;::::1;;:::i;:::-;4118:445;;::::0;;::::1;;4371:31;::::0;;;::::1;::::0;::::1;;:::i;:::-;4118:445;;;;;;;;:::i;:::-;::::0;;::::1;;4427:25;::::0;;;::::1;::::0;::::1;;:::i;:::-;4118:445;;::::0;;4478:26:::1;::::0;::::1;;4118:445;::::0;::::1;::::0;;;4528:24:::1;;::::0;::::1;4478:15:::0;4528:24:::1;:::i;:::-;4118:445;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;-1:-1:-1;4118:445:14;;;;-1:-1:-1;;;;;;;4074:31:14;::::1;::::0;;:7:::1;:31;::::0;;;;;;;-1:-1:-1;;;;;4074:41:14;::::1;::::0;;;;;;;;:489;;;;;;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;-1:-1:-1::0;;;4074:489:14::1;::::0;;;;::::1;-1:-1:-1::0;;;4074:489:14::1;-1:-1:-1::0;;4074:489:14::1;::::0;;::::1;-1:-1:-1::0;;;4074:489:14::1;::::0;-1:-1:-1;;4074:489:14;;::::1;::::0;::::1;-1:-1:-1::0;;4074:489:14;;;;;;::::1;::::0;;;;;;;::::1;::::0;;;;;;;;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;:41;;-1:-1:-1;4074:489:14;:41;;-1:-1:-1;;;;4074:489:14;;;;;;;;-1:-1:-1;;;4074:489:14;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;4074:489:14::1;::::0;::::1;::::0;;;;::::1;;-1:-1:-1::0;;;4074:489:14::1;-1:-1:-1::0;;;;4074:489:14;;::::1;;::::0;;::::1;::::0;::::1;::::0;-1:-1:-1;4074:489:14;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;;4579:62:14::1;::::0;4630:10:::1;9841:74:16::0;;-1:-1:-1;;;;;4579:62:14;::::1;::::0;-1:-1:-1;;;;;;4579:62:14;::::1;::::0;::::1;::::0;9829:2:16;9814:18;4579:62:14::1;;;;;;;-1:-1:-1::0;;;;;4651:15:14::1;::::0;3221:1452;-1:-1:-1;;;;;3221:1452:14:o;6639:312::-;6740:12;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6740:12:14;6835:23;-1:-1:-1;;;;;6772:31:14;;;;;;:7;:31;;;;;;;;:43;;;;;;;;:59;-1:-1:-1;;;6772:59:14;;;;:86;;;;;;;;:::i;:::-;;6764:120;;;;-1:-1:-1;;;6764:120:14;;14142:2:16;6764:120:14;;;14124:21:16;14181:2;14161:18;;;14154:30;-1:-1:-1;;;14200:18:16;;;14193:51;14261:18;;6764:120:14;13940:345:16;6764:120:14;-1:-1:-1;;;;;6901:31:14;;;;;;:7;:31;;;;;;;;:43;;;;;;;;;6894:50;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6894:50:14;;;;;;;;;;;;;-1:-1:-1;;;6894:50:14;;;;;;;;-1:-1:-1;;;6894:50:14;;;;;;;6901:43;6894:50;;;;;-1:-1:-1;;;6894:50:14;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;6894:50:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6639:312;;;;:::o;4738:1617::-;3047:39;;-1:-1:-1;;;3047:39:14;;3075:10;3047:39;;;9841:74:16;4922:22:14;;;;-1:-1:-1;;;;;3047:27:14;;;;;9814:18:16;;3047:39:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3039:95;;;;-1:-1:-1;;;3039:95:14;;10501:2:16;3039:95:14;;;10483:21:16;10540:2;10520:18;;;10513:30;10579:34;10559:18;;;10552:62;-1:-1:-1;;;10630:18:16;;;10623:41;10681:19;;3039:95:14;10299:407:16;3039:95:14;5052:23:::1;-1:-1:-1::0;;;;;4989:31:14;::::1;;::::0;;;:7:::1;:31;::::0;;;;;;;:43;;;;;;;;:59;-1:-1:-1;;;4989:59:14;::::1;;;:86;::::0;::::1;;;;;;:::i;:::-;::::0;4981:120:::1;;;::::0;-1:-1:-1;;;4981:120:14;;14142:2:16;4981:120:14::1;::::0;::::1;14124:21:16::0;14181:2;14161:18;;;14154:30;-1:-1:-1;;;14200:18:16;;;14193:51;14261:18;;4981:120:14::1;13940:345:16::0;4981:120:14::1;5154:23;5119:31;::::0;;;::::1;::::0;::::1;;:::i;:::-;:58;;;;;;;;:::i;:::-;::::0;5111:106:::1;;;::::0;-1:-1:-1;;;5111:106:14;;14934:2:16;5111:106:14::1;::::0;::::1;14916:21:16::0;14973:2;14953:18;;;14946:30;15012:34;14992:18;;;14985:62;15083:5;15063:18;;;15056:33;15106:19;;5111:106:14::1;14732:399:16::0;5111:106:14::1;-1:-1:-1::0;;;;;5235:31:14;::::1;;::::0;;;:7:::1;:31;::::0;;;;;;;:43;;;;;;;;:52;;;::::1;;;:57:::0;;:142:::1;;-1:-1:-1::0;5353:24:14::1;;::::0;::::1;:15:::0;:24:::1;:::i;:::-;-1:-1:-1::0;;;;;5297:31:14;::::1;;::::0;;;:7:::1;:31;::::0;;;;;;;:43;;;;;;;;:52;:80:::1;::::0;;::::1;:52:::0;;;::::1;::::0;;::::1;:80;;5235:142;5227:179;;;::::0;-1:-1:-1;;;5227:179:14;;15338:2:16;5227:179:14::1;::::0;::::1;15320:21:16::0;15377:2;15357:18;;;15350:30;15416:26;15396:18;;;15389:54;15460:18;;5227:179:14::1;15136:348:16::0;5227:179:14::1;-1:-1:-1::0;;;;;5424:31:14;::::1;;::::0;;;:7:::1;:31;::::0;;;;;;;:43;;;;;;;;:53;-1:-1:-1;;;5424:53:14;::::1;;;:58:::0;;:144:::1;;-1:-1:-1::0;5543:25:14::1;::::0;;;::::1;::::0;::::1;;:::i;:::-;-1:-1:-1::0;;;;;5486:31:14;::::1;;::::0;;;:7:::1;:31;::::0;;;;;;;:43;;;;;;;;:53;:82:::1;::::0;;::::1;-1:-1:-1::0;;;5486:53:14;;::::1;::::0;;::::1;:82;;5424:144;5416:182;;;::::0;-1:-1:-1;;;5416:182:14;;15691:2:16;5416:182:14::1;::::0;::::1;15673:21:16::0;15730:2;15710:18;;;15703:30;15769:27;15749:18;;;15742:55;15814:18;;5416:182:14::1;15489:349:16::0;5416:182:14::1;5616:23;::::0;;;::::1;::::0;::::1;;:::i;:::-;:28;;::::0;;:83:::1;;-1:-1:-1::0;5676:23:14::1;::::0;;;::::1;::::0;::::1;;:::i;:::-;5648:51;;:25;::::0;;;::::1;::::0;::::1;;:::i;:::-;:51;;;5616:83;5608:150;;;::::0;-1:-1:-1;;;5608:150:14;;11895:2:16;5608:150:14::1;::::0;::::1;11877:21:16::0;11934:2;11914:18;;;11907:30;11973:34;11953:18;;;11946:62;12044:24;12024:18;;;12017:52;12086:19;;5608:150:14::1;11693:418:16::0;5608:150:14::1;5855:493;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;5882:31:14;::::1;-1:-1:-1::0;5882:31:14;;;:7:::1;:31;::::0;;;;;;:43;;;;;;;;:49;::::1;;5855:493:::0;;;;;::::1;::::0;5955:24:::1;::::0;;::::1;:15:::0;:24:::1;:::i;:::-;5855:493;;;;;;6004:15;:25;;;;;;;;;;:::i;:::-;5855:493;;::::0;;::::1;;6054:25;::::0;;;::::1;::::0;::::1;;:::i;:::-;5855:493;;::::0;;::::1;;6102:23;::::0;;;::::1;::::0;::::1;;:::i;:::-;5855:493;;::::0;;::::1;;6156:31;::::0;;;::::1;::::0;::::1;;:::i;:::-;5855:493;;;;;;;;:::i;:::-;::::0;;::::1;;6212:25;::::0;;;::::1;::::0;::::1;;:::i;:::-;5855:493;;::::0;;6263:26:::1;::::0;::::1;;5855:493;::::0;::::1;::::0;;;6313:24:::1;;::::0;::::1;6263:15:::0;6313:24:::1;:::i;:::-;5855:493;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;-1:-1:-1;5855:493:14;;;;-1:-1:-1;;;;;;;5809:31:14;::::1;::::0;;:7:::1;:31;::::0;;;;;;;:43;;;;;;;;;:539;;;;;;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;-1:-1:-1::0;;;5809:539:14::1;::::0;;;;::::1;-1:-1:-1::0;;;5809:539:14::1;-1:-1:-1::0;;5809:539:14::1;::::0;;::::1;-1:-1:-1::0;;;5809:539:14::1;::::0;-1:-1:-1;;5809:539:14;;::::1;::::0;::::1;-1:-1:-1::0;;5809:539:14;;;;;;::::1;::::0;;;;;;;::::1;::::0;;;;;;;;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;:43;;-1:-1:-1;5809:539:14;:43;;-1:-1:-1;;;;5809:539:14;;;;;;;;-1:-1:-1;;;5809:539:14;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;5809:539:14::1;::::0;::::1;::::0;;;;::::1;;-1:-1:-1::0;;;5809:539:14::1;-1:-1:-1::0;;;;5809:539:14;;::::1;;::::0;;::::1;::::0;::::1;::::0;-1:-1:-1;5809:539:14;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;;;;;;;;4738:1617:14:o;10469:2189::-;-1:-1:-1;;;;;10674:31:14;;10652:19;10674:31;;;:7;:31;;;;;;;;:43;;;;;;;;;10781:21;;-1:-1:-1;;;10781:21:14;;;;:48;;;;;;;;:::i;:::-;;10773:82;;;;-1:-1:-1;;;10773:82:14;;14142:2:16;10773:82:14;;;14124:21:16;14181:2;14161:18;;;14154:30;-1:-1:-1;;;14200:18:16;;;14193:51;14261:18;;10773:82:14;13940:345:16;10773:82:14;10902:15;;-1:-1:-1;;;10902:15:14;;;;:20;;:57;;-1:-1:-1;10926:15:14;;10944;-1:-1:-1;;;10926:15:14;;;;;:33;10902:57;10894:99;;;;-1:-1:-1;;;10894:99:14;;16045:2:16;10894:99:14;;;16027:21:16;16084:2;16064:18;;;16057:30;16123:31;16103:18;;;16096:59;16172:18;;10894:99:14;15843:353:16;10894:99:14;11011:13;;-1:-1:-1;;;11011:13:14;;;;:18;;:54;;-1:-1:-1;11033:13:14;;11050:15;-1:-1:-1;;;11033:13:14;;;;;:32;;11011:54;11003:93;;;;-1:-1:-1;;;11003:93:14;;16403:2:16;11003:93:14;;;16385:21:16;16442:2;16422:18;;;16415:30;16481:28;16461:18;;;16454:56;16527:18;;11003:93:14;16201:350:16;11003:93:14;11141:14;;;;;;;:19;;:62;;-1:-1:-1;11189:14:14;;;;;;;;;11164:21;;;;;;:11;:21;:::i;:::-;:39;;;;11141:62;11133:108;;;;-1:-1:-1;;;11133:108:14;;16991:2:16;11133:108:14;;;16973:21:16;17030:2;17010:18;;;17003:30;17069:34;17049:18;;;17042:62;17140:3;17120:18;;;17113:31;17161:19;;11133:108:14;16789:397:16;11133:108:14;11283:11;;11260:20;;11283:13;;:11;;;:13;:::i;:::-;11317:24;;-1:-1:-1;;11317:24:14;;;;;11260:36;11317:24;;;;;;;;;-1:-1:-1;11358:16:14;;;11260:36;;;-1:-1:-1;11358:22:14;11354:887;;11404:31;;;;;:67;;;;-1:-1:-1;11439:32:14;;;;;11404:67;11396:93;;;;-1:-1:-1;;;11396:93:14;;17393:2:16;11396:93:14;;;17375:21:16;17432:2;17412:18;;;17405:30;17471:15;17451:18;;;17444:43;17504:18;;11396:93:14;17191:337:16;11396:93:14;11535:6;11530:322;11551:9;11547:13;;:1;:13;11530:322;;;11582:16;11601:11;;11613:1;11601:14;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;11582:33;;11633:28;11664:12;;11677:1;11664:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;11633:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11633:46:14;;-1:-1:-1;11714:88:14;;-1:-1:-1;11736:5:14;;-1:-1:-1;11743:22:14;;-1:-1:-1;11767:10:14;11779:9;11633:46;11714:21;:88::i;:::-;-1:-1:-1;;11832:3:14;;11530:322;;;;11354:887;;;11917:15;;-1:-1:-1;;;11917:15:14;;;;:20;11913:305;;12042:15;;-1:-1:-1;;;;;11965:39:14;;12042:15;11965:39;;;:15;:39;;;;;;;;:51;;;;;;;;12017:10;11965:63;;;;;;;;-1:-1:-1;;;12042:15:14;;;;;;11965:73;;;;;;;:::i;:::-;:92;;11957:139;;;;-1:-1:-1;;;11957:139:14;;18607:2:16;11957:139:14;;;18589:21:16;18646:2;18626:18;;;18619:30;18685:34;18665:18;;;18658:62;18756:4;18736:18;;;18729:32;18778:19;;11957:139:14;18405:398:16;11957:139:14;-1:-1:-1;;;;;12125:39:14;;;;;;:15;:39;;;;;;;;:51;;;;;;;;12177:10;12125:63;;;;;;;:76;;;;;;;;11913:305;12281:84;;;;;12343:10;12281:84;;;18980:74:16;19102:6;19090:19;;19070:18;;;19063:47;12250:28:14;;-1:-1:-1;;;;;12281:61:14;;;;;18953:18:16;;12281:84:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12281:84:14;;;;;;;;;;;;:::i;:::-;12250:115;;12380:6;12375:200;12396:9;12392:13;;:1;:13;12375:200;;;12478:55;;;;;;;;12497:10;-1:-1:-1;;;;;12478:55:14;;;;;12530:1;12517:12;:14;;;;:::i;:::-;12478:55;;;;-1:-1:-1;;;;;12423:36:14;;;;;;:12;:36;;;;;12460:14;;12423:36;;;12460:11;;12472:1;;12460:14;;;;;;:::i;:::-;;;;;;;;;;;;12423:52;;;;;;;;;;;-1:-1:-1;12423:52:14;:110;;;;;;;;;-1:-1:-1;;;12423:110:14;-1:-1:-1;;;;;12423:110:14;;;;;;;;;;12559:3;12375:200;;;-1:-1:-1;12590:61:14;;20594:6:16;20582:19;;20564:38;;12629:10:14;;-1:-1:-1;;;;;12590:61:14;;;;;20552:2:16;20537:18;12590:61:14;;;;;;;10642:2016;;;10469:2189;;;;;;;:::o;8186:486::-;-1:-1:-1;;;;;8348:31:14;;8308:6;8348:31;;;:7;:31;;;;;;;;:43;;;;;;;;8308:6;8409:21;;-1:-1:-1;;;8409:21:14;;;;:48;;;;;;;;:::i;:::-;;8401:82;;;;-1:-1:-1;;;8401:82:14;;14142:2:16;8401:82:14;;;14124:21:16;14181:2;14161:18;;;14154:30;-1:-1:-1;;;14200:18:16;;;14193:51;14261:18;;8401:82:14;13940:345:16;8401:82:14;8501:15;;-1:-1:-1;;;8501:15:14;;;;;:20;8493:87;;;;-1:-1:-1;;;8493:87:14;;20815:2:16;8493:87:14;;;20797:21:16;20854:2;20834:18;;;20827:30;20893:34;20873:18;;;20866:62;20964:24;20944:18;;;20937:52;21006:19;;8493:87:14;20613:418:16;8493:87:14;-1:-1:-1;;;;;;;8605:39:14;;;;;;;:15;:39;;;;;;;;:51;;;;;;;;:59;;;;;;;;;;8186:486;;;;;:::o;8730:1676::-;-1:-1:-1;;;;;8896:31:14;;8874:19;8896:31;;;:7;:31;;;;;;;;:43;;;;;;;;;8994:21;;-1:-1:-1;;;8994:21:14;;;;:48;;;;;;;;:::i;:::-;;8986:82;;;;-1:-1:-1;;;8986:82:14;;14142:2:16;8986:82:14;;;14124:21:16;14181:2;14161:18;;;14154:30;-1:-1:-1;;;14200:18:16;;;14193:51;14261:18;;8986:82:14;13940:345:16;8986:82:14;9115:15;;-1:-1:-1;;;9115:15:14;;;;:20;;:57;;-1:-1:-1;9139:15:14;;9157;-1:-1:-1;;;9139:15:14;;;;;:33;9115:57;9107:99;;;;-1:-1:-1;;;9107:99:14;;16045:2:16;9107:99:14;;;16027:21:16;16084:2;16064:18;;;16057:30;16123:31;16103:18;;;16096:59;16172:18;;9107:99:14;15843:353:16;9107:99:14;9224:13;;-1:-1:-1;;;9224:13:14;;;;:18;;:54;;-1:-1:-1;9246:13:14;;9263:15;-1:-1:-1;;;9246:13:14;;;;;:32;;9224:54;9216:93;;;;-1:-1:-1;;;9216:93:14;;16403:2:16;9216:93:14;;;16385:21:16;16442:2;16422:18;;;16415:30;16481:28;16461:18;;;16454:56;16527:18;;9216:93:14;16201:350:16;9216:93:14;9354:14;;;;;;;:19;;:51;;-1:-1:-1;9391:14:14;;;;;;;;9377:11;;:28;9354:51;9346:108;;;;-1:-1:-1;;;9346:108:14;;21238:2:16;9346:108:14;;;21220:21:16;21277:2;21257:18;;;21250:30;21316:34;21296:18;;;21289:62;21387:14;21367:18;;;21360:42;21419:19;;9346:108:14;21036:408:16;9346:108:14;9469:16;;;;:22;9465:523;;9534:88;9556:5;9563:22;9587:10;9599:9;9610:11;;9534:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9534:21:14;;-1:-1:-1;;;9534:88:14:i;:::-;9465:523;;;9688:15;;-1:-1:-1;;;9688:15:14;;;;:20;9684:294;;9802:15;;-1:-1:-1;;;;;9736:39:14;;9802:15;9736:39;;;:15;:39;;;;;;;;:51;;;;;;;;9788:10;9736:63;;;;;;;;-1:-1:-1;;;9802:15:14;;;;;-1:-1:-1;9728:139:14;;;;-1:-1:-1;;;9728:139:14;;21651:2:16;9728:139:14;;;21633:21:16;21690:2;21670:18;;;21663:30;21729:34;21709:18;;;21702:62;21800:15;21780:18;;;21773:43;21833:19;;9728:139:14;21449:409:16;9728:139:14;-1:-1:-1;;;;;9896:39:14;;;;;;:15;:39;;;;;;;;:51;;;;;;;;9948:10;9896:63;;;;;;;:65;;;;;;9684:294;10008:13;;;;;;;;;-1:-1:-1;;10008:13:14;;;;;;10074:68;;;;;10131:10;10074:68;;;9841:74:16;-1:-1:-1;;;;;;;10074:56:14;;;;;9814:18:16;;10074:68:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10294:44;;;;;;;;-1:-1:-1;;;;;10294:44:14;;;;;10326:11;;;;;;10294:44;;;;;;;-1:-1:-1;;;;;10243:36:14;;-1:-1:-1;10243:36:14;;;:12;:36;;;;;:48;;;;;;;;;:95;;;;;;;-1:-1:-1;;;10243:95:14;;;;;;;;;10354:45;;10053:89;;-1:-1:-1;10313:10:14;;10243:36;;10354:45;;;8864:1542;;8730:1676;;;;;:::o;7019:654::-;-1:-1:-1;;;;;7180:31:14;;7142:4;7180:31;;;:7;:31;;;;;;;;:43;;;;;;;;7142:4;7241:21;;-1:-1:-1;;;7241:21:14;;;;:48;;;;;;;;:::i;:::-;;7233:82;;;;-1:-1:-1;;;7233:82:14;;14142:2:16;7233:82:14;;;14124:21:16;14181:2;14161:18;;;14154:30;-1:-1:-1;;;14200:18:16;;;14193:51;14261:18;;7233:82:14;13940:345:16;7233:82:14;7333:5;:16;;;:22;;7325:63;;;;-1:-1:-1;;;7325:63:14;;22254:2:16;7325:63:14;;;22236:21:16;22293:2;22273:18;;;22266:30;22332;22312:18;;;22305:58;22380:18;;7325:63:14;22052:352:16;7325:63:14;-1:-1:-1;;;;;;;7475:41:14;;7398:22;7475:41;;;:17;:41;;;;;;;;:53;;;;;;;;7423:14;7436:1;7423:14;;;;7475:69;;;;;;;;7576:1;1007:4;7582:30;;7576:37;7630:31;:36;;7019:654;;;;;:::o;13697:890::-;-1:-1:-1;;;;;13855:36:14;;13824:28;13855:36;;;:12;:36;;;;;;;;:45;;;;;;;;;13824:76;;;;;;;;;-1:-1:-1;;;;;13824:76:14;;;;;-1:-1:-1;;;13824:76:14;;;;;;;;;;;;13795:17;;13824:76;13910:58;;;;-1:-1:-1;;;13910:58:14;;22611:2:16;13910:58:14;;;22593:21:16;22650:2;22630:18;;;22623:30;22689:22;22669:18;;;22662:50;22729:18;;13910:58:14;22409:344:16;13910:58:14;-1:-1:-1;;;;;13999:31:14;;13978:18;13999:31;;;:7;:31;;;;;;;;14031:21;;-1:-1:-1;;;;;13999:54:14;;;;;;;;13978:75;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;13978:75:14;;;;;;;;;;;;;-1:-1:-1;;;13978:75:14;;;;;;;;-1:-1:-1;;;13978:75:14;;;;;;;;;;;;;;-1:-1:-1;;;13978:75:14;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;13978:75:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;13978:75:14;;;;-1:-1:-1;;14064:25:14;;;;;;;;;:20;:25;;13978:75;;-1:-1:-1;14128:23:14;;-1:-1:-1;14103:5:14;:21;;;:48;;;;;;;;:::i;:::-;;14099:204;;-1:-1:-1;14176:14:14;;;;;;;;;;;;;;;;;14099:204;;;14236:20;14211:5;:21;;;:45;;;;;;;;:::i;:::-;;14207:96;;-1:-1:-1;14281:11:14;;;;;;;;;;;;;;;;;14207:96;14350:14;;;;14325:40;;;;14342:6;;14325:40;;;:::i;:::-;;;;;;;;;;;;;14312:54;;14457:5;:15;;;14452:129;;14518:3;14528:40;14536:10;:20;;;14528:29;;:38;:40::i;:::-;14501:68;;;;;;;;;:::i;:::-;;;;;;;;;;;;;14488:82;;14452:129;13814:773;;;13697:890;;;;:::o;7743:376::-;7883:20;7935:11;7924:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7924:30:14;;7915:39;;7969:6;7964:149;7981:22;;;7964:149;;;8036:66;8051:22;8075:10;8087:11;;8099:1;8087:14;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;8036:66::-;8024:6;8031:1;8024:9;;;;;;;;:::i;:::-;:78;;;:9;;;;;;;;;;;:78;8005:3;;;;:::i;:::-;;;;7964:149;;;;7743:376;;;;;;:::o;12796:830::-;13014:39;;-1:-1:-1;;13031:10:14;24167:2:16;24163:15;24159:53;13014:39:14;;;24147:66:16;-1:-1:-1;;;;;;24251:3:16;24247:16;;;24243:89;24229:12;;;24222:111;12989:12:14;;24349::16;;13014:39:14;;;;;;;;;;;;13004:50;;;;;;12989:65;;13072:55;13091:11;13104:5;:16;;;13122:4;13072:18;:55::i;:::-;13064:97;;;;-1:-1:-1;;;13064:97:14;;24574:2:16;13064:97:14;;;24556:21:16;24613:2;24593:18;;;24586:30;24652:31;24632:18;;;24625:59;24701:18;;13064:97:14;24372:353:16;13064:97:14;-1:-1:-1;;;;;13295:41:14;;13218:22;13295:41;;;:17;:41;;;;;;;;:53;;;;;;;;13243:14;13256:1;13243:14;;;;13295:69;;;;;;;;;13396:1;1007:4;13402:30;;13396:37;13451:31;;;:36;13443:63;;;;-1:-1:-1;;;13443:63:14;;24932:2:16;13443:63:14;;;24914:21:16;24971:2;24951:18;;;24944:30;25010:16;24990:18;;;24983:44;25044:18;;13443:63:14;24730:338:16;13443:63:14;-1:-1:-1;;;;;13516:41:14;;;;;;;:17;:41;;;;;;;;:53;;;;;;;;;:69;;;;;;;;;;13588:31;;;;13516:103;;;-1:-1:-1;;;;12796:830:14:o;328:703:9:-;384:13;601:5;610:1;601:10;597:51;;-1:-1:-1;;627:10:9;;;;;;;;;;;;;;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:9;;-1:-1:-1;773:2:9;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:9;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:9;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;;;;;;;;;;-1:-1:-1;972:11:9;981:2;972:11;;:::i;:::-;;;844:150;;;1017:6;328:703;-1:-1:-1;;;;328:703:9:o;847:184:10:-;968:4;1020;991:25;1004:5;1011:4;991:12;:25::i;:::-;:33;;847:184;-1:-1:-1;;;;847:184:10:o;1383:688::-;1466:7;1508:4;1466:7;1522:514;1546:5;:12;1542:1;:16;1522:514;;;1579:20;1602:5;1608:1;1602:8;;;;;;;;:::i;:::-;;;;;;;1579:31;;1644:12;1628;:28;1624:402;;1779:44;;;;;;25791:19:16;;;25826:12;;;25819:28;;;25863:12;;1779:44:10;;;;;;;;;;;;1769:55;;;;;;1754:70;;1624:402;;;1966:44;;;;;;25791:19:16;;;25826:12;;;25819:28;;;25863:12;;1966:44:10;;;;;;;;;;;;1956:55;;;;;;1941:70;;1624:402;-1:-1:-1;1560:3:10;;;;:::i;:::-;;;;1522:514;;;-1:-1:-1;2052:12:10;1383:688;-1:-1:-1;;;1383:688:10:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:332:16;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;-1:-1:-1;;;;;;223:5:16;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:16:o;639:196::-;707:20;;-1:-1:-1;;;;;756:54:16;;746:65;;736:93;;825:1;822;815:12;736:93;639:196;;;:::o;840:164::-;908:5;953:3;944:6;939:3;935:16;931:26;928:46;;;970:1;967;960:12;928:46;-1:-1:-1;992:6:16;840:164;-1:-1:-1;840:164:16:o;1009:446::-;1112:6;1120;1173:2;1161:9;1152:7;1148:23;1144:32;1141:52;;;1189:1;1186;1179:12;1141:52;1212:29;1231:9;1212:29;:::i;:::-;1202:39;;1292:2;1281:9;1277:18;1264:32;1319:18;1311:6;1308:30;1305:50;;;1351:1;1348;1341:12;1305:50;1374:75;1441:7;1432:6;1421:9;1417:22;1374:75;:::i;:::-;1364:85;;;1009:446;;;;;:::o;1642:254::-;1710:6;1718;1771:2;1759:9;1750:7;1746:23;1742:32;1739:52;;;1787:1;1784;1777:12;1739:52;1810:29;1829:9;1810:29;:::i;:::-;1800:39;1886:2;1871:18;;;;1858:32;;-1:-1:-1;;;1642:254:16:o;2103:184::-;-1:-1:-1;;;2152:1:16;2145:88;2252:4;2249:1;2242:15;2276:4;2273:1;2266:15;2292:300;2379:1;2372:5;2369:12;2359:200;;-1:-1:-1;;;2412:1:16;2405:88;2516:4;2513:1;2506:15;2544:4;2541:1;2534:15;2359:200;2568:18;;2292:300::o;2597:258::-;2669:1;2679:113;2693:6;2690:1;2687:13;2679:113;;;2769:11;;;2763:18;2750:11;;;2743:39;2715:2;2708:10;2679:113;;;2810:6;2807:1;2804:13;2801:48;;;2845:1;2836:6;2831:3;2827:16;2820:27;2801:48;;2597:258;;;:::o;2860:::-;2902:3;2940:5;2934:12;2967:6;2962:3;2955:19;2983:63;3039:6;3032:4;3027:3;3023:14;3016:4;3009:5;3005:16;2983:63;:::i;:::-;3100:2;3079:15;-1:-1:-1;;3075:29:16;3066:39;;;;3107:4;3062:50;;2860:258;-1:-1:-1;;2860:258:16:o;3123:1241::-;3298:2;3287:9;3280:21;3310:52;3358:2;3347:9;3343:18;3334:6;3328:13;1977:10;1966:22;1954:35;;1901:94;3310:52;3261:4;3409:2;3401:6;3397:15;3391:22;3422:51;3469:2;3458:9;3454:18;3440:12;1977:10;1966:22;1954:35;;1901:94;3422:51;-1:-1:-1;3522:2:16;3510:15;;3504:22;1977:10;1966:22;;3584:2;3569:18;;1954:35;-1:-1:-1;3637:2:16;3625:15;;3619:22;2076:14;2065:26;;3699:3;3684:19;;2053:39;-1:-1:-1;3753:3:16;3741:16;;3735:23;2076:14;2065:26;;3816:3;3801:19;;2053:39;3767:54;3870:3;3862:6;3858:16;3852:23;3884:68;3947:3;3936:9;3932:19;3916:14;3884:68;:::i;:::-;-1:-1:-1;4001:3:16;3989:16;;3983:23;421:13;;414:21;4062:3;4047:19;;402:34;-1:-1:-1;4104:3:16;4092:16;;4086:23;4128:3;4147:18;;;4140:30;;;;4207:15;;4201:22;4242:6;4264:18;;;4257:30;4304:54;4353:3;4338:19;;4201:22;4304:54;:::i;4369:514::-;4481:6;4489;4497;4550:2;4538:9;4529:7;4525:23;4521:32;4518:52;;;4566:1;4563;4556:12;4518:52;4589:29;4608:9;4589:29;:::i;:::-;4579:39;;4665:2;4654:9;4650:18;4637:32;4627:42;;4720:2;4709:9;4705:18;4692:32;4747:18;4739:6;4736:30;4733:50;;;4779:1;4776;4769:12;4733:50;4802:75;4869:7;4860:6;4849:9;4845:22;4802:75;:::i;:::-;4792:85;;;4369:514;;;;;:::o;4888:366::-;4950:8;4960:6;5014:3;5007:4;4999:6;4995:17;4991:27;4981:55;;5032:1;5029;5022:12;4981:55;-1:-1:-1;5055:20:16;;5098:18;5087:30;;5084:50;;;5130:1;5127;5120:12;5084:50;5167:4;5159:6;5155:17;5143:29;;5227:3;5220:4;5210:6;5207:1;5203:14;5195:6;5191:27;5187:38;5184:47;5181:67;;;5244:1;5241;5234:12;5181:67;4888:366;;;;;:::o;5259:1101::-;5433:6;5441;5449;5457;5465;5473;5481;5534:3;5522:9;5513:7;5509:23;5505:33;5502:53;;;5551:1;5548;5541:12;5502:53;5574:29;5593:9;5574:29;:::i;:::-;5564:39;;5650:2;5639:9;5635:18;5622:32;5612:42;;5704:2;5693:9;5689:18;5676:32;5748:6;5741:5;5737:18;5730:5;5727:29;5717:57;;5770:1;5767;5760:12;5717:57;5793:5;-1:-1:-1;5849:2:16;5834:18;;5821:32;5872:18;5902:14;;;5899:34;;;5929:1;5926;5919:12;5899:34;5968:69;6029:7;6020:6;6009:9;6005:22;5968:69;:::i;:::-;6056:8;;-1:-1:-1;5942:95:16;-1:-1:-1;6144:3:16;6129:19;;6116:33;;-1:-1:-1;6161:16:16;;;6158:36;;;6190:1;6187;6180:12;6158:36;;6229:71;6292:7;6281:8;6270:9;6266:24;6229:71;:::i;:::-;5259:1101;;;;-1:-1:-1;5259:1101:16;;-1:-1:-1;5259:1101:16;;;;6203:97;;-1:-1:-1;;;5259:1101:16:o;6365:328::-;6442:6;6450;6458;6511:2;6499:9;6490:7;6486:23;6482:32;6479:52;;;6527:1;6524;6517:12;6479:52;6550:29;6569:9;6550:29;:::i;:::-;6540:39;;6598:38;6632:2;6621:9;6617:18;6598:38;:::i;:::-;6588:48;;6683:2;6672:9;6668:18;6655:32;6645:42;;6365:328;;;;;:::o;6895:163::-;6962:20;;7022:10;7011:22;;7001:33;;6991:61;;7048:1;7045;7038:12;7063:651;7175:6;7183;7191;7199;7207;7260:3;7248:9;7239:7;7235:23;7231:33;7228:53;;;7277:1;7274;7267:12;7228:53;7300:29;7319:9;7300:29;:::i;:::-;7290:39;;7376:2;7365:9;7361:18;7348:32;7338:42;;7399:37;7432:2;7421:9;7417:18;7399:37;:::i;:::-;7389:47;;7487:2;7476:9;7472:18;7459:32;7514:18;7506:6;7503:30;7500:50;;;7546:1;7543;7536:12;7500:50;7585:69;7646:7;7637:6;7626:9;7622:22;7585:69;:::i;:::-;7063:651;;;;-1:-1:-1;7063:651:16;;-1:-1:-1;7673:8:16;;7559:95;7063:651;-1:-1:-1;;;7063:651:16:o;7719:326::-;7795:6;7803;7811;7864:2;7852:9;7843:7;7839:23;7835:32;7832:52;;;7880:1;7877;7870:12;7832:52;7903:29;7922:9;7903:29;:::i;:::-;7893:39;;7979:2;7968:9;7964:18;7951:32;7941:42;;8002:37;8035:2;8024:9;8020:18;8002:37;:::i;:::-;7992:47;;7719:326;;;;;:::o;8050:186::-;8109:6;8162:2;8150:9;8141:7;8137:23;8133:32;8130:52;;;8178:1;8175;8168:12;8130:52;8201:29;8220:9;8201:29;:::i;8241:220::-;8390:2;8379:9;8372:21;8353:4;8410:45;8451:2;8440:9;8436:18;8428:6;8410:45;:::i;8466:577::-;8569:6;8577;8585;8593;8646:2;8634:9;8625:7;8621:23;8617:32;8614:52;;;8662:1;8659;8652:12;8614:52;8685:29;8704:9;8685:29;:::i;:::-;8675:39;;8761:2;8750:9;8746:18;8733:32;8723:42;;8816:2;8805:9;8801:18;8788:32;8843:18;8835:6;8832:30;8829:50;;;8875:1;8872;8865:12;8829:50;8914:69;8975:7;8966:6;8955:9;8951:22;8914:69;:::i;:::-;8466:577;;;;-1:-1:-1;9002:8:16;-1:-1:-1;;;;8466:577:16:o;9048:642::-;9213:2;9265:21;;;9335:13;;9238:18;;;9357:22;;;9184:4;;9213:2;9436:15;;;;9410:2;9395:18;;;9184:4;9479:185;9493:6;9490:1;9487:13;9479:185;;;9568:13;;9561:21;9554:29;9542:42;;9639:15;;;;9604:12;;;;9515:1;9508:9;9479:185;;;-1:-1:-1;9681:3:16;;9048:642;-1:-1:-1;;;;;;9048:642:16:o;9926:118::-;10012:5;10005:13;9998:21;9991:5;9988:32;9978:60;;10034:1;10031;10024:12;9978:60;9926:118;:::o;10049:245::-;10116:6;10169:2;10157:9;10148:7;10144:23;10140:32;10137:52;;;10185:1;10182;10175:12;10137:52;10217:9;10211:16;10236:28;10258:5;10236:28;:::i;10711:276::-;10790:6;10843:2;10831:9;10822:7;10818:23;10814:32;10811:52;;;10859:1;10856;10849:12;10811:52;10898:9;10885:23;10937:1;10930:5;10927:12;10917:40;;10953:1;10950;10943:12;11408:280;11466:6;11519:2;11507:9;11498:7;11494:23;11490:32;11487:52;;;11535:1;11532;11525:12;11487:52;11574:9;11561:23;11624:14;11617:5;11613:26;11606:5;11603:37;11593:65;;11654:1;11651;11644:12;12116:184;12174:6;12227:2;12215:9;12206:7;12202:23;12198:32;12195:52;;;12243:1;12240;12233:12;12195:52;12266:28;12284:9;12266:28;:::i;12723:184::-;-1:-1:-1;;;12772:1:16;12765:88;12872:4;12869:1;12862:15;12896:4;12893:1;12886:15;12912:250;12951:3;-1:-1:-1;;;;;13072:2:16;13065:5;13061:14;13099:2;13090:7;13087:15;13084:41;;13105:18;;:::i;:::-;13154:1;13141:15;;12912:250;-1:-1:-1;;;12912:250:16:o;13167:241::-;13223:6;13276:2;13264:9;13255:7;13251:23;13247:32;13244:52;;;13292:1;13289;13282:12;13244:52;13331:9;13318:23;13350:28;13372:5;13350:28;:::i;13413:522::-;13491:4;13497:6;13557:11;13544:25;13651:2;13647:7;13636:8;13620:14;13616:29;13612:43;13592:18;13588:68;13578:96;;13670:1;13667;13660:12;13578:96;13697:33;;13749:20;;;-1:-1:-1;13792:18:16;13781:30;;13778:50;;;13824:1;13821;13814:12;13778:50;13857:4;13845:17;;-1:-1:-1;13888:14:16;13884:27;;;13874:38;;13871:58;;;13925:1;13922;13915:12;14290:437;14369:1;14365:12;;;;14412;;;14433:61;;14487:4;14479:6;14475:17;14465:27;;14433:61;14540:2;14532:6;14529:14;14509:18;14506:38;14503:218;;-1:-1:-1;;;14574:1:16;14567:88;14678:4;14675:1;14668:15;14706:4;14703:1;14696:15;16556:228;16595:3;16623:10;16660:2;16657:1;16653:10;16690:2;16687:1;16683:10;16721:3;16717:2;16713:12;16708:3;16705:21;16702:47;;;16729:18;;:::i;:::-;16765:13;;16556:228;-1:-1:-1;;;;16556:228:16:o;17533:184::-;-1:-1:-1;;;17582:1:16;17575:88;17682:4;17679:1;17672:15;17706:4;17703:1;17696:15;17722:545;17815:4;17821:6;17881:11;17868:25;17975:2;17971:7;17960:8;17944:14;17940:29;17936:43;17916:18;17912:68;17902:96;;17994:1;17991;17984:12;17902:96;18021:33;;18073:20;;;-1:-1:-1;18116:18:16;18105:30;;18102:50;;;18148:1;18145;18138:12;18102:50;18181:4;18169:17;;-1:-1:-1;18232:1:16;18228:14;;;18212;18208:35;18198:46;;18195:66;;;18257:1;18254;18247:12;18272:128;18312:3;18343:1;18339:6;18336:1;18333:13;18330:39;;;18349:18;;:::i;:::-;-1:-1:-1;18385:9:16;;18272:128::o;19121:184::-;-1:-1:-1;;;19170:1:16;19163:88;19270:4;19267:1;19260:15;19294:4;19291:1;19284:15;19310:1105;19405:6;19436:2;19479;19467:9;19458:7;19454:23;19450:32;19447:52;;;19495:1;19492;19485:12;19447:52;19528:9;19522:16;19557:18;19598:2;19590:6;19587:14;19584:34;;;19614:1;19611;19604:12;19584:34;19652:6;19641:9;19637:22;19627:32;;19697:7;19690:4;19686:2;19682:13;19678:27;19668:55;;19719:1;19716;19709:12;19668:55;19748:2;19742:9;19770:2;19766;19763:10;19760:36;;;19776:18;;:::i;:::-;19822:2;19819:1;19815:10;19854:2;19848:9;19917:2;19913:7;19908:2;19904;19900:11;19896:25;19888:6;19884:38;19972:6;19960:10;19957:22;19952:2;19940:10;19937:18;19934:46;19931:72;;;19983:18;;:::i;:::-;20019:2;20012:22;20069:18;;;20103:15;;;;-1:-1:-1;20145:11:16;;;20141:20;;;20173:19;;;20170:39;;;20205:1;20202;20195:12;20170:39;20229:11;;;;20249:135;20265:6;20260:3;20257:15;20249:135;;;20331:10;;20319:23;;20282:12;;;;20362;;;;20249:135;;;20403:6;19310:1105;-1:-1:-1;;;;;;;;19310:1105:16:o;21863:184::-;21933:6;21986:2;21974:9;21965:7;21961:23;21957:32;21954:52;;;22002:1;21999;21992:12;21954:52;-1:-1:-1;22025:16:16;;21863:184;-1:-1:-1;21863:184:16:o;22758:470::-;22937:3;22975:6;22969:13;22991:53;23037:6;23032:3;23025:4;23017:6;23013:17;22991:53;:::i;:::-;23107:13;;23066:16;;;;23129:57;23107:13;23066:16;23163:4;23151:17;;23129:57;:::i;23233:614::-;23513:3;23551:6;23545:13;23567:53;23613:6;23608:3;23601:4;23593:6;23589:17;23567:53;:::i;:::-;23681:3;23642:16;;;23667:18;;;23710:13;;23732:65;23710:13;23784:1;23773:13;;23766:4;23754:17;;23732:65;:::i;:::-;23817:20;23839:1;23813:28;;23233:614;-1:-1:-1;;;;23233:614:16:o;23852:135::-;23891:3;23912:17;;;23909:43;;23932:18;;:::i;:::-;-1:-1:-1;23979:1:16;23968:13;;23852:135::o;25073:184::-;-1:-1:-1;;;25122:1:16;25115:88;25222:4;25219:1;25212:15;25246:4;25243:1;25236:15;25262:120;25302:1;25328;25318:35;;25333:18;;:::i;:::-;-1:-1:-1;25367:9:16;;25262:120::o;25387:125::-;25427:4;25455:1;25452;25449:8;25446:34;;;25460:18;;:::i;:::-;-1:-1:-1;25497:9:16;;25387:125::o;25517:112::-;25549:1;25575;25565:35;;25580:18;;:::i;:::-;-1:-1:-1;25614:9:16;;25517:112::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "2479600",
								"executionCost": "24779",
								"totalCost": "2504379"
							},
							"external": {
								"checkMintIndex(address,uint256,uint32)": "infinite",
								"checkMintIndices(address,uint256,uint32[])": "infinite",
								"getClaim(address,uint256)": "infinite",
								"getClaimCount(address)": "2577",
								"getTotalMints(address,address,uint256)": "infinite",
								"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": "infinite",
								"mint(address,uint256,uint32,bytes32[])": "infinite",
								"mintBatch(address,uint256,uint16,uint32[],bytes32[][])": "infinite",
								"supportsInterface(bytes4)": "487",
								"tokenURI(address,uint256)": "infinite",
								"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": "infinite"
							},
							"internal": {
								"_checkMerkleAndUpdate(struct IERC721LazyClaim.Claim storage pointer,address,uint256,uint32,bytes32[] memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "CALLVALUE",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 703,
									"end": 14589,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122036a9685f79261920cebda45a8dbb9bdb76ddd5b19b4fd52c3d0e88fffbcd500c64736f6c634300080e0033",
									".code": [
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "CALLVALUE",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "tag",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "42F3BEF4"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "D5FDFE87"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "15"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "D5FDFE87"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "E9DC6375"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "12"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "F8A6137B"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "13"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "tag",
											"source": 14,
											"value": "15"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "42F3BEF4"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "BBF2A8C6"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "9"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "CDA08536"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "10"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "tag",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "F79AB39"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "16"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "F79AB39"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "1831A643"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "6"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "3512DA33"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "7"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "tag",
											"source": 14,
											"value": "16"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "1FFC9A7"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "37B79DB"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "tag",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 703,
											"end": 14589,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "tag",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "17"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "19"
										},
										{
											"begin": 2304,
											"end": 2607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "tag",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2304,
											"end": 2607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "tag",
											"source": 14,
											"value": "17"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 612,
											"end": 626,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 612,
											"end": 626,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 605,
											"end": 627,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 587,
											"end": 628,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 587,
											"end": 628,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 575,
											"end": 577,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 560,
											"end": 578,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "tag",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "RETURN",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "tag",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 3221,
											"end": 4673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "tag",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 3221,
											"end": 4673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "tag",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1606,
											"end": 1631,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1606,
											"end": 1631,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1606,
											"end": 1631,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1594,
											"end": 1596,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1579,
											"end": 1597,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 1460,
											"end": 1637,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "tag",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "29"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "30"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 6639,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "tag",
											"source": 14,
											"value": "30"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "32"
										},
										{
											"begin": 6639,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "tag",
											"source": 14,
											"value": "29"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "34"
										},
										{
											"begin": 6639,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "tag",
											"source": 14,
											"value": "6"
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "35"
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "36"
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "37"
										},
										{
											"begin": 4738,
											"end": 6355,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "tag",
											"source": 14,
											"value": "36"
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "38"
										},
										{
											"begin": 4738,
											"end": 6355,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "tag",
											"source": 14,
											"value": "35"
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "STOP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "tag",
											"source": 14,
											"value": "7"
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "35"
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "41"
										},
										{
											"begin": 10469,
											"end": 12658,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "tag",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "42"
										},
										{
											"begin": 10469,
											"end": 12658,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "tag",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "43"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "45"
										},
										{
											"begin": 8186,
											"end": 8672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "tag",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "46"
										},
										{
											"begin": 8186,
											"end": 8672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "tag",
											"source": 14,
											"value": "43"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6872,
											"end": 6882,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6860,
											"end": 6883,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6860,
											"end": 6883,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 6860,
											"end": 6883,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6842,
											"end": 6884,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6842,
											"end": 6884,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6830,
											"end": 6832,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6815,
											"end": 6833,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 6698,
											"end": 6890,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "tag",
											"source": 14,
											"value": "9"
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "35"
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "50"
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "51"
										},
										{
											"begin": 8730,
											"end": 10406,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "tag",
											"source": 14,
											"value": "50"
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "52"
										},
										{
											"begin": 8730,
											"end": 10406,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "tag",
											"source": 14,
											"value": "10"
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "17"
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "54"
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "55"
										},
										{
											"begin": 7019,
											"end": 7673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "tag",
											"source": 14,
											"value": "54"
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "56"
										},
										{
											"begin": 7019,
											"end": 7673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "tag",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "59"
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6422,
											"end": 6577,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "tag",
											"source": 14,
											"value": "59"
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6508,
											"end": 6515,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6534,
											"end": 6546,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6534,
											"end": 6570,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6422,
											"end": 6577,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "tag",
											"source": 14,
											"value": "12"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "63"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 13697,
											"end": 14587,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "tag",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 13697,
											"end": 14587,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "tag",
											"source": 14,
											"value": "63"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "67"
										},
										{
											"begin": 13697,
											"end": 14587,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "tag",
											"source": 14,
											"value": "13"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "69"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "70"
										},
										{
											"begin": 7743,
											"end": 8119,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "tag",
											"source": 14,
											"value": "69"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "71"
										},
										{
											"begin": 7743,
											"end": 8119,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "tag",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "73"
										},
										{
											"begin": 7743,
											"end": 8119,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "tag",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2398,
											"end": 2402,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2421,
											"end": 2470,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2421,
											"end": 2470,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2436,
											"end": 2470,
											"name": "PUSH",
											"source": 14,
											"value": "38DBD06A00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2421,
											"end": 2470,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 2421,
											"end": 2470,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2421,
											"end": 2544,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "75"
										},
										{
											"begin": 2421,
											"end": 2544,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2486,
											"end": 2544,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2486,
											"end": 2544,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2501,
											"end": 2544,
											"name": "PUSH",
											"source": 14,
											"value": "E9DC637500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2486,
											"end": 2544,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 2421,
											"end": 2544,
											"name": "tag",
											"source": 14,
											"value": "75"
										},
										{
											"begin": 2421,
											"end": 2544,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2421,
											"end": 2600,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2421,
											"end": 2600,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "76"
										},
										{
											"begin": 2421,
											"end": 2600,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2560,
											"end": 2600,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2560,
											"end": 2600,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2575,
											"end": 2600,
											"name": "PUSH",
											"source": 14,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2560,
											"end": 2600,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 2421,
											"end": 2600,
											"name": "tag",
											"source": 14,
											"value": "76"
										},
										{
											"begin": 2421,
											"end": 2600,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2414,
											"end": 2600,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2304,
											"end": 2607,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2304,
											"end": 2607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "tag",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "935E01B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3075,
											"end": 3085,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9841,
											"end": 9915,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3414,
											"end": 3421,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3414,
											"end": 3421,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3381,
											"end": 3403,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3381,
											"end": 3403,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3381,
											"end": 3403,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3381,
											"end": 3403,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "PUSH",
											"source": 14,
											"value": "24D7806C"
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9814,
											"end": 9832,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 9814,
											"end": 9832,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "GAS",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "STATICCALL",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "81"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "tag",
											"source": 14,
											"value": "81"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "82"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "83"
										},
										{
											"begin": 3047,
											"end": 3086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "tag",
											"source": 14,
											"value": "82"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10501,
											"end": 10503,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10483,
											"end": 10504,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10540,
											"end": 10542,
											"name": "PUSH",
											"source": 16,
											"value": "2B"
										},
										{
											"begin": 10520,
											"end": 10538,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 10520,
											"end": 10538,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10520,
											"end": 10538,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10513,
											"end": 10543,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10579,
											"end": 10613,
											"name": "PUSH",
											"source": 16,
											"value": "57616C6C6574206973206E6F7420616E2061646D696E6973747261746F722066"
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10552,
											"end": 10614,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDC8818DBDB9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10630,
											"end": 10648,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 10630,
											"end": 10648,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10630,
											"end": 10648,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10623,
											"end": 10664,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10681,
											"end": 10700,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 10681,
											"end": 10700,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "tag",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "tag",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3501,
											"end": 3524,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3466,
											"end": 3497,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "91"
										},
										{
											"begin": 3466,
											"end": 3497,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 3466,
											"end": 3497,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3497,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3497,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 3466,
											"end": 3497,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3497,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3497,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 3466,
											"end": 3497,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3497,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "91"
										},
										{
											"begin": 3466,
											"end": 3497,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "94"
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "94"
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 3466,
											"end": 3524,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "94"
										},
										{
											"begin": 3466,
											"end": 3524,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3524,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "95"
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3458,
											"end": 3576,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3458,
											"end": 3576,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3458,
											"end": 3576,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11194,
											"end": 11196,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3458,
											"end": 3576,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11176,
											"end": 11197,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11233,
											"end": 11235,
											"name": "PUSH",
											"source": 16,
											"value": "2F"
										},
										{
											"begin": 11213,
											"end": 11231,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 11213,
											"end": 11231,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11213,
											"end": 11231,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11206,
											"end": 11236,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11272,
											"end": 11306,
											"name": "PUSH",
											"source": 16,
											"value": "43616E6E6F7420696E697469616C697A65207769746820696E76616C69642073"
										},
										{
											"begin": 11252,
											"end": 11270,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 11252,
											"end": 11270,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11252,
											"end": 11270,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11245,
											"end": 11307,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11343,
											"end": 11360,
											"name": "PUSH",
											"source": 16,
											"value": "746F726167652070726F746F636F6C0000000000000000000000000000000000"
										},
										{
											"begin": 11323,
											"end": 11341,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 11323,
											"end": 11341,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11323,
											"end": 11341,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11316,
											"end": 11361,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11378,
											"end": 11397,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 11378,
											"end": 11397,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 10992,
											"end": 11403,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "95"
										},
										{
											"begin": 3458,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3617,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "98"
										},
										{
											"begin": 3594,
											"end": 3617,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 3594,
											"end": 3617,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3617,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3617,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3594,
											"end": 3617,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3617,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3617,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 3594,
											"end": 3617,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3617,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "98"
										},
										{
											"begin": 3594,
											"end": 3617,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3622,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 3594,
											"end": 3622,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3622,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3622,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3677,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 3594,
											"end": 3677,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3654,
											"end": 3677,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 3654,
											"end": 3677,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 3654,
											"end": 3677,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3654,
											"end": 3677,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3654,
											"end": 3677,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3654,
											"end": 3677,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3654,
											"end": 3677,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3654,
											"end": 3677,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 3654,
											"end": 3677,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3654,
											"end": 3677,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 3654,
											"end": 3677,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3677,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 3626,
											"end": 3677,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3651,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 3626,
											"end": 3651,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3626,
											"end": 3651,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3651,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3651,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3626,
											"end": 3651,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3651,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3651,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 3626,
											"end": 3651,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3651,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 3626,
											"end": 3651,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3677,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 3626,
											"end": 3677,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3626,
											"end": 3677,
											"modifierDepth": 1,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 3594,
											"end": 3677,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 3594,
											"end": 3677,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "103"
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3586,
											"end": 3736,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3586,
											"end": 3736,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3586,
											"end": 3736,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11895,
											"end": 11897,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3586,
											"end": 3736,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11877,
											"end": 11898,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11934,
											"end": 11936,
											"name": "PUSH",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 11914,
											"end": 11932,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 11914,
											"end": 11932,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11914,
											"end": 11932,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11907,
											"end": 11937,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11973,
											"end": 12007,
											"name": "PUSH",
											"source": 16,
											"value": "43616E6E6F742068617665207374617274446174652067726561746572207468"
										},
										{
											"begin": 11953,
											"end": 11971,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 11953,
											"end": 11971,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11953,
											"end": 11971,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11946,
											"end": 12008,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12044,
											"end": 12068,
											"name": "PUSH",
											"source": 16,
											"value": "616E206F7220657175616C20746F20656E644461746500000000000000000000"
										},
										{
											"begin": 12024,
											"end": 12042,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 12024,
											"end": 12042,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12024,
											"end": 12042,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12017,
											"end": 12069,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12086,
											"end": 12105,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 12086,
											"end": 12105,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 11693,
											"end": 12111,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "103"
										},
										{
											"begin": 3586,
											"end": 3736,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3754,
											"end": 3780,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 3754,
											"end": 3780,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3754,
											"end": 3780,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3754,
											"end": 3780,
											"modifierDepth": 1,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3754,
											"end": 3786,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3754,
											"end": 3786,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3754,
											"end": 3820,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "106"
										},
										{
											"begin": 3754,
											"end": 3820,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3790,
											"end": 3815,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "107"
										},
										{
											"begin": 3790,
											"end": 3815,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3790,
											"end": 3815,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3790,
											"end": 3815,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3790,
											"end": 3815,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3790,
											"end": 3815,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3790,
											"end": 3815,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3790,
											"end": 3815,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 3790,
											"end": 3815,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3790,
											"end": 3815,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "107"
										},
										{
											"begin": 3790,
											"end": 3815,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3790,
											"end": 3820,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3790,
											"end": 3820,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3790,
											"end": 3820,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3754,
											"end": 3820,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "106"
										},
										{
											"begin": 3754,
											"end": 3820,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "109"
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3746,
											"end": 3874,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3746,
											"end": 3874,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3746,
											"end": 3874,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12507,
											"end": 12509,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3746,
											"end": 3874,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12489,
											"end": 12510,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12546,
											"end": 12548,
											"name": "PUSH",
											"source": 16,
											"value": "31"
										},
										{
											"begin": 12526,
											"end": 12544,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 12526,
											"end": 12544,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12526,
											"end": 12544,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12519,
											"end": 12549,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12585,
											"end": 12619,
											"name": "PUSH",
											"source": 16,
											"value": "43616E6E6F742070726F7669646520626F7468206D696E747350657257616C6C"
										},
										{
											"begin": 12565,
											"end": 12583,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 12565,
											"end": 12583,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12565,
											"end": 12583,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12558,
											"end": 12620,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12656,
											"end": 12675,
											"name": "PUSH",
											"source": 16,
											"value": "657420616E64206D65726B6C65526F6F74000000000000000000000000000000"
										},
										{
											"begin": 12636,
											"end": 12654,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 12636,
											"end": 12654,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12636,
											"end": 12654,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12629,
											"end": 12676,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12693,
											"end": 12712,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 12693,
											"end": 12712,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 12305,
											"end": 12718,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "109"
										},
										{
											"begin": 3746,
											"end": 3874,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3968,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3968,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3944,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 3932,
											"end": 3968,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3968,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "112"
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "113"
										},
										{
											"begin": 3932,
											"end": 3970,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "112"
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3970,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 3999,
											"end": 4035,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3999,
											"end": 4035,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4170,
											"end": 4194,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 4170,
											"end": 4194,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4170,
											"end": 4194,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4170,
											"end": 4194,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4170,
											"end": 4194,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4170,
											"end": 4194,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 4170,
											"end": 4194,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4170,
											"end": 4194,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 4170,
											"end": 4194,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4234,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "115"
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 4219,
											"end": 4244,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "115"
										},
										{
											"begin": 4219,
											"end": 4244,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4269,
											"end": 4294,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "116"
										},
										{
											"begin": 4269,
											"end": 4294,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 4269,
											"end": 4294,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4269,
											"end": 4294,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4269,
											"end": 4294,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4269,
											"end": 4294,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 4269,
											"end": 4294,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4269,
											"end": 4294,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 4269,
											"end": 4294,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4269,
											"end": 4294,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "116"
										},
										{
											"begin": 4269,
											"end": 4294,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4317,
											"end": 4340,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "117"
										},
										{
											"begin": 4317,
											"end": 4340,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 4317,
											"end": 4340,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4317,
											"end": 4340,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4317,
											"end": 4340,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 4317,
											"end": 4340,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 4317,
											"end": 4340,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4317,
											"end": 4340,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 4317,
											"end": 4340,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4317,
											"end": 4340,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "117"
										},
										{
											"begin": 4317,
											"end": 4340,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4371,
											"end": 4402,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "118"
										},
										{
											"begin": 4371,
											"end": 4402,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 4371,
											"end": 4402,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4371,
											"end": 4402,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4371,
											"end": 4402,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 4371,
											"end": 4402,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 4371,
											"end": 4402,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4371,
											"end": 4402,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 4371,
											"end": 4402,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4371,
											"end": 4402,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "118"
										},
										{
											"begin": 4371,
											"end": 4402,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 4118,
											"end": 4563,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4427,
											"end": 4452,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "121"
										},
										{
											"begin": 4427,
											"end": 4452,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 4427,
											"end": 4452,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4427,
											"end": 4452,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4427,
											"end": 4452,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 4427,
											"end": 4452,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 4427,
											"end": 4452,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4427,
											"end": 4452,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 4427,
											"end": 4452,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4427,
											"end": 4452,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "121"
										},
										{
											"begin": 4427,
											"end": 4452,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4478,
											"end": 4504,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 4478,
											"end": 4504,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4478,
											"end": 4504,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4478,
											"end": 4504,
											"modifierDepth": 1,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4528,
											"end": 4552,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "123"
										},
										{
											"begin": 4528,
											"end": 4552,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 4528,
											"end": 4552,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4528,
											"end": 4552,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4478,
											"end": 4493,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4528,
											"end": 4552,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 4528,
											"end": 4552,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4528,
											"end": 4552,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "123"
										},
										{
											"begin": 4528,
											"end": 4552,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 4118,
											"end": 4563,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4081,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 4074,
											"end": 4105,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4105,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFF000000000000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFF0000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4115,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "OR",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 4074,
											"end": 4563,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 4074,
											"end": 4563,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 4074,
											"end": 4563,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4579,
											"end": 4641,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4630,
											"end": 4640,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 9841,
											"end": 9915,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9841,
											"end": 9915,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4579,
											"end": 4641,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4579,
											"end": 4641,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "CF76E1BEB8DCF887C917933E1D0970EAFADB9A69B82CFD5F44740A0DCE6F45A6"
										},
										{
											"begin": 4579,
											"end": 4641,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9829,
											"end": 9831,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9814,
											"end": 9832,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4579,
											"end": 4641,
											"modifierDepth": 1,
											"name": "LOG3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4651,
											"end": 4666,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4651,
											"end": 4666,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 3221,
											"end": 4673,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3221,
											"end": 4673,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "tag",
											"source": 14,
											"value": "32"
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6740,
											"end": 6752,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "130"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "120"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 6740,
											"end": 6752,
											"name": "tag",
											"source": 14,
											"value": "130"
										},
										{
											"begin": 6740,
											"end": 6752,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6835,
											"end": 6858,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6779,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6803,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6815,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6831,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6772,
											"end": 6831,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6831,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6831,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 6772,
											"end": 6831,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "136"
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "136"
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 6772,
											"end": 6858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "tag",
											"source": 14,
											"value": "136"
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6772,
											"end": 6858,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "137"
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14142,
											"end": 14144,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14124,
											"end": 14145,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14181,
											"end": 14183,
											"name": "PUSH",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14154,
											"end": 14184,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14193,
											"end": 14244,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 13940,
											"end": 14285,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "tag",
											"source": 14,
											"value": "137"
										},
										{
											"begin": 6764,
											"end": 6884,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6908,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6932,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6901,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 6894,
											"end": 6944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "tag",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 6894,
											"end": 6944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "tag",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 6894,
											"end": 6944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "tag",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 6894,
											"end": 6944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "tag",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "tag",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "tag",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "tag",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6894,
											"end": 6944,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6639,
											"end": 6951,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "tag",
											"source": 14,
											"value": "38"
										},
										{
											"begin": 4738,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "935E01B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3075,
											"end": 3085,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9841,
											"end": 9915,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4922,
											"end": 4944,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4922,
											"end": 4944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4922,
											"end": 4944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4922,
											"end": 4944,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "PUSH",
											"source": 14,
											"value": "24D7806C"
										},
										{
											"begin": 3047,
											"end": 3074,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9814,
											"end": 9832,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 9814,
											"end": 9832,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "GAS",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "STATICCALL",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "tag",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "83"
										},
										{
											"begin": 3047,
											"end": 3086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "tag",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 3047,
											"end": 3086,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10501,
											"end": 10503,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10483,
											"end": 10504,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10540,
											"end": 10542,
											"name": "PUSH",
											"source": 16,
											"value": "2B"
										},
										{
											"begin": 10520,
											"end": 10538,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 10520,
											"end": 10538,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10520,
											"end": 10538,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10513,
											"end": 10543,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10579,
											"end": 10613,
											"name": "PUSH",
											"source": 16,
											"value": "57616C6C6574206973206E6F7420616E2061646D696E6973747261746F722066"
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10552,
											"end": 10614,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDC8818DBDB9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10630,
											"end": 10648,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 10630,
											"end": 10648,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10630,
											"end": 10648,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10623,
											"end": 10664,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 10681,
											"end": 10700,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 10681,
											"end": 10700,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 10299,
											"end": 10706,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "tag",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 3039,
											"end": 3134,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5052,
											"end": 5075,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 4996,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 4989,
											"end": 5020,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5020,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5032,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5048,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4989,
											"end": 5048,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5048,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5048,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 4989,
											"end": 5048,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 4989,
											"end": 5075,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 4989,
											"end": 5075,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 4989,
											"end": 5075,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4989,
											"end": 5075,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4981,
											"end": 5101,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4981,
											"end": 5101,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4981,
											"end": 5101,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14142,
											"end": 14144,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 4981,
											"end": 5101,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14124,
											"end": 14145,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14181,
											"end": 14183,
											"name": "PUSH",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14154,
											"end": 14184,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14193,
											"end": 14244,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 13940,
											"end": 14285,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 4981,
											"end": 5101,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5154,
											"end": 5177,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5119,
											"end": 5150,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 5119,
											"end": 5150,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 5119,
											"end": 5150,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5150,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5150,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 5119,
											"end": 5150,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5150,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5150,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 5119,
											"end": 5150,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5150,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 5119,
											"end": 5150,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 5119,
											"end": 5177,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 5119,
											"end": 5177,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5119,
											"end": 5177,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5111,
											"end": 5217,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5111,
											"end": 5217,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5111,
											"end": 5217,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14934,
											"end": 14936,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5111,
											"end": 5217,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14916,
											"end": 14937,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14973,
											"end": 14975,
											"name": "PUSH",
											"source": 16,
											"value": "23"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14953,
											"end": 14971,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14946,
											"end": 14976,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15012,
											"end": 15046,
											"name": "PUSH",
											"source": 16,
											"value": "43616E6E6F742073657420696E76616C69642073746F726167652070726F746F"
										},
										{
											"begin": 14992,
											"end": 15010,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 14992,
											"end": 15010,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14992,
											"end": 15010,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14985,
											"end": 15047,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15083,
											"end": 15088,
											"name": "PUSH",
											"source": 16,
											"value": "636F6C0000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15063,
											"end": 15081,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 15063,
											"end": 15081,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 15063,
											"end": 15081,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 15056,
											"end": 15089,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15106,
											"end": 15125,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 15106,
											"end": 15125,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 14732,
											"end": 15131,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 5111,
											"end": 5217,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5242,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5235,
											"end": 5266,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5266,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5278,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5287,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5287,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 5235,
											"end": 5287,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5287,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5287,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5235,
											"end": 5287,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5292,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5292,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5377,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 5235,
											"end": 5377,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5353,
											"end": 5377,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 5353,
											"end": 5377,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5353,
											"end": 5377,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5353,
											"end": 5377,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5353,
											"end": 5368,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5353,
											"end": 5377,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 5353,
											"end": 5377,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5353,
											"end": 5377,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 5353,
											"end": 5377,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5304,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5297,
											"end": 5328,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5328,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5340,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5349,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5377,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5297,
											"end": 5377,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5377,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5377,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5349,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 5297,
											"end": 5349,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5349,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5349,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5349,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5349,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5349,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5377,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5297,
											"end": 5377,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5235,
											"end": 5377,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 5235,
											"end": 5377,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5227,
											"end": 5406,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5227,
											"end": 5406,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5227,
											"end": 5406,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15338,
											"end": 15340,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5227,
											"end": 5406,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15320,
											"end": 15341,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15377,
											"end": 15379,
											"name": "PUSH",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 15357,
											"end": 15375,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 15357,
											"end": 15375,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 15357,
											"end": 15375,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 15350,
											"end": 15380,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15416,
											"end": 15442,
											"name": "PUSH",
											"source": 16,
											"value": "43616E6E6F7420646563726561736520746F74616C4D61780000000000000000"
										},
										{
											"begin": 15396,
											"end": 15414,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 15396,
											"end": 15414,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 15396,
											"end": 15414,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 15389,
											"end": 15443,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15460,
											"end": 15478,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 15460,
											"end": 15478,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 15136,
											"end": 15484,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 5227,
											"end": 5406,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5431,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5424,
											"end": 5455,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5455,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5467,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5477,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5424,
											"end": 5477,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5477,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5477,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5424,
											"end": 5477,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5482,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5482,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5568,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 5424,
											"end": 5568,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5543,
											"end": 5568,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 5543,
											"end": 5568,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5543,
											"end": 5568,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5543,
											"end": 5568,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5543,
											"end": 5568,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5543,
											"end": 5568,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5543,
											"end": 5568,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5543,
											"end": 5568,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 5543,
											"end": 5568,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5543,
											"end": 5568,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 5543,
											"end": 5568,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5493,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5486,
											"end": 5517,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5517,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5529,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5539,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5568,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5486,
											"end": 5568,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5568,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5568,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5486,
											"end": 5539,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5539,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5539,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5539,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5539,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5539,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5568,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5486,
											"end": 5568,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5424,
											"end": 5568,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 5424,
											"end": 5568,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5416,
											"end": 5598,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5416,
											"end": 5598,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5416,
											"end": 5598,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15691,
											"end": 15693,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5416,
											"end": 5598,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15673,
											"end": 15694,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15730,
											"end": 15732,
											"name": "PUSH",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 15710,
											"end": 15728,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 15710,
											"end": 15728,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 15710,
											"end": 15728,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 15703,
											"end": 15733,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15769,
											"end": 15796,
											"name": "PUSH",
											"source": 16,
											"value": "43616E6E6F742064656372656173652077616C6C65744D617800000000000000"
										},
										{
											"begin": 15749,
											"end": 15767,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 15749,
											"end": 15767,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 15749,
											"end": 15767,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 15742,
											"end": 15797,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 15814,
											"end": 15832,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 15814,
											"end": 15832,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 15489,
											"end": 15838,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 5416,
											"end": 5598,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5639,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "182"
										},
										{
											"begin": 5616,
											"end": 5639,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 5616,
											"end": 5639,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5639,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5639,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5616,
											"end": 5639,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5639,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5639,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 5616,
											"end": 5639,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5639,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "182"
										},
										{
											"begin": 5616,
											"end": 5639,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5644,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 5616,
											"end": 5644,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5644,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5644,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 5616,
											"end": 5699,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5676,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5676,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5676,
											"end": 5699,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5676,
											"end": 5699,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5676,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 5676,
											"end": 5699,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5676,
											"end": 5699,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 5676,
											"end": 5699,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 5648,
											"end": 5699,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5673,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 5648,
											"end": 5673,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5648,
											"end": 5673,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5673,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5673,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5648,
											"end": 5673,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5673,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5673,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 5648,
											"end": 5673,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5673,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 5648,
											"end": 5673,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 5648,
											"end": 5699,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5648,
											"end": 5699,
											"modifierDepth": 1,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5699,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 5616,
											"end": 5699,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "186"
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5608,
											"end": 5758,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5608,
											"end": 5758,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5608,
											"end": 5758,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11895,
											"end": 11897,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5608,
											"end": 5758,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11877,
											"end": 11898,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11934,
											"end": 11936,
											"name": "PUSH",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 11914,
											"end": 11932,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 11914,
											"end": 11932,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11914,
											"end": 11932,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11907,
											"end": 11937,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 11973,
											"end": 12007,
											"name": "PUSH",
											"source": 16,
											"value": "43616E6E6F742068617665207374617274446174652067726561746572207468"
										},
										{
											"begin": 11953,
											"end": 11971,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 11953,
											"end": 11971,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11953,
											"end": 11971,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11946,
											"end": 12008,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12044,
											"end": 12068,
											"name": "PUSH",
											"source": 16,
											"value": "616E206F7220657175616C20746F20656E644461746500000000000000000000"
										},
										{
											"begin": 12024,
											"end": 12042,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 12024,
											"end": 12042,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12024,
											"end": 12042,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12017,
											"end": 12069,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12086,
											"end": 12105,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 12086,
											"end": 12105,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 11693,
											"end": 12111,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "186"
										},
										{
											"begin": 5608,
											"end": 5758,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5889,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5882,
											"end": 5913,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5913,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5925,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5931,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 5882,
											"end": 5931,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5882,
											"end": 5931,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5955,
											"end": 5979,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 5955,
											"end": 5979,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5955,
											"end": 5979,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5955,
											"end": 5979,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5955,
											"end": 5970,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5955,
											"end": 5979,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 5955,
											"end": 5979,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5955,
											"end": 5979,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 5955,
											"end": 5979,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6019,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 6004,
											"end": 6029,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 6004,
											"end": 6029,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6054,
											"end": 6079,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 6054,
											"end": 6079,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6054,
											"end": 6079,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6054,
											"end": 6079,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6054,
											"end": 6079,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6054,
											"end": 6079,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 6054,
											"end": 6079,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6054,
											"end": 6079,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 6054,
											"end": 6079,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6054,
											"end": 6079,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 6054,
											"end": 6079,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6102,
											"end": 6125,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 6102,
											"end": 6125,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6102,
											"end": 6125,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6102,
											"end": 6125,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6102,
											"end": 6125,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6102,
											"end": 6125,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 6102,
											"end": 6125,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6102,
											"end": 6125,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "99"
										},
										{
											"begin": 6102,
											"end": 6125,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6102,
											"end": 6125,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 6102,
											"end": 6125,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6156,
											"end": 6187,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 6156,
											"end": 6187,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 6156,
											"end": 6187,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6156,
											"end": 6187,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6156,
											"end": 6187,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6156,
											"end": 6187,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 6156,
											"end": 6187,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6156,
											"end": 6187,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 6156,
											"end": 6187,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6156,
											"end": 6187,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 6156,
											"end": 6187,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 5855,
											"end": 6348,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6212,
											"end": 6237,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "195"
										},
										{
											"begin": 6212,
											"end": 6237,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 6212,
											"end": 6237,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6212,
											"end": 6237,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6212,
											"end": 6237,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 6212,
											"end": 6237,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 6212,
											"end": 6237,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6212,
											"end": 6237,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 6212,
											"end": 6237,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6212,
											"end": 6237,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "195"
										},
										{
											"begin": 6212,
											"end": 6237,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6263,
											"end": 6289,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 6263,
											"end": 6289,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6263,
											"end": 6289,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6263,
											"end": 6289,
											"modifierDepth": 1,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6313,
											"end": 6337,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "196"
										},
										{
											"begin": 6313,
											"end": 6337,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 6313,
											"end": 6337,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6313,
											"end": 6337,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6263,
											"end": 6278,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6313,
											"end": 6337,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 6313,
											"end": 6337,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6313,
											"end": 6337,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "196"
										},
										{
											"begin": 6313,
											"end": 6337,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5855,
											"end": 6348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5816,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5809,
											"end": 5840,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5840,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFF000000000000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFF0000000000000000"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 5852,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFF00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "OR",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 5809,
											"end": 6348,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "199"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 5809,
											"end": 6348,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "tag",
											"source": 14,
											"value": "199"
										},
										{
											"begin": 5809,
											"end": 6348,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4738,
											"end": 6355,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "tag",
											"source": 14,
											"value": "42"
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10652,
											"end": 10671,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10681,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10705,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 10674,
											"end": 10717,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10802,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10802,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10781,
											"end": 10802,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10802,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10802,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 10781,
											"end": 10802,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "204"
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "204"
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 10781,
											"end": 10829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "tag",
											"source": 14,
											"value": "204"
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10781,
											"end": 10829,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "205"
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14142,
											"end": 14144,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14124,
											"end": 14145,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14181,
											"end": 14183,
											"name": "PUSH",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14154,
											"end": 14184,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14193,
											"end": 14244,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 13940,
											"end": 14285,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "tag",
											"source": 14,
											"value": "205"
										},
										{
											"begin": 10773,
											"end": 10855,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10917,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10917,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10902,
											"end": 10917,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10917,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10917,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 10902,
											"end": 10917,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10922,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10922,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10959,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 10902,
											"end": 10959,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 10944,
											"end": 10959,
											"name": "TIMESTAMP",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 10926,
											"end": 10941,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10926,
											"end": 10959,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 10902,
											"end": 10959,
											"name": "tag",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 10902,
											"end": 10959,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "208"
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 16045,
											"end": 16047,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16027,
											"end": 16048,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16084,
											"end": 16086,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 16064,
											"end": 16082,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 16064,
											"end": 16082,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16064,
											"end": 16082,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16057,
											"end": 16087,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16123,
											"end": 16154,
											"name": "PUSH",
											"source": 16,
											"value": "5472616E73616374696F6E206265666F72652073746172742064617465000000"
										},
										{
											"begin": 16103,
											"end": 16121,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 16103,
											"end": 16121,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16103,
											"end": 16121,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16096,
											"end": 16155,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16172,
											"end": 16190,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 16172,
											"end": 16190,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 15843,
											"end": 16196,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "tag",
											"source": 14,
											"value": "208"
										},
										{
											"begin": 10894,
											"end": 10993,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11024,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11024,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11011,
											"end": 11024,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11024,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11024,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 11011,
											"end": 11024,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11029,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11029,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11065,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "211"
										},
										{
											"begin": 11011,
											"end": 11065,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11033,
											"end": 11046,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11033,
											"end": 11046,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 11050,
											"end": 11065,
											"name": "TIMESTAMP",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11033,
											"end": 11046,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11033,
											"end": 11046,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11033,
											"end": 11046,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 11033,
											"end": 11046,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 11033,
											"end": 11046,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11033,
											"end": 11065,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 11033,
											"end": 11065,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11011,
											"end": 11065,
											"name": "tag",
											"source": 14,
											"value": "211"
										},
										{
											"begin": 11011,
											"end": 11065,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "212"
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 16403,
											"end": 16405,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16385,
											"end": 16406,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16442,
											"end": 16444,
											"name": "PUSH",
											"source": 16,
											"value": "1A"
										},
										{
											"begin": 16422,
											"end": 16440,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 16422,
											"end": 16440,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16422,
											"end": 16440,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16415,
											"end": 16445,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16481,
											"end": 16509,
											"name": "PUSH",
											"source": 16,
											"value": "5472616E73616374696F6E20616674657220656E642064617465000000000000"
										},
										{
											"begin": 16461,
											"end": 16479,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 16461,
											"end": 16479,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16461,
											"end": 16479,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16454,
											"end": 16510,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16527,
											"end": 16545,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 16527,
											"end": 16545,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 16201,
											"end": 16551,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "tag",
											"source": 14,
											"value": "212"
										},
										{
											"begin": 11003,
											"end": 11096,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11155,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11155,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11155,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 11141,
											"end": 11155,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11155,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11155,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 11141,
											"end": 11155,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11160,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11160,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11203,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "215"
										},
										{
											"begin": 11141,
											"end": 11203,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11189,
											"end": 11203,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "216"
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11175,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "217"
										},
										{
											"begin": 11164,
											"end": 11185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "tag",
											"source": 14,
											"value": "216"
										},
										{
											"begin": 11164,
											"end": 11185,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11203,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 11164,
											"end": 11203,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11203,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 11164,
											"end": 11203,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11203,
											"name": "tag",
											"source": 14,
											"value": "215"
										},
										{
											"begin": 11141,
											"end": 11203,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "218"
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 16991,
											"end": 16993,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16973,
											"end": 16994,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17030,
											"end": 17032,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 17010,
											"end": 17028,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 17010,
											"end": 17028,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 17010,
											"end": 17028,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17003,
											"end": 17033,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17069,
											"end": 17103,
											"name": "PUSH",
											"source": 16,
											"value": "546F6F206D616E792072657175657374656420666F72207468697320636C6169"
										},
										{
											"begin": 17049,
											"end": 17067,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 17049,
											"end": 17067,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 17049,
											"end": 17067,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17042,
											"end": 17104,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17140,
											"end": 17143,
											"name": "PUSH",
											"source": 16,
											"value": "6D00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 17120,
											"end": 17138,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 17120,
											"end": 17138,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 17120,
											"end": 17138,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17113,
											"end": 17144,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17161,
											"end": 17180,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 17161,
											"end": 17180,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 16789,
											"end": 17186,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "tag",
											"source": 14,
											"value": "218"
										},
										{
											"begin": 11133,
											"end": 11241,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11283,
											"end": 11294,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11283,
											"end": 11294,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 11260,
											"end": 11280,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11260,
											"end": 11280,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11283,
											"end": 11296,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 11283,
											"end": 11296,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11283,
											"end": 11294,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 11283,
											"end": 11294,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11283,
											"end": 11294,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 11283,
											"end": 11296,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "217"
										},
										{
											"begin": 11283,
											"end": 11296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11283,
											"end": 11296,
											"name": "tag",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 11283,
											"end": 11296,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11260,
											"end": 11296,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11317,
											"end": 11341,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 11358,
											"end": 11374,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11358,
											"end": 11374,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11358,
											"end": 11374,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 11260,
											"end": 11296,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11260,
											"end": 11296,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11260,
											"end": 11296,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11358,
											"end": 11380,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11354,
											"end": 12241,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "222"
										},
										{
											"begin": 11354,
											"end": 12241,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11435,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 11404,
											"end": 11435,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11435,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11435,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11435,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11471,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11471,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11471,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "223"
										},
										{
											"begin": 11404,
											"end": 11471,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11439,
											"end": 11471,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 11439,
											"end": 11471,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 11439,
											"end": 11471,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11439,
											"end": 11471,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11439,
											"end": 11471,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 11404,
											"end": 11471,
											"name": "tag",
											"source": 14,
											"value": "223"
										},
										{
											"begin": 11404,
											"end": 11471,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "224"
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 17393,
											"end": 17395,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 17375,
											"end": 17396,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17432,
											"end": 17434,
											"name": "PUSH",
											"source": 16,
											"value": "D"
										},
										{
											"begin": 17412,
											"end": 17430,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 17412,
											"end": 17430,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 17412,
											"end": 17430,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17405,
											"end": 17435,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17471,
											"end": 17486,
											"name": "PUSH",
											"source": 16,
											"value": "496E76616C696420696E70757400000000000000000000000000000000000000"
										},
										{
											"begin": 17451,
											"end": 17469,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 17451,
											"end": 17469,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 17451,
											"end": 17469,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17444,
											"end": 17487,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17504,
											"end": 17522,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 17504,
											"end": 17522,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 17191,
											"end": 17528,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "tag",
											"source": 14,
											"value": "224"
										},
										{
											"begin": 11396,
											"end": 11489,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11535,
											"end": 11541,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "tag",
											"source": 14,
											"value": "227"
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11551,
											"end": 11560,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 11547,
											"end": 11560,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 11547,
											"end": 11560,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11547,
											"end": 11548,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11547,
											"end": 11560,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11582,
											"end": 11598,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11601,
											"end": 11612,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11612,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 11613,
											"end": 11614,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "231"
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "231"
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 11601,
											"end": 11615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "tag",
											"source": 14,
											"value": "231"
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "233"
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 11601,
											"end": 11615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "tag",
											"source": 14,
											"value": "233"
										},
										{
											"begin": 11601,
											"end": 11615,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11582,
											"end": 11615,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11582,
											"end": 11615,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11661,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11664,
											"end": 11676,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11676,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 11677,
											"end": 11678,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 11664,
											"end": 11679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "tag",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "236"
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "237"
										},
										{
											"begin": 11664,
											"end": 11679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "tag",
											"source": 14,
											"value": "236"
										},
										{
											"begin": 11664,
											"end": 11679,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11714,
											"end": 11802,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 11714,
											"end": 11802,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11736,
											"end": 11741,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 11736,
											"end": 11741,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11743,
											"end": 11765,
											"name": "DUP15",
											"source": 14
										},
										{
											"begin": 11743,
											"end": 11765,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11767,
											"end": 11777,
											"name": "DUP14",
											"source": 14
										},
										{
											"begin": 11779,
											"end": 11788,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11679,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 11714,
											"end": 11735,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "239"
										},
										{
											"begin": 11714,
											"end": 11802,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11714,
											"end": 11802,
											"name": "tag",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 11714,
											"end": 11802,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11832,
											"end": 11835,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 11832,
											"end": 11835,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "227"
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "tag",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11530,
											"end": 11852,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11354,
											"end": 12241,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "241"
										},
										{
											"begin": 11354,
											"end": 12241,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11354,
											"end": 12241,
											"name": "tag",
											"source": 14,
											"value": "222"
										},
										{
											"begin": 11354,
											"end": 12241,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 11917,
											"end": 11932,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11917,
											"end": 11937,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11913,
											"end": 12218,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "241"
										},
										{
											"begin": 11913,
											"end": 12218,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 11980,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12004,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "DUP13",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12016,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 12017,
											"end": 12027,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12028,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12042,
											"end": 12057,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "242"
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 11965,
											"end": 12038,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "tag",
											"source": 14,
											"value": "242"
										},
										{
											"begin": 11965,
											"end": 12038,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12057,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 11965,
											"end": 12057,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "244"
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 18607,
											"end": 18609,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 18589,
											"end": 18610,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 18646,
											"end": 18648,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 18626,
											"end": 18644,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 18626,
											"end": 18644,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 18626,
											"end": 18644,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 18619,
											"end": 18649,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 18685,
											"end": 18719,
											"name": "PUSH",
											"source": 16,
											"value": "546F6F206D616E792072657175657374656420666F7220746869732077616C6C"
										},
										{
											"begin": 18665,
											"end": 18683,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 18665,
											"end": 18683,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 18665,
											"end": 18683,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 18658,
											"end": 18720,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 18756,
											"end": 18760,
											"name": "PUSH",
											"source": 16,
											"value": "6574000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 18736,
											"end": 18754,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 18736,
											"end": 18754,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 18736,
											"end": 18754,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 18729,
											"end": 18761,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 18778,
											"end": 18797,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 18778,
											"end": 18797,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 18405,
											"end": 18803,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "tag",
											"source": 14,
											"value": "244"
										},
										{
											"begin": 11957,
											"end": 12096,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12140,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12164,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "DUP12",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12176,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 12177,
											"end": 12187,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12188,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12188,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12188,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12188,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12188,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12188,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12188,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12125,
											"end": 12201,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 11913,
											"end": 12218,
											"name": "tag",
											"source": 14,
											"value": "241"
										},
										{
											"begin": 11913,
											"end": 12218,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "E00AAB4B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12343,
											"end": 12353,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 18980,
											"end": 19054,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 19102,
											"end": 19108,
											"name": "PUSH",
											"source": 16,
											"value": "FFFF"
										},
										{
											"begin": 19090,
											"end": 19109,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 19090,
											"end": 19109,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 19070,
											"end": 19088,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 19070,
											"end": 19088,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 19070,
											"end": 19088,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 19063,
											"end": 19110,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12250,
											"end": 12278,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12250,
											"end": 12278,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12281,
											"end": 12342,
											"name": "DUP12",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12342,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12342,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12342,
											"name": "PUSH",
											"source": 14,
											"value": "E00AAB4B"
										},
										{
											"begin": 12281,
											"end": 12342,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 18953,
											"end": 18971,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 18953,
											"end": 18971,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "GAS",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "CALL",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "250"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "tag",
											"source": 14,
											"value": "250"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "252"
										},
										{
											"begin": 12281,
											"end": 12365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "tag",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 12281,
											"end": 12365,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12250,
											"end": 12365,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12250,
											"end": 12365,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12380,
											"end": 12386,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "tag",
											"source": 14,
											"value": "253"
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12396,
											"end": 12405,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 12392,
											"end": 12405,
											"name": "PUSH",
											"source": 14,
											"value": "FFFF"
										},
										{
											"begin": 12392,
											"end": 12405,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12392,
											"end": 12393,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12392,
											"end": 12405,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12497,
											"end": 12507,
											"name": "DUP12",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12530,
											"end": 12531,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12517,
											"end": 12529,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 12517,
											"end": 12531,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "256"
										},
										{
											"begin": 12517,
											"end": 12531,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12517,
											"end": 12531,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12517,
											"end": 12531,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 12517,
											"end": 12531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12517,
											"end": 12531,
											"name": "tag",
											"source": 14,
											"value": "256"
										},
										{
											"begin": 12517,
											"end": 12531,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12478,
											"end": 12533,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "DUP13",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12435,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12459,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12471,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12471,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12472,
											"end": 12473,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 12472,
											"end": 12473,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "258"
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "258"
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 12460,
											"end": 12474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "tag",
											"source": 14,
											"value": "258"
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12460,
											"end": 12474,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 12423,
											"end": 12475,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 12423,
											"end": 12533,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 12559,
											"end": 12562,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "253"
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "tag",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 12375,
											"end": 12575,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 20594,
											"end": 20600,
											"name": "PUSH",
											"source": 16,
											"value": "FFFF"
										},
										{
											"begin": 20582,
											"end": 20601,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 20582,
											"end": 20601,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 20564,
											"end": 20602,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 20564,
											"end": 20602,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12629,
											"end": 12639,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 12629,
											"end": 12639,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "DUP13",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "PUSH",
											"source": 14,
											"value": "74F5D3254DFA39A7B1217A27D5D9B3E061EAFE11720ECA1CF499DA2DC1EB1259"
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 20552,
											"end": 20554,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 20537,
											"end": 20555,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12590,
											"end": 12651,
											"name": "LOG3",
											"source": 14
										},
										{
											"begin": 10642,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10642,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10642,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 12658,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "tag",
											"source": 14,
											"value": "46"
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8308,
											"end": 8314,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8355,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8379,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8348,
											"end": 8391,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 8308,
											"end": 8314,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8430,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8430,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8409,
											"end": 8430,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8430,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8430,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 8409,
											"end": 8430,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "265"
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "265"
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 8409,
											"end": 8457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "tag",
											"source": 14,
											"value": "265"
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8409,
											"end": 8457,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14142,
											"end": 14144,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14124,
											"end": 14145,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14181,
											"end": 14183,
											"name": "PUSH",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14154,
											"end": 14184,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14193,
											"end": 14244,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 13940,
											"end": 14285,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "tag",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 8401,
											"end": 8483,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8501,
											"end": 8516,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8501,
											"end": 8516,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8501,
											"end": 8516,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8501,
											"end": 8516,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 8501,
											"end": 8516,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8501,
											"end": 8516,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8501,
											"end": 8516,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8501,
											"end": 8521,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "268"
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 20815,
											"end": 20817,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 20797,
											"end": 20818,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 20854,
											"end": 20856,
											"name": "PUSH",
											"source": 16,
											"value": "36"
										},
										{
											"begin": 20834,
											"end": 20852,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 20834,
											"end": 20852,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 20834,
											"end": 20852,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20827,
											"end": 20857,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 20893,
											"end": 20927,
											"name": "PUSH",
											"source": 16,
											"value": "43616E206F6E6C7920726574726965766520666F72206E6F6E2D6D65726B6C65"
										},
										{
											"begin": 20873,
											"end": 20891,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 20873,
											"end": 20891,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 20873,
											"end": 20891,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20866,
											"end": 20928,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 20964,
											"end": 20988,
											"name": "PUSH",
											"source": 16,
											"value": "20636C61696D7320776974682077616C6C65744D617800000000000000000000"
										},
										{
											"begin": 20944,
											"end": 20962,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 20944,
											"end": 20962,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 20944,
											"end": 20962,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20937,
											"end": 20989,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21006,
											"end": 21025,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 21006,
											"end": 21025,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 20613,
											"end": 21031,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "tag",
											"source": 14,
											"value": "268"
										},
										{
											"begin": 8493,
											"end": 8580,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8620,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8644,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8656,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 8605,
											"end": 8664,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8672,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "tag",
											"source": 14,
											"value": "52"
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8874,
											"end": 8893,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8903,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8927,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 8896,
											"end": 8939,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9015,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9015,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8994,
											"end": 9015,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9015,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9015,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 8994,
											"end": 9015,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "275"
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "275"
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 8994,
											"end": 9042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "tag",
											"source": 14,
											"value": "275"
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8994,
											"end": 9042,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14142,
											"end": 14144,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14124,
											"end": 14145,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14181,
											"end": 14183,
											"name": "PUSH",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14154,
											"end": 14184,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14193,
											"end": 14244,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 13940,
											"end": 14285,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "tag",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 8986,
											"end": 9068,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9130,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9130,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9115,
											"end": 9130,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9130,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9130,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 9115,
											"end": 9130,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9135,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9135,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9172,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "278"
										},
										{
											"begin": 9115,
											"end": 9172,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9139,
											"end": 9154,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9139,
											"end": 9154,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 9157,
											"end": 9172,
											"name": "TIMESTAMP",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9139,
											"end": 9154,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9139,
											"end": 9154,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9139,
											"end": 9154,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9139,
											"end": 9154,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 9139,
											"end": 9154,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9139,
											"end": 9172,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 9115,
											"end": 9172,
											"name": "tag",
											"source": 14,
											"value": "278"
										},
										{
											"begin": 9115,
											"end": 9172,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 16045,
											"end": 16047,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16027,
											"end": 16048,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16084,
											"end": 16086,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 16064,
											"end": 16082,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 16064,
											"end": 16082,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16064,
											"end": 16082,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16057,
											"end": 16087,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16123,
											"end": 16154,
											"name": "PUSH",
											"source": 16,
											"value": "5472616E73616374696F6E206265666F72652073746172742064617465000000"
										},
										{
											"begin": 16103,
											"end": 16121,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 16103,
											"end": 16121,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16103,
											"end": 16121,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16096,
											"end": 16155,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16172,
											"end": 16190,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 16172,
											"end": 16190,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 15843,
											"end": 16196,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "tag",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 9107,
											"end": 9206,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9237,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9237,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9224,
											"end": 9237,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9237,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9237,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 9224,
											"end": 9237,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9242,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9242,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9278,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 9224,
											"end": 9278,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9246,
											"end": 9259,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9246,
											"end": 9259,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 9263,
											"end": 9278,
											"name": "TIMESTAMP",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9246,
											"end": 9259,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9246,
											"end": 9259,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9246,
											"end": 9259,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9246,
											"end": 9259,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 9246,
											"end": 9259,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9246,
											"end": 9278,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 9246,
											"end": 9278,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 9224,
											"end": 9278,
											"name": "tag",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 9224,
											"end": 9278,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "282"
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 16403,
											"end": 16405,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16385,
											"end": 16406,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16442,
											"end": 16444,
											"name": "PUSH",
											"source": 16,
											"value": "1A"
										},
										{
											"begin": 16422,
											"end": 16440,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 16422,
											"end": 16440,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16422,
											"end": 16440,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16415,
											"end": 16445,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16481,
											"end": 16509,
											"name": "PUSH",
											"source": 16,
											"value": "5472616E73616374696F6E20616674657220656E642064617465000000000000"
										},
										{
											"begin": 16461,
											"end": 16479,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 16461,
											"end": 16479,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16461,
											"end": 16479,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16454,
											"end": 16510,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 16527,
											"end": 16545,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 16527,
											"end": 16545,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 16201,
											"end": 16551,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "tag",
											"source": 14,
											"value": "282"
										},
										{
											"begin": 9216,
											"end": 9309,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9368,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9368,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9368,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 9354,
											"end": 9368,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9368,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9368,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 9354,
											"end": 9368,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9373,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9373,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9405,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 9354,
											"end": 9405,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9391,
											"end": 9405,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9377,
											"end": 9388,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9377,
											"end": 9388,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9377,
											"end": 9405,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 9354,
											"end": 9405,
											"name": "tag",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 9354,
											"end": 9405,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 21238,
											"end": 21240,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 21220,
											"end": 21241,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21277,
											"end": 21279,
											"name": "PUSH",
											"source": 16,
											"value": "2C"
										},
										{
											"begin": 21257,
											"end": 21275,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 21257,
											"end": 21275,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 21257,
											"end": 21275,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 21250,
											"end": 21280,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21316,
											"end": 21350,
											"name": "PUSH",
											"source": 16,
											"value": "4D6178696D756D20746F6B656E7320616C7265616479206D696E74656420666F"
										},
										{
											"begin": 21296,
											"end": 21314,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 21296,
											"end": 21314,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 21296,
											"end": 21314,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 21289,
											"end": 21351,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21387,
											"end": 21401,
											"name": "PUSH",
											"source": 16,
											"value": "72207468697320636C61696D0000000000000000000000000000000000000000"
										},
										{
											"begin": 21367,
											"end": 21385,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 21367,
											"end": 21385,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 21367,
											"end": 21385,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 21360,
											"end": 21402,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21419,
											"end": 21438,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 21419,
											"end": 21438,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 21036,
											"end": 21444,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "tag",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 9346,
											"end": 9454,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9469,
											"end": 9485,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 9469,
											"end": 9485,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9469,
											"end": 9485,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9469,
											"end": 9485,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 9469,
											"end": 9491,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 9465,
											"end": 9988,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "288"
										},
										{
											"begin": 9465,
											"end": 9988,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "289"
										},
										{
											"begin": 9556,
											"end": 9561,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9563,
											"end": 9585,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 9587,
											"end": 9597,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 9599,
											"end": 9608,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 9610,
											"end": 9621,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 9610,
											"end": 9621,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9534,
											"end": 9555,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "239"
										},
										{
											"begin": 9534,
											"end": 9555,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9534,
											"end": 9622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "tag",
											"source": 14,
											"value": "289"
										},
										{
											"begin": 9534,
											"end": 9622,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9465,
											"end": 9988,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "291"
										},
										{
											"begin": 9465,
											"end": 9988,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9465,
											"end": 9988,
											"name": "tag",
											"source": 14,
											"value": "288"
										},
										{
											"begin": 9465,
											"end": 9988,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 9688,
											"end": 9703,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9688,
											"end": 9708,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 9684,
											"end": 9978,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "291"
										},
										{
											"begin": 9684,
											"end": 9978,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9751,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9775,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9787,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 9788,
											"end": 9798,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 9736,
											"end": 9799,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 9802,
											"end": 9817,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "292"
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 21651,
											"end": 21653,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 21633,
											"end": 21654,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21690,
											"end": 21692,
											"name": "PUSH",
											"source": 16,
											"value": "2D"
										},
										{
											"begin": 21670,
											"end": 21688,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 21670,
											"end": 21688,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 21670,
											"end": 21688,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 21663,
											"end": 21693,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21729,
											"end": 21763,
											"name": "PUSH",
											"source": 16,
											"value": "4D6178696D756D20746F6B656E7320616C7265616479206D696E74656420666F"
										},
										{
											"begin": 21709,
											"end": 21727,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 21709,
											"end": 21727,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 21709,
											"end": 21727,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 21702,
											"end": 21764,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21800,
											"end": 21815,
											"name": "PUSH",
											"source": 16,
											"value": "7220746869732077616C6C657400000000000000000000000000000000000000"
										},
										{
											"begin": 21780,
											"end": 21798,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 21780,
											"end": 21798,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 21780,
											"end": 21798,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 21773,
											"end": 21816,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 21833,
											"end": 21852,
											"name": "PUSH",
											"source": 16,
											"value": "84"
										},
										{
											"begin": 21833,
											"end": 21852,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 21449,
											"end": 21858,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "tag",
											"source": 14,
											"value": "292"
										},
										{
											"begin": 9728,
											"end": 9867,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9911,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9935,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9947,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 9948,
											"end": 9958,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9959,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9959,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9959,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9959,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9959,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9959,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9959,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9961,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9961,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9961,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 9896,
											"end": 9961,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9961,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9896,
											"end": 9961,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 9684,
											"end": 9978,
											"name": "tag",
											"source": 14,
											"value": "291"
										},
										{
											"begin": 9684,
											"end": 9978,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10008,
											"end": 10021,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "2928CA5800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10131,
											"end": 10141,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9841,
											"end": 9915,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10074,
											"end": 10130,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10130,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10130,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10130,
											"name": "PUSH",
											"source": 14,
											"value": "2928CA58"
										},
										{
											"begin": 10074,
											"end": 10130,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9814,
											"end": 9832,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 9814,
											"end": 9832,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "GAS",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "CALL",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "tag",
											"source": 14,
											"value": "297"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "298"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "299"
										},
										{
											"begin": 10074,
											"end": 10142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "tag",
											"source": 14,
											"value": "298"
										},
										{
											"begin": 10074,
											"end": 10142,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10326,
											"end": 10337,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 10326,
											"end": 10337,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 10326,
											"end": 10337,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10326,
											"end": 10337,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10326,
											"end": 10337,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10326,
											"end": 10337,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10294,
											"end": 10338,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "DUP15",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10255,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10291,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10338,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 10354,
											"end": 10399,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10354,
											"end": 10399,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10053,
											"end": 10142,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10053,
											"end": 10142,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10313,
											"end": 10323,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 10313,
											"end": 10323,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10243,
											"end": 10279,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10354,
											"end": 10399,
											"name": "PUSH",
											"source": 14,
											"value": "5D404F369772CFAB2B65717FCA9BC2077EFEAB89A0DBEC036BF0C13783154EB1"
										},
										{
											"begin": 10354,
											"end": 10399,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10354,
											"end": 10399,
											"name": "LOG3",
											"source": 14
										},
										{
											"begin": 8864,
											"end": 10406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8864,
											"end": 10406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8730,
											"end": 10406,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "tag",
											"source": 14,
											"value": "56"
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7142,
											"end": 7146,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7187,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7211,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 7142,
											"end": 7146,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7262,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7262,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7241,
											"end": 7262,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7262,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7262,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 7241,
											"end": 7262,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "304"
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "304"
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 7241,
											"end": 7289,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "tag",
											"source": 14,
											"value": "304"
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7289,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "305"
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14142,
											"end": 14144,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14124,
											"end": 14145,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14181,
											"end": 14183,
											"name": "PUSH",
											"source": 16,
											"value": "15"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14161,
											"end": 14179,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14154,
											"end": 14184,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10DB185A5B481B9BDD081A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14200,
											"end": 14218,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 14193,
											"end": 14244,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 14261,
											"end": 14279,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 13940,
											"end": 14285,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "tag",
											"source": 14,
											"value": "305"
										},
										{
											"begin": 7233,
											"end": 7315,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7333,
											"end": 7338,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7333,
											"end": 7349,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 7333,
											"end": 7349,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7333,
											"end": 7349,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 7333,
											"end": 7355,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7333,
											"end": 7355,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "307"
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 22254,
											"end": 22256,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 22236,
											"end": 22257,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 22293,
											"end": 22295,
											"name": "PUSH",
											"source": 16,
											"value": "1C"
										},
										{
											"begin": 22273,
											"end": 22291,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 22273,
											"end": 22291,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 22273,
											"end": 22291,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 22266,
											"end": 22296,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 22332,
											"end": 22362,
											"name": "PUSH",
											"source": 16,
											"value": "43616E206F6E6C7920636865636B206D65726B6C6520636C61696D7300000000"
										},
										{
											"begin": 22312,
											"end": 22330,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 22312,
											"end": 22330,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 22312,
											"end": 22330,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 22305,
											"end": 22363,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 22380,
											"end": 22398,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 22380,
											"end": 22398,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 22052,
											"end": 22404,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "tag",
											"source": 14,
											"value": "307"
										},
										{
											"begin": 7325,
											"end": 7388,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7398,
											"end": 7420,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7492,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7516,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7528,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 7423,
											"end": 7437,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFF"
										},
										{
											"begin": 7436,
											"end": 7437,
											"name": "PUSH",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 7423,
											"end": 7437,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 7423,
											"end": 7437,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7423,
											"end": 7437,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 7423,
											"end": 7437,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 7475,
											"end": 7544,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 7576,
											"end": 7577,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1007,
											"end": 1011,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 7582,
											"end": 7612,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7582,
											"end": 7612,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7576,
											"end": 7613,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 7630,
											"end": 7661,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7630,
											"end": 7666,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7630,
											"end": 7666,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7019,
											"end": 7673,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "tag",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13852,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13867,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13891,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13855,
											"end": 13900,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13795,
											"end": 13812,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 13795,
											"end": 13812,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13824,
											"end": 13900,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "312"
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 22611,
											"end": 22613,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 22593,
											"end": 22614,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 22650,
											"end": 22652,
											"name": "PUSH",
											"source": 16,
											"value": "14"
										},
										{
											"begin": 22630,
											"end": 22648,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 22630,
											"end": 22648,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 22630,
											"end": 22648,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 22623,
											"end": 22653,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 22689,
											"end": 22711,
											"name": "PUSH",
											"source": 16,
											"value": "546F6B656E20646F6573206E6F74206578697374000000000000000000000000"
										},
										{
											"begin": 22669,
											"end": 22687,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 22669,
											"end": 22687,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 22669,
											"end": 22687,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 22662,
											"end": 22712,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 22729,
											"end": 22747,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 22729,
											"end": 22747,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 22409,
											"end": 22753,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "tag",
											"source": 14,
											"value": "312"
										},
										{
											"begin": 13910,
											"end": 13968,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 13996,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14006,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14030,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 14031,
											"end": 14052,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 14031,
											"end": 14052,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13999,
											"end": 14053,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "100000000"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "316"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "316"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 13978,
											"end": 14053,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "tag",
											"source": 14,
											"value": "316"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 13978,
											"end": 14053,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "tag",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 13978,
											"end": 14053,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "tag",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 13978,
											"end": 14053,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "tag",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "321"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "321"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "tag",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "tag",
											"source": 14,
											"value": "323"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "323"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "tag",
											"source": 14,
											"value": "321"
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14084,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14064,
											"end": 14089,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13978,
											"end": 14053,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14128,
											"end": 14151,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 14128,
											"end": 14151,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14103,
											"end": 14108,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14124,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 14103,
											"end": 14124,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14124,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "327"
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "327"
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 14103,
											"end": 14151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "tag",
											"source": 14,
											"value": "327"
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14103,
											"end": 14151,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 14099,
											"end": 14303,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "328"
										},
										{
											"begin": 14099,
											"end": 14303,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "PUSH",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "PUSH",
											"source": 14,
											"value": "68747470733A2F2F617277656176652E6E65742F000000000000000000000000"
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14176,
											"end": 14190,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14099,
											"end": 14303,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 14099,
											"end": 14303,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 14099,
											"end": 14303,
											"name": "tag",
											"source": 14,
											"value": "328"
										},
										{
											"begin": 14099,
											"end": 14303,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14236,
											"end": 14256,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 14211,
											"end": 14216,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14232,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 14211,
											"end": 14232,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14232,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "90"
										},
										{
											"begin": 14211,
											"end": 14256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "tag",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14211,
											"end": 14256,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 14207,
											"end": 14303,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 14207,
											"end": 14303,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "PUSH",
											"source": 14,
											"value": "7"
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "PUSH",
											"source": 14,
											"value": "697066733A2F2F00000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14281,
											"end": 14292,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14207,
											"end": 14303,
											"name": "tag",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 14207,
											"end": 14303,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14350,
											"end": 14364,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 14350,
											"end": 14364,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14350,
											"end": 14364,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14350,
											"end": 14364,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "335"
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14342,
											"end": 14348,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 14342,
											"end": 14348,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "336"
										},
										{
											"begin": 14325,
											"end": 14365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "tag",
											"source": 14,
											"value": "335"
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14325,
											"end": 14365,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14312,
											"end": 14366,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 14312,
											"end": 14366,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14457,
											"end": 14462,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14457,
											"end": 14472,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 14457,
											"end": 14472,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14457,
											"end": 14472,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14452,
											"end": 14581,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "337"
										},
										{
											"begin": 14452,
											"end": 14581,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14518,
											"end": 14521,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 14528,
											"end": 14568,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "338"
										},
										{
											"begin": 14536,
											"end": 14546,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 14536,
											"end": 14556,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14536,
											"end": 14556,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14536,
											"end": 14556,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14528,
											"end": 14557,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFF"
										},
										{
											"begin": 14528,
											"end": 14557,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 14528,
											"end": 14566,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "339"
										},
										{
											"begin": 14528,
											"end": 14568,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 14528,
											"end": 14568,
											"name": "tag",
											"source": 14,
											"value": "338"
										},
										{
											"begin": 14528,
											"end": 14568,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "340"
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "341"
										},
										{
											"begin": 14501,
											"end": 14569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "tag",
											"source": 14,
											"value": "340"
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 14501,
											"end": 14569,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14488,
											"end": 14570,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 14488,
											"end": 14570,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14452,
											"end": 14581,
											"name": "tag",
											"source": 14,
											"value": "337"
										},
										{
											"begin": 14452,
											"end": 14581,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13814,
											"end": 14587,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13814,
											"end": 14587,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13814,
											"end": 14587,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13697,
											"end": 14587,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "tag",
											"source": 14,
											"value": "71"
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7883,
											"end": 7903,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 7935,
											"end": 7946,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "345"
										},
										{
											"begin": 7924,
											"end": 7954,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "tag",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "tag",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7924,
											"end": 7954,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7915,
											"end": 7954,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7915,
											"end": 7954,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7969,
											"end": 7975,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "tag",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7981,
											"end": 8003,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7981,
											"end": 8003,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7981,
											"end": 8003,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "348"
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8036,
											"end": 8102,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "350"
										},
										{
											"begin": 8051,
											"end": 8073,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 8075,
											"end": 8085,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8098,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8098,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 8099,
											"end": 8100,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "352"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "352"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 8087,
											"end": 8101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "tag",
											"source": 14,
											"value": "352"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "54"
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8087,
											"end": 8101,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 8087,
											"end": 8101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8036,
											"end": 8102,
											"name": "tag",
											"source": 14,
											"value": "350"
										},
										{
											"begin": 8036,
											"end": 8102,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8030,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8031,
											"end": 8032,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "355"
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "355"
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 8024,
											"end": 8033,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "tag",
											"source": 14,
											"value": "355"
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8102,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8102,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8102,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8024,
											"end": 8102,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "356"
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "357"
										},
										{
											"begin": 8005,
											"end": 8008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "tag",
											"source": 14,
											"value": "356"
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8005,
											"end": 8008,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "tag",
											"source": 14,
											"value": "348"
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 8113,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7743,
											"end": 8119,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12796,
											"end": 13626,
											"name": "tag",
											"source": 14,
											"value": "239"
										},
										{
											"begin": 12796,
											"end": 13626,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13031,
											"end": 13041,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 24167,
											"end": 24169,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 24163,
											"end": 24178,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 24159,
											"end": 24212,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 24147,
											"end": 24213,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 24251,
											"end": 24254,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 24247,
											"end": 24263,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 24247,
											"end": 24263,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 24247,
											"end": 24263,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 24243,
											"end": 24332,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 24229,
											"end": 24241,
											"name": "PUSH",
											"source": 16,
											"value": "34"
										},
										{
											"begin": 24229,
											"end": 24241,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 24229,
											"end": 24241,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 24222,
											"end": 24333,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12989,
											"end": 13001,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12989,
											"end": 13001,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 24349,
											"end": 24361,
											"name": "PUSH",
											"source": 16,
											"value": "38"
										},
										{
											"begin": 24349,
											"end": 24361,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13014,
											"end": 13053,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13004,
											"end": 13054,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13004,
											"end": 13054,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13004,
											"end": 13054,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13004,
											"end": 13054,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13004,
											"end": 13054,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13004,
											"end": 13054,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 12989,
											"end": 13054,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12989,
											"end": 13054,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13072,
											"end": 13127,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 13091,
											"end": 13102,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13104,
											"end": 13109,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 13104,
											"end": 13120,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 13104,
											"end": 13120,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13104,
											"end": 13120,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13122,
											"end": 13126,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13072,
											"end": 13090,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "362"
										},
										{
											"begin": 13072,
											"end": 13127,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13072,
											"end": 13127,
											"name": "tag",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 13072,
											"end": 13127,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "363"
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 24574,
											"end": 24576,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 24556,
											"end": 24577,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 24613,
											"end": 24615,
											"name": "PUSH",
											"source": 16,
											"value": "1D"
										},
										{
											"begin": 24593,
											"end": 24611,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 24593,
											"end": 24611,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 24593,
											"end": 24611,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 24586,
											"end": 24616,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 24652,
											"end": 24683,
											"name": "PUSH",
											"source": 16,
											"value": "436F756C64206E6F7420766572696679206D65726B6C652070726F6F66000000"
										},
										{
											"begin": 24632,
											"end": 24650,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 24632,
											"end": 24650,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 24632,
											"end": 24650,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 24625,
											"end": 24684,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 24701,
											"end": 24719,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 24701,
											"end": 24719,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 24372,
											"end": 24725,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "tag",
											"source": 14,
											"value": "363"
										},
										{
											"begin": 13064,
											"end": 13161,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13218,
											"end": 13240,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13312,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13336,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13348,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13243,
											"end": 13257,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFF"
										},
										{
											"begin": 13256,
											"end": 13257,
											"name": "PUSH",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 13243,
											"end": 13257,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 13243,
											"end": 13257,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13243,
											"end": 13257,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 13243,
											"end": 13257,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13295,
											"end": 13364,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 13396,
											"end": 13397,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 1007,
											"end": 1011,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 13402,
											"end": 13432,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 13402,
											"end": 13432,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13396,
											"end": 13433,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 13451,
											"end": 13482,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13451,
											"end": 13482,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13451,
											"end": 13482,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13451,
											"end": 13487,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "366"
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 24932,
											"end": 24934,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 24914,
											"end": 24935,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 24971,
											"end": 24973,
											"name": "PUSH",
											"source": 16,
											"value": "E"
										},
										{
											"begin": 24951,
											"end": 24969,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 24951,
											"end": 24969,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 24951,
											"end": 24969,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 24944,
											"end": 24974,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25010,
											"end": 25026,
											"name": "PUSH",
											"source": 16,
											"value": "416C7265616479206D696E746564000000000000000000000000000000000000"
										},
										{
											"begin": 24990,
											"end": 25008,
											"name": "PUSH",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 24990,
											"end": 25008,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 24990,
											"end": 25008,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 24983,
											"end": 25027,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25044,
											"end": 25062,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 25044,
											"end": 25062,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 24730,
											"end": 25068,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "tag",
											"source": 14,
											"value": "366"
										},
										{
											"begin": 13443,
											"end": 13506,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13533,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13557,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13569,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13585,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 13588,
											"end": 13619,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 13588,
											"end": 13619,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13588,
											"end": 13619,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 13588,
											"end": 13619,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13619,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13619,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13516,
											"end": 13619,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12796,
											"end": 13626,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "tag",
											"source": 9,
											"value": "339"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 384,
											"end": 397,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 601,
											"end": 606,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 610,
											"end": 611,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 601,
											"end": 611,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 597,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "370"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 9,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 328,
											"end": 1031,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 597,
											"end": 648,
											"name": "tag",
											"source": 9,
											"value": "370"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 657,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 718,
											"end": 727,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 718,
											"end": 727,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "357"
										},
										{
											"begin": 743,
											"end": 751,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 743,
											"end": 751,
											"name": "tag",
											"source": 9,
											"value": "373"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 743,
											"end": 751,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "374"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 773,
											"end": 775,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "375"
										},
										{
											"begin": 765,
											"end": 775,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 765,
											"end": 775,
											"name": "tag",
											"source": 9,
											"value": "374"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 765,
											"end": 775,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "371"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 9,
											"value": "372"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 795,
											"end": 814,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "377"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "377"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "345"
										},
										{
											"begin": 817,
											"end": 834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 9,
											"value": "377"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "378"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATACOPY",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 9,
											"value": "378"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 795,
											"end": 834,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 795,
											"end": 834,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 9,
											"value": "379"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 851,
											"end": 861,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 851,
											"end": 861,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "380"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "381"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "382"
										},
										{
											"begin": 877,
											"end": 888,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 877,
											"end": 888,
											"name": "tag",
											"source": 9,
											"value": "381"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "383"
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 945,
											"end": 950,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "384"
										},
										{
											"begin": 945,
											"end": 955,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 945,
											"end": 955,
											"name": "tag",
											"source": 9,
											"value": "383"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "385"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 932,
											"end": 934,
											"name": "PUSH",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 932,
											"end": 956,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 932,
											"end": 956,
											"name": "tag",
											"source": 9,
											"value": "385"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 919,
											"end": 958,
											"name": "PUSH",
											"source": 9,
											"value": "F8"
										},
										{
											"begin": 919,
											"end": 958,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 902,
											"end": 908,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 909,
											"end": 915,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "387"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "387"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 902,
											"end": 916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "tag",
											"source": 9,
											"value": "387"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "BYTE",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 902,
											"end": 958,
											"name": "MSTORE8",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "388"
										},
										{
											"begin": 981,
											"end": 983,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "375"
										},
										{
											"begin": 972,
											"end": 983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 972,
											"end": 983,
											"name": "tag",
											"source": 9,
											"value": "388"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 972,
											"end": 983,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "379"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 9,
											"value": "380"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1017,
											"end": 1023,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 328,
											"end": 1031,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 847,
											"end": 1031,
											"name": "tag",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 847,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 968,
											"end": 972,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1020,
											"end": 1024,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 991,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1011,
											"end": 1015,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 991,
											"end": 1003,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "391"
										},
										{
											"begin": 991,
											"end": 1016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 991,
											"end": 1016,
											"name": "tag",
											"source": 10,
											"value": "390"
										},
										{
											"begin": 991,
											"end": 1016,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 991,
											"end": 1024,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 991,
											"end": 1024,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 847,
											"end": 1031,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 847,
											"end": 1031,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 2071,
											"name": "tag",
											"source": 10,
											"value": "391"
										},
										{
											"begin": 1383,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1466,
											"end": 1473,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1508,
											"end": 1512,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1466,
											"end": 1473,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "tag",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1546,
											"end": 1551,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1546,
											"end": 1558,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1542,
											"end": 1543,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1542,
											"end": 1558,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1579,
											"end": 1599,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1602,
											"end": 1607,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1608,
											"end": 1609,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "397"
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "397"
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 1602,
											"end": 1610,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "tag",
											"source": 10,
											"value": "397"
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1602,
											"end": 1610,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1579,
											"end": 1610,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1579,
											"end": 1610,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1644,
											"end": 1656,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1628,
											"end": 1640,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1628,
											"end": 1656,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 25791,
											"end": 25810,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 25791,
											"end": 25810,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25791,
											"end": 25810,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25826,
											"end": 25838,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25826,
											"end": 25838,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 25826,
											"end": 25838,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 25819,
											"end": 25847,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 25819,
											"end": 25847,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25819,
											"end": 25847,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25863,
											"end": 25875,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 25863,
											"end": 25875,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1779,
											"end": 1823,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1824,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1824,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1824,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1824,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1769,
											"end": 1824,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1769,
											"end": 1824,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1754,
											"end": 1824,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1754,
											"end": 1824,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "401"
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "tag",
											"source": 10,
											"value": "398"
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 25791,
											"end": 25810,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 25791,
											"end": 25810,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25791,
											"end": 25810,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25826,
											"end": 25838,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25826,
											"end": 25838,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 25826,
											"end": 25838,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 25819,
											"end": 25847,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 25819,
											"end": 25847,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25819,
											"end": 25847,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25863,
											"end": 25875,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 25863,
											"end": 25875,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1966,
											"end": 2010,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1956,
											"end": 2011,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1956,
											"end": 2011,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 1956,
											"end": 2011,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1956,
											"end": 2011,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1956,
											"end": 2011,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1956,
											"end": 2011,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1941,
											"end": 2011,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1941,
											"end": 2011,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "tag",
											"source": 10,
											"value": "401"
										},
										{
											"begin": 1624,
											"end": 2026,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 1560,
											"end": 1563,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "tag",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1560,
											"end": 1563,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "393"
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "tag",
											"source": 10,
											"value": "394"
										},
										{
											"begin": 1522,
											"end": 2036,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2052,
											"end": 2064,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1383,
											"end": 2071,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1383,
											"end": 2071,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "128"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "404"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "145"
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "404"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "406"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "409"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "406"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "407"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "409"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "407"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "409"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "408"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "409"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "408"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "409"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "410"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "411"
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "410"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "411"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "414"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "410"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "414"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 346,
											"name": "tag",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 14,
											"end": 346,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 72,
											"end": 78,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 125,
											"end": 127,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 113,
											"end": 122,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 104,
											"end": 111,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 100,
											"end": 123,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 96,
											"end": 128,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 93,
											"end": 145,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 93,
											"end": 145,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "431"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 141,
											"end": 142,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 139,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 131,
											"end": 143,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 93,
											"end": 145,
											"name": "tag",
											"source": 16,
											"value": "431"
										},
										{
											"begin": 93,
											"end": 145,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 180,
											"end": 189,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 167,
											"end": 190,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 223,
											"end": 228,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 219,
											"end": 297,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 212,
											"end": 217,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 209,
											"end": 298,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 199,
											"end": 316,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 199,
											"end": 316,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 312,
											"end": 313,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 309,
											"end": 310,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 302,
											"end": 314,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 199,
											"end": 316,
											"name": "tag",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 199,
											"end": 316,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 335,
											"end": 340,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 14,
											"end": 346,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 346,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 639,
											"end": 835,
											"name": "tag",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 639,
											"end": 835,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 707,
											"end": 727,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 707,
											"end": 727,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 756,
											"end": 810,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 756,
											"end": 810,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 746,
											"end": 811,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 746,
											"end": 811,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 736,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 736,
											"end": 829,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 825,
											"end": 826,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 823,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 815,
											"end": 827,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 736,
											"end": 829,
											"name": "tag",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 736,
											"end": 829,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 639,
											"end": 835,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 639,
											"end": 835,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 639,
											"end": 835,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 639,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 840,
											"end": 1004,
											"name": "tag",
											"source": 16,
											"value": "418"
										},
										{
											"begin": 840,
											"end": 1004,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 908,
											"end": 913,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 953,
											"end": 956,
											"name": "PUSH",
											"source": 16,
											"value": "100"
										},
										{
											"begin": 944,
											"end": 950,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 939,
											"end": 942,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 935,
											"end": 951,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 931,
											"end": 957,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 928,
											"end": 974,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 928,
											"end": 974,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "438"
										},
										{
											"begin": 928,
											"end": 974,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 970,
											"end": 971,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 967,
											"end": 968,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 960,
											"end": 972,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 928,
											"end": 974,
											"name": "tag",
											"source": 16,
											"value": "438"
										},
										{
											"begin": 928,
											"end": 974,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 992,
											"end": 998,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 840,
											"end": 1004,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 840,
											"end": 1004,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1009,
											"end": 1455,
											"name": "tag",
											"source": 16,
											"value": "25"
										},
										{
											"begin": 1009,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1112,
											"end": 1118,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1173,
											"end": 1175,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1170,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1152,
											"end": 1159,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1148,
											"end": 1171,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1144,
											"end": 1176,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 1141,
											"end": 1193,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1141,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "440"
										},
										{
											"begin": 1141,
											"end": 1193,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1189,
											"end": 1190,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1186,
											"end": 1187,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1179,
											"end": 1191,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1141,
											"end": 1193,
											"name": "tag",
											"source": 16,
											"value": "440"
										},
										{
											"begin": 1141,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1212,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "441"
										},
										{
											"begin": 1231,
											"end": 1240,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1212,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 1212,
											"end": 1241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1212,
											"end": 1241,
											"name": "tag",
											"source": 16,
											"value": "441"
										},
										{
											"begin": 1212,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1241,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1202,
											"end": 1241,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1292,
											"end": 1294,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1281,
											"end": 1290,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1277,
											"end": 1295,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1264,
											"end": 1296,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1319,
											"end": 1337,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1311,
											"end": 1317,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1308,
											"end": 1338,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 1305,
											"end": 1355,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1305,
											"end": 1355,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "442"
										},
										{
											"begin": 1305,
											"end": 1355,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1351,
											"end": 1352,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1348,
											"end": 1349,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1341,
											"end": 1353,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1305,
											"end": 1355,
											"name": "tag",
											"source": 16,
											"value": "442"
										},
										{
											"begin": 1305,
											"end": 1355,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1374,
											"end": 1449,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "443"
										},
										{
											"begin": 1441,
											"end": 1448,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1432,
											"end": 1438,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1430,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 1417,
											"end": 1439,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1374,
											"end": 1449,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "418"
										},
										{
											"begin": 1374,
											"end": 1449,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1374,
											"end": 1449,
											"name": "tag",
											"source": 16,
											"value": "443"
										},
										{
											"begin": 1374,
											"end": 1449,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1364,
											"end": 1449,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1364,
											"end": 1449,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1364,
											"end": 1449,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1009,
											"end": 1455,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1009,
											"end": 1455,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1009,
											"end": 1455,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1009,
											"end": 1455,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1009,
											"end": 1455,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1009,
											"end": 1455,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1642,
											"end": 1896,
											"name": "tag",
											"source": 16,
											"value": "31"
										},
										{
											"begin": 1642,
											"end": 1896,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1718,
											"end": 1724,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1771,
											"end": 1773,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1759,
											"end": 1768,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1750,
											"end": 1757,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1746,
											"end": 1769,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1742,
											"end": 1774,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 1739,
											"end": 1791,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1739,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "446"
										},
										{
											"begin": 1739,
											"end": 1791,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1787,
											"end": 1788,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1784,
											"end": 1785,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1777,
											"end": 1789,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1739,
											"end": 1791,
											"name": "tag",
											"source": 16,
											"value": "446"
										},
										{
											"begin": 1739,
											"end": 1791,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1810,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "447"
										},
										{
											"begin": 1829,
											"end": 1838,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1810,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 1810,
											"end": 1839,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1810,
											"end": 1839,
											"name": "tag",
											"source": 16,
											"value": "447"
										},
										{
											"begin": 1810,
											"end": 1839,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1800,
											"end": 1839,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 1886,
											"end": 1888,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1871,
											"end": 1889,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1871,
											"end": 1889,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1871,
											"end": 1889,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1871,
											"end": 1889,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1858,
											"end": 1890,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1858,
											"end": 1890,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1642,
											"end": 1896,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2103,
											"end": 2287,
											"name": "tag",
											"source": 16,
											"value": "90"
										},
										{
											"begin": 2103,
											"end": 2287,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2152,
											"end": 2153,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2145,
											"end": 2233,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2252,
											"end": 2256,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 2249,
											"end": 2250,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 2242,
											"end": 2257,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2276,
											"end": 2280,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 2273,
											"end": 2274,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2266,
											"end": 2281,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2292,
											"end": 2592,
											"name": "tag",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 2292,
											"end": 2592,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2379,
											"end": 2380,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 2372,
											"end": 2377,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2369,
											"end": 2381,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2359,
											"end": 2559,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "452"
										},
										{
											"begin": 2359,
											"end": 2559,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2412,
											"end": 2413,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2405,
											"end": 2493,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "PUSH",
											"source": 16,
											"value": "21"
										},
										{
											"begin": 2513,
											"end": 2514,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 2506,
											"end": 2521,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2544,
											"end": 2548,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 2541,
											"end": 2542,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2534,
											"end": 2549,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2359,
											"end": 2559,
											"name": "tag",
											"source": 16,
											"value": "452"
										},
										{
											"begin": 2359,
											"end": 2559,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2568,
											"end": 2586,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2568,
											"end": 2586,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2292,
											"end": 2592,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2597,
											"end": 2855,
											"name": "tag",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 2597,
											"end": 2855,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2669,
											"end": 2670,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "tag",
											"source": 16,
											"value": "454"
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2693,
											"end": 2699,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2690,
											"end": 2691,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2687,
											"end": 2700,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "456"
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2769,
											"end": 2780,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2769,
											"end": 2780,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2769,
											"end": 2780,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2763,
											"end": 2781,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2750,
											"end": 2761,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2750,
											"end": 2761,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2750,
											"end": 2761,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2743,
											"end": 2782,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2715,
											"end": 2717,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2708,
											"end": 2718,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "454"
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "tag",
											"source": 16,
											"value": "456"
										},
										{
											"begin": 2679,
											"end": 2792,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2810,
											"end": 2816,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2807,
											"end": 2808,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2804,
											"end": 2817,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 2801,
											"end": 2849,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2801,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "457"
										},
										{
											"begin": 2801,
											"end": 2849,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2845,
											"end": 2846,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2836,
											"end": 2842,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2831,
											"end": 2834,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2827,
											"end": 2843,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2820,
											"end": 2847,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2801,
											"end": 2849,
											"name": "tag",
											"source": 16,
											"value": "457"
										},
										{
											"begin": 2801,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2801,
											"end": 2849,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2597,
											"end": 2855,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2597,
											"end": 2855,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2597,
											"end": 2855,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2597,
											"end": 2855,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2860,
											"end": 3118,
											"name": "tag",
											"source": 16,
											"value": "423"
										},
										{
											"begin": 2860,
											"end": 3118,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2902,
											"end": 2905,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2940,
											"end": 2945,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2934,
											"end": 2946,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2967,
											"end": 2973,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2962,
											"end": 2965,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 2955,
											"end": 2974,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2983,
											"end": 3046,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "459"
										},
										{
											"begin": 3039,
											"end": 3045,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3032,
											"end": 3036,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3027,
											"end": 3030,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3023,
											"end": 3037,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3016,
											"end": 3020,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3009,
											"end": 3014,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3005,
											"end": 3021,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2983,
											"end": 3046,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 2983,
											"end": 3046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 2983,
											"end": 3046,
											"name": "tag",
											"source": 16,
											"value": "459"
										},
										{
											"begin": 2983,
											"end": 3046,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3100,
											"end": 3102,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 3079,
											"end": 3094,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3075,
											"end": 3104,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3066,
											"end": 3105,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3066,
											"end": 3105,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3066,
											"end": 3105,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3066,
											"end": 3105,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3107,
											"end": 3111,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3062,
											"end": 3112,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3062,
											"end": 3112,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 2860,
											"end": 3118,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2860,
											"end": 3118,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3123,
											"end": 4364,
											"name": "tag",
											"source": 16,
											"value": "34"
										},
										{
											"begin": 3123,
											"end": 4364,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3298,
											"end": 3300,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3287,
											"end": 3296,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3280,
											"end": 3301,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3310,
											"end": 3362,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "461"
										},
										{
											"begin": 3358,
											"end": 3360,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3347,
											"end": 3356,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3343,
											"end": 3361,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3334,
											"end": 3340,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3328,
											"end": 3341,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1977,
											"end": 1987,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1966,
											"end": 1988,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1954,
											"end": 1989,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1954,
											"end": 1989,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1901,
											"end": 1995,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3310,
											"end": 3362,
											"name": "tag",
											"source": 16,
											"value": "461"
										},
										{
											"begin": 3310,
											"end": 3362,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3261,
											"end": 3265,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3409,
											"end": 3411,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 3401,
											"end": 3407,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3397,
											"end": 3412,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3391,
											"end": 3413,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 3422,
											"end": 3473,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "462"
										},
										{
											"begin": 3469,
											"end": 3471,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3458,
											"end": 3467,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3454,
											"end": 3472,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3440,
											"end": 3452,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1977,
											"end": 1987,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1966,
											"end": 1988,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1954,
											"end": 1989,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1954,
											"end": 1989,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1901,
											"end": 1995,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3422,
											"end": 3473,
											"name": "tag",
											"source": 16,
											"value": "462"
										},
										{
											"begin": 3422,
											"end": 3473,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3522,
											"end": 3524,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3510,
											"end": 3525,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3510,
											"end": 3525,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3504,
											"end": 3526,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1977,
											"end": 1987,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1966,
											"end": 1988,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1966,
											"end": 1988,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3584,
											"end": 3586,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3569,
											"end": 3587,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3569,
											"end": 3587,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1954,
											"end": 1989,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3637,
											"end": 3639,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3625,
											"end": 3640,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3625,
											"end": 3640,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3619,
											"end": 3641,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2076,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 2065,
											"end": 2091,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2065,
											"end": 2091,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3699,
											"end": 3702,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3684,
											"end": 3703,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3684,
											"end": 3703,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2053,
											"end": 2092,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3753,
											"end": 3756,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3741,
											"end": 3757,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3741,
											"end": 3757,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3735,
											"end": 3758,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2076,
											"end": 2090,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 2065,
											"end": 2091,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2065,
											"end": 2091,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3816,
											"end": 3819,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2053,
											"end": 2092,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3767,
											"end": 3821,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3873,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 3862,
											"end": 3868,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3858,
											"end": 3874,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3852,
											"end": 3875,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 3884,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "466"
										},
										{
											"begin": 3947,
											"end": 3950,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 3936,
											"end": 3945,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3932,
											"end": 3951,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3916,
											"end": 3930,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3884,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "421"
										},
										{
											"begin": 3884,
											"end": 3952,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3884,
											"end": 3952,
											"name": "tag",
											"source": 16,
											"value": "466"
										},
										{
											"begin": 3884,
											"end": 3952,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4001,
											"end": 4004,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 3989,
											"end": 4005,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3989,
											"end": 4005,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3983,
											"end": 4006,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 421,
											"end": 434,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 421,
											"end": 434,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 414,
											"end": 435,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4062,
											"end": 4065,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 4047,
											"end": 4066,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4047,
											"end": 4066,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 402,
											"end": 436,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4104,
											"end": 4107,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 4092,
											"end": 4108,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 4092,
											"end": 4108,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4086,
											"end": 4109,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 4128,
											"end": 4131,
											"name": "PUSH",
											"source": 16,
											"value": "100"
										},
										{
											"begin": 4147,
											"end": 4165,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 4147,
											"end": 4165,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4147,
											"end": 4165,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4140,
											"end": 4170,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4140,
											"end": 4170,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4140,
											"end": 4170,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4140,
											"end": 4170,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4222,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 4207,
											"end": 4222,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4201,
											"end": 4223,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 4242,
											"end": 4248,
											"name": "PUSH",
											"source": 16,
											"value": "120"
										},
										{
											"begin": 4264,
											"end": 4282,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 4264,
											"end": 4282,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4264,
											"end": 4282,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4257,
											"end": 4287,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 4304,
											"end": 4358,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "380"
										},
										{
											"begin": 4353,
											"end": 4356,
											"name": "PUSH",
											"source": 16,
											"value": "140"
										},
										{
											"begin": 4338,
											"end": 4357,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4338,
											"end": 4357,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4201,
											"end": 4223,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4304,
											"end": 4358,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "423"
										},
										{
											"begin": 4304,
											"end": 4358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4883,
											"name": "tag",
											"source": 16,
											"value": "37"
										},
										{
											"begin": 4369,
											"end": 4883,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4481,
											"end": 4487,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4489,
											"end": 4495,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 4497,
											"end": 4503,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4550,
											"end": 4552,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 4538,
											"end": 4547,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4529,
											"end": 4536,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 4525,
											"end": 4548,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 4521,
											"end": 4553,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 4518,
											"end": 4570,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4518,
											"end": 4570,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "470"
										},
										{
											"begin": 4518,
											"end": 4570,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4566,
											"end": 4567,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4563,
											"end": 4564,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 4556,
											"end": 4568,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 4518,
											"end": 4570,
											"name": "tag",
											"source": 16,
											"value": "470"
										},
										{
											"begin": 4518,
											"end": 4570,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4589,
											"end": 4618,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "471"
										},
										{
											"begin": 4608,
											"end": 4617,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4589,
											"end": 4618,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 4589,
											"end": 4618,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 4589,
											"end": 4618,
											"name": "tag",
											"source": 16,
											"value": "471"
										},
										{
											"begin": 4589,
											"end": 4618,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4579,
											"end": 4618,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4579,
											"end": 4618,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 4654,
											"end": 4663,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4637,
											"end": 4669,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 4627,
											"end": 4669,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4627,
											"end": 4669,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4720,
											"end": 4722,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 4709,
											"end": 4718,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4705,
											"end": 4723,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4692,
											"end": 4724,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 4747,
											"end": 4765,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4739,
											"end": 4745,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 4736,
											"end": 4766,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 4733,
											"end": 4783,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 4733,
											"end": 4783,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "472"
										},
										{
											"begin": 4733,
											"end": 4783,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 4779,
											"end": 4780,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4776,
											"end": 4777,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 4769,
											"end": 4781,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 4733,
											"end": 4783,
											"name": "tag",
											"source": 16,
											"value": "472"
										},
										{
											"begin": 4733,
											"end": 4783,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4802,
											"end": 4877,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "473"
										},
										{
											"begin": 4869,
											"end": 4876,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 4860,
											"end": 4866,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 4849,
											"end": 4858,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4802,
											"end": 4877,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "418"
										},
										{
											"begin": 4802,
											"end": 4877,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 4802,
											"end": 4877,
											"name": "tag",
											"source": 16,
											"value": "473"
										},
										{
											"begin": 4802,
											"end": 4877,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4792,
											"end": 4877,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 4792,
											"end": 4877,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4792,
											"end": 4877,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4883,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4883,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4883,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4883,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4883,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4369,
											"end": 4883,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 4888,
											"end": 5254,
											"name": "tag",
											"source": 16,
											"value": "424"
										},
										{
											"begin": 4888,
											"end": 5254,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4950,
											"end": 4958,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 4960,
											"end": 4966,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5014,
											"end": 5017,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5007,
											"end": 5011,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 4999,
											"end": 5005,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 4995,
											"end": 5012,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4991,
											"end": 5018,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 4981,
											"end": 5036,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "475"
										},
										{
											"begin": 4981,
											"end": 5036,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5032,
											"end": 5033,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5029,
											"end": 5030,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5022,
											"end": 5034,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 4981,
											"end": 5036,
											"name": "tag",
											"source": 16,
											"value": "475"
										},
										{
											"begin": 4981,
											"end": 5036,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5055,
											"end": 5075,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5055,
											"end": 5075,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 5098,
											"end": 5116,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5087,
											"end": 5117,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5087,
											"end": 5117,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 5084,
											"end": 5134,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 5084,
											"end": 5134,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "476"
										},
										{
											"begin": 5084,
											"end": 5134,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5130,
											"end": 5131,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5127,
											"end": 5128,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5120,
											"end": 5132,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5084,
											"end": 5134,
											"name": "tag",
											"source": 16,
											"value": "476"
										},
										{
											"begin": 5084,
											"end": 5134,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5167,
											"end": 5171,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5159,
											"end": 5165,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5155,
											"end": 5172,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5143,
											"end": 5172,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5143,
											"end": 5172,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5227,
											"end": 5230,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 5220,
											"end": 5224,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5210,
											"end": 5216,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5207,
											"end": 5208,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 5203,
											"end": 5217,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 5195,
											"end": 5201,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 5191,
											"end": 5218,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5187,
											"end": 5225,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5184,
											"end": 5231,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 5181,
											"end": 5248,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 5181,
											"end": 5248,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "477"
										},
										{
											"begin": 5181,
											"end": 5248,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5244,
											"end": 5245,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5241,
											"end": 5242,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5181,
											"end": 5248,
											"name": "tag",
											"source": 16,
											"value": "477"
										},
										{
											"begin": 5181,
											"end": 5248,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4888,
											"end": 5254,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4888,
											"end": 5254,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4888,
											"end": 5254,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 4888,
											"end": 5254,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 4888,
											"end": 5254,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 4888,
											"end": 5254,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "tag",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5433,
											"end": 5439,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5441,
											"end": 5447,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5449,
											"end": 5455,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5457,
											"end": 5463,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5465,
											"end": 5471,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5473,
											"end": 5479,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5481,
											"end": 5487,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5534,
											"end": 5537,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 5522,
											"end": 5531,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 5513,
											"end": 5520,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 5509,
											"end": 5532,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 5505,
											"end": 5538,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 5502,
											"end": 5555,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 5502,
											"end": 5555,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "479"
										},
										{
											"begin": 5502,
											"end": 5555,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5551,
											"end": 5552,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5548,
											"end": 5549,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5541,
											"end": 5553,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5502,
											"end": 5555,
											"name": "tag",
											"source": 16,
											"value": "479"
										},
										{
											"begin": 5502,
											"end": 5555,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5574,
											"end": 5603,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "480"
										},
										{
											"begin": 5593,
											"end": 5602,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 5574,
											"end": 5603,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 5574,
											"end": 5603,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5574,
											"end": 5603,
											"name": "tag",
											"source": 16,
											"value": "480"
										},
										{
											"begin": 5574,
											"end": 5603,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5564,
											"end": 5603,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 5564,
											"end": 5603,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5650,
											"end": 5652,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 5639,
											"end": 5648,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 5635,
											"end": 5653,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5622,
											"end": 5654,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 5612,
											"end": 5654,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 5612,
											"end": 5654,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5704,
											"end": 5706,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 5693,
											"end": 5702,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 5689,
											"end": 5707,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5676,
											"end": 5708,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 5748,
											"end": 5754,
											"name": "PUSH",
											"source": 16,
											"value": "FFFF"
										},
										{
											"begin": 5741,
											"end": 5746,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5737,
											"end": 5755,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 5730,
											"end": 5735,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 5727,
											"end": 5756,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 5717,
											"end": 5774,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "481"
										},
										{
											"begin": 5717,
											"end": 5774,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5770,
											"end": 5771,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5767,
											"end": 5768,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5760,
											"end": 5772,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5717,
											"end": 5774,
											"name": "tag",
											"source": 16,
											"value": "481"
										},
										{
											"begin": 5717,
											"end": 5774,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5793,
											"end": 5798,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5849,
											"end": 5851,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 5834,
											"end": 5852,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 5834,
											"end": 5852,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5821,
											"end": 5853,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 5872,
											"end": 5890,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5902,
											"end": 5916,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5902,
											"end": 5916,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 5902,
											"end": 5916,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 5899,
											"end": 5933,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 5899,
											"end": 5933,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "482"
										},
										{
											"begin": 5899,
											"end": 5933,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 5929,
											"end": 5930,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5926,
											"end": 5927,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5919,
											"end": 5931,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 5899,
											"end": 5933,
											"name": "tag",
											"source": 16,
											"value": "482"
										},
										{
											"begin": 5899,
											"end": 5933,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5968,
											"end": 6037,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "483"
										},
										{
											"begin": 6029,
											"end": 6036,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 6020,
											"end": 6026,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 6009,
											"end": 6018,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 6005,
											"end": 6027,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 5968,
											"end": 6037,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "424"
										},
										{
											"begin": 5968,
											"end": 6037,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 5968,
											"end": 6037,
											"name": "tag",
											"source": 16,
											"value": "483"
										},
										{
											"begin": 5968,
											"end": 6037,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6056,
											"end": 6064,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6056,
											"end": 6064,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5942,
											"end": 6037,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6144,
											"end": 6147,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 6129,
											"end": 6148,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 6129,
											"end": 6148,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6116,
											"end": 6149,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 6116,
											"end": 6149,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6161,
											"end": 6177,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6161,
											"end": 6177,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6161,
											"end": 6177,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 6158,
											"end": 6194,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6158,
											"end": 6194,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "484"
										},
										{
											"begin": 6158,
											"end": 6194,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6190,
											"end": 6191,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6187,
											"end": 6188,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6180,
											"end": 6192,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 6158,
											"end": 6194,
											"name": "tag",
											"source": 16,
											"value": "484"
										},
										{
											"begin": 6158,
											"end": 6194,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6158,
											"end": 6194,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6229,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 6292,
											"end": 6299,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6289,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 6270,
											"end": 6279,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 6266,
											"end": 6290,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6229,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "424"
										},
										{
											"begin": 6229,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6229,
											"end": 6300,
											"name": "tag",
											"source": 16,
											"value": "485"
										},
										{
											"begin": 6229,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP12",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP8",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP11",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 5259,
											"end": 6360,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 6203,
											"end": 6300,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6203,
											"end": 6300,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5259,
											"end": 6360,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6693,
											"name": "tag",
											"source": 16,
											"value": "45"
										},
										{
											"begin": 6365,
											"end": 6693,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6442,
											"end": 6448,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6450,
											"end": 6456,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6458,
											"end": 6464,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6511,
											"end": 6513,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 6499,
											"end": 6508,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6490,
											"end": 6497,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 6486,
											"end": 6509,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6482,
											"end": 6514,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 6479,
											"end": 6531,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6479,
											"end": 6531,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "487"
										},
										{
											"begin": 6479,
											"end": 6531,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6527,
											"end": 6528,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6524,
											"end": 6525,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6517,
											"end": 6529,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 6479,
											"end": 6531,
											"name": "tag",
											"source": 16,
											"value": "487"
										},
										{
											"begin": 6479,
											"end": 6531,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6550,
											"end": 6579,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "488"
										},
										{
											"begin": 6569,
											"end": 6578,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6550,
											"end": 6579,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 6550,
											"end": 6579,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6550,
											"end": 6579,
											"name": "tag",
											"source": 16,
											"value": "488"
										},
										{
											"begin": 6550,
											"end": 6579,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6540,
											"end": 6579,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6540,
											"end": 6579,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6598,
											"end": 6636,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 6632,
											"end": 6634,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6621,
											"end": 6630,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6617,
											"end": 6635,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6598,
											"end": 6636,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 6598,
											"end": 6636,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6598,
											"end": 6636,
											"name": "tag",
											"source": 16,
											"value": "489"
										},
										{
											"begin": 6598,
											"end": 6636,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6588,
											"end": 6636,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 6588,
											"end": 6636,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6683,
											"end": 6685,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6672,
											"end": 6681,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6668,
											"end": 6686,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6655,
											"end": 6687,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 6645,
											"end": 6687,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6645,
											"end": 6687,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6693,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6693,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6693,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6693,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6693,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6365,
											"end": 6693,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6895,
											"end": 7058,
											"name": "tag",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 6895,
											"end": 7058,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6962,
											"end": 6982,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6962,
											"end": 6982,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 7022,
											"end": 7032,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7011,
											"end": 7033,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7011,
											"end": 7033,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 7001,
											"end": 7034,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7001,
											"end": 7034,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 6991,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "436"
										},
										{
											"begin": 6991,
											"end": 7052,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7048,
											"end": 7049,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7045,
											"end": 7046,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7038,
											"end": 7050,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "tag",
											"source": 16,
											"value": "51"
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7175,
											"end": 7181,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7183,
											"end": 7189,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7191,
											"end": 7197,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7199,
											"end": 7205,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7207,
											"end": 7213,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7260,
											"end": 7263,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 7248,
											"end": 7257,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 7239,
											"end": 7246,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 7235,
											"end": 7258,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7231,
											"end": 7264,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 7228,
											"end": 7281,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7228,
											"end": 7281,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "494"
										},
										{
											"begin": 7228,
											"end": 7281,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7277,
											"end": 7278,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7274,
											"end": 7275,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7267,
											"end": 7279,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7228,
											"end": 7281,
											"name": "tag",
											"source": 16,
											"value": "494"
										},
										{
											"begin": 7228,
											"end": 7281,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7300,
											"end": 7329,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "495"
										},
										{
											"begin": 7319,
											"end": 7328,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 7300,
											"end": 7329,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 7300,
											"end": 7329,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7300,
											"end": 7329,
											"name": "tag",
											"source": 16,
											"value": "495"
										},
										{
											"begin": 7300,
											"end": 7329,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7290,
											"end": 7329,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 7290,
											"end": 7329,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7376,
											"end": 7378,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7365,
											"end": 7374,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 7361,
											"end": 7379,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7348,
											"end": 7380,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 7338,
											"end": 7380,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 7338,
											"end": 7380,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7399,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "496"
										},
										{
											"begin": 7432,
											"end": 7434,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7421,
											"end": 7430,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 7417,
											"end": 7435,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7399,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 7399,
											"end": 7436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7399,
											"end": 7436,
											"name": "tag",
											"source": 16,
											"value": "496"
										},
										{
											"begin": 7399,
											"end": 7436,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7389,
											"end": 7436,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 7389,
											"end": 7436,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7487,
											"end": 7489,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 7476,
											"end": 7485,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 7472,
											"end": 7490,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7459,
											"end": 7491,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 7514,
											"end": 7532,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7506,
											"end": 7512,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7503,
											"end": 7533,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7500,
											"end": 7550,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7500,
											"end": 7550,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "497"
										},
										{
											"begin": 7500,
											"end": 7550,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7546,
											"end": 7547,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7543,
											"end": 7544,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7536,
											"end": 7548,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7500,
											"end": 7550,
											"name": "tag",
											"source": 16,
											"value": "497"
										},
										{
											"begin": 7500,
											"end": 7550,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7585,
											"end": 7654,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "498"
										},
										{
											"begin": 7646,
											"end": 7653,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 7637,
											"end": 7643,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7626,
											"end": 7635,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 7622,
											"end": 7644,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7585,
											"end": 7654,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "424"
										},
										{
											"begin": 7585,
											"end": 7654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7585,
											"end": 7654,
											"name": "tag",
											"source": 16,
											"value": "498"
										},
										{
											"begin": 7585,
											"end": 7654,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "SWAP10",
											"source": 16
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7673,
											"end": 7681,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 7673,
											"end": 7681,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 7559,
											"end": 7654,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 7063,
											"end": 7714,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7063,
											"end": 7714,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7719,
											"end": 8045,
											"name": "tag",
											"source": 16,
											"value": "55"
										},
										{
											"begin": 7719,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7795,
											"end": 7801,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7803,
											"end": 7809,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7811,
											"end": 7817,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7864,
											"end": 7866,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 7852,
											"end": 7861,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 7843,
											"end": 7850,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 7839,
											"end": 7862,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 7832,
											"end": 7884,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7832,
											"end": 7884,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "500"
										},
										{
											"begin": 7832,
											"end": 7884,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7880,
											"end": 7881,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7877,
											"end": 7878,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7870,
											"end": 7882,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7832,
											"end": 7884,
											"name": "tag",
											"source": 16,
											"value": "500"
										},
										{
											"begin": 7832,
											"end": 7884,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7903,
											"end": 7932,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "501"
										},
										{
											"begin": 7922,
											"end": 7931,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 7903,
											"end": 7932,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 7903,
											"end": 7932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7903,
											"end": 7932,
											"name": "tag",
											"source": 16,
											"value": "501"
										},
										{
											"begin": 7903,
											"end": 7932,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7893,
											"end": 7932,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 7893,
											"end": 7932,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7979,
											"end": 7981,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 7968,
											"end": 7977,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7951,
											"end": 7983,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 7941,
											"end": 7983,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7941,
											"end": 7983,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8002,
											"end": 8039,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "502"
										},
										{
											"begin": 8035,
											"end": 8037,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 8020,
											"end": 8038,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8002,
											"end": 8039,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 8002,
											"end": 8039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8002,
											"end": 8039,
											"name": "tag",
											"source": 16,
											"value": "502"
										},
										{
											"begin": 8002,
											"end": 8039,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7992,
											"end": 8039,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7992,
											"end": 8039,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7719,
											"end": 8045,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 7719,
											"end": 8045,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7719,
											"end": 8045,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 7719,
											"end": 8045,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7719,
											"end": 8045,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 7719,
											"end": 8045,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8050,
											"end": 8236,
											"name": "tag",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 8050,
											"end": 8236,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8109,
											"end": 8115,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8162,
											"end": 8164,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8150,
											"end": 8159,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8141,
											"end": 8148,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 8137,
											"end": 8160,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 8133,
											"end": 8165,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 8130,
											"end": 8182,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8130,
											"end": 8182,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "504"
										},
										{
											"begin": 8130,
											"end": 8182,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8178,
											"end": 8179,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8175,
											"end": 8176,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8168,
											"end": 8180,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 8130,
											"end": 8182,
											"name": "tag",
											"source": 16,
											"value": "504"
										},
										{
											"begin": 8130,
											"end": 8182,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8201,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 8220,
											"end": 8229,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8201,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 8201,
											"end": 8230,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8241,
											"end": 8461,
											"name": "tag",
											"source": 16,
											"value": "67"
										},
										{
											"begin": 8241,
											"end": 8461,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8390,
											"end": 8392,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8379,
											"end": 8388,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8372,
											"end": 8393,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 8353,
											"end": 8357,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8410,
											"end": 8455,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 8451,
											"end": 8453,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8440,
											"end": 8449,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 8436,
											"end": 8454,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8428,
											"end": 8434,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 8410,
											"end": 8455,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "423"
										},
										{
											"begin": 8410,
											"end": 8455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8466,
											"end": 9043,
											"name": "tag",
											"source": 16,
											"value": "70"
										},
										{
											"begin": 8466,
											"end": 9043,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8569,
											"end": 8575,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8577,
											"end": 8583,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8585,
											"end": 8591,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8593,
											"end": 8599,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8646,
											"end": 8648,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 8634,
											"end": 8643,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 8625,
											"end": 8632,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 8621,
											"end": 8644,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 8617,
											"end": 8649,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 8614,
											"end": 8666,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8614,
											"end": 8666,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "509"
										},
										{
											"begin": 8614,
											"end": 8666,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8662,
											"end": 8663,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8659,
											"end": 8660,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8652,
											"end": 8664,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 8614,
											"end": 8666,
											"name": "tag",
											"source": 16,
											"value": "509"
										},
										{
											"begin": 8614,
											"end": 8666,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8685,
											"end": 8714,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "510"
										},
										{
											"begin": 8704,
											"end": 8713,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 8685,
											"end": 8714,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "417"
										},
										{
											"begin": 8685,
											"end": 8714,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8685,
											"end": 8714,
											"name": "tag",
											"source": 16,
											"value": "510"
										},
										{
											"begin": 8685,
											"end": 8714,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8675,
											"end": 8714,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 8675,
											"end": 8714,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8761,
											"end": 8763,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 8750,
											"end": 8759,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 8746,
											"end": 8764,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8733,
											"end": 8765,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 8723,
											"end": 8765,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 8723,
											"end": 8765,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 8816,
											"end": 8818,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 8805,
											"end": 8814,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 8801,
											"end": 8819,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8788,
											"end": 8820,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 8843,
											"end": 8861,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8835,
											"end": 8841,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 8832,
											"end": 8862,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 8829,
											"end": 8879,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 8829,
											"end": 8879,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "511"
										},
										{
											"begin": 8829,
											"end": 8879,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 8875,
											"end": 8876,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 8872,
											"end": 8873,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 8865,
											"end": 8877,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 8829,
											"end": 8879,
											"name": "tag",
											"source": 16,
											"value": "511"
										},
										{
											"begin": 8829,
											"end": 8879,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8914,
											"end": 8983,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "512"
										},
										{
											"begin": 8975,
											"end": 8982,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 8966,
											"end": 8972,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 8955,
											"end": 8964,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 8951,
											"end": 8973,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 8914,
											"end": 8983,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "424"
										},
										{
											"begin": 8914,
											"end": 8983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 8914,
											"end": 8983,
											"name": "tag",
											"source": 16,
											"value": "512"
										},
										{
											"begin": 8914,
											"end": 8983,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 8466,
											"end": 9043,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": 8466,
											"end": 9043,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": 8466,
											"end": 9043,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 8466,
											"end": 9043,
											"name": "SWAP8",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9002,
											"end": 9010,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8466,
											"end": 9043,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9048,
											"end": 9690,
											"name": "tag",
											"source": 16,
											"value": "73"
										},
										{
											"begin": 9048,
											"end": 9690,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9213,
											"end": 9215,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 9265,
											"end": 9286,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 9265,
											"end": 9286,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9265,
											"end": 9286,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9335,
											"end": 9348,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9335,
											"end": 9348,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9238,
											"end": 9256,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9238,
											"end": 9256,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9238,
											"end": 9256,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9357,
											"end": 9379,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9357,
											"end": 9379,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9357,
											"end": 9379,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9184,
											"end": 9188,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 9184,
											"end": 9188,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9213,
											"end": 9215,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9436,
											"end": 9451,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 9436,
											"end": 9451,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 9436,
											"end": 9451,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9436,
											"end": 9451,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9410,
											"end": 9412,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 9395,
											"end": 9413,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 9395,
											"end": 9413,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9395,
											"end": 9413,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9184,
											"end": 9188,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "tag",
											"source": 16,
											"value": "514"
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9493,
											"end": 9499,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9490,
											"end": 9491,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9487,
											"end": 9500,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "516"
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 9568,
											"end": 9581,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 9568,
											"end": 9581,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 9561,
											"end": 9582,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 9554,
											"end": 9583,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 9542,
											"end": 9584,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 9542,
											"end": 9584,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 9639,
											"end": 9654,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 9639,
											"end": 9654,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 9639,
											"end": 9654,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9639,
											"end": 9654,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 9604,
											"end": 9616,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9604,
											"end": 9616,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 9604,
											"end": 9616,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9604,
											"end": 9616,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 9515,
											"end": 9516,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 9508,
											"end": 9517,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "514"
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "tag",
											"source": 16,
											"value": "516"
										},
										{
											"begin": 9479,
											"end": 9664,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9681,
											"end": 9684,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 9681,
											"end": 9684,
											"name": "SWAP7",
											"source": 16
										},
										{
											"begin": 9048,
											"end": 9690,
											"name": "SWAP6",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9048,
											"end": 9690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9926,
											"end": 10044,
											"name": "tag",
											"source": 16,
											"value": "426"
										},
										{
											"begin": 9926,
											"end": 10044,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10012,
											"end": 10017,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10005,
											"end": 10018,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 9998,
											"end": 10019,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 9991,
											"end": 9996,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 9988,
											"end": 10020,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 9978,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "519"
										},
										{
											"begin": 9978,
											"end": 10038,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 10034,
											"end": 10035,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 10031,
											"end": 10032,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10024,
											"end": 10036,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 9978,
											"end": 10038,
											"name": "tag",
											"source": 16,
											"value": "519"
										},
										{
											"begin": 9978,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 9926,
											"end": 10044,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 9926,
											"end": 10044,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 10049,
											"end": 10294,
											"name": "tag",
											"source": 16,
											"value": "83"
										},
										{
											"begin": 10049,
											"end": 10294,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10116,
											"end": 10122,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 10169,
											"end": 10171,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10157,
											"end": 10166,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10148,
											"end": 10155,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 10144,
											"end": 10167,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 10140,
											"end": 10172,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 10137,
											"end": 10189,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 10137,
											"end": 10189,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "521"
										},
										{
											"begin": 10137,
											"end": 10189,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 10185,
											"end": 10186,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 10182,
											"end": 10183,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10175,
											"end": 10187,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 10137,
											"end": 10189,
											"name": "tag",
											"source": 16,
											"value": "521"
										},
										{
											"begin": 10137,
											"end": 10189,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10217,
											"end": 10226,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 10211,
											"end": 10227,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 10236,
											"end": 10264,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 10258,
											"end": 10263,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 10236,
											"end": 10264,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "426"
										},
										{
											"begin": 10236,
											"end": 10264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 10711,
											"end": 10987,
											"name": "tag",
											"source": 16,
											"value": "92"
										},
										{
											"begin": 10711,
											"end": 10987,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10790,
											"end": 10796,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 10843,
											"end": 10845,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 10831,
											"end": 10840,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 10822,
											"end": 10829,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 10818,
											"end": 10841,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 10814,
											"end": 10846,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 10811,
											"end": 10863,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 10811,
											"end": 10863,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "525"
										},
										{
											"begin": 10811,
											"end": 10863,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 10859,
											"end": 10860,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 10856,
											"end": 10857,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10849,
											"end": 10861,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 10811,
											"end": 10863,
											"name": "tag",
											"source": 16,
											"value": "525"
										},
										{
											"begin": 10811,
											"end": 10863,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 10898,
											"end": 10907,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 10885,
											"end": 10908,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 10937,
											"end": 10938,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 10930,
											"end": 10935,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 10927,
											"end": 10939,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 10917,
											"end": 10957,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 10917,
											"end": 10957,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 10953,
											"end": 10954,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 10950,
											"end": 10951,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 10943,
											"end": 10955,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 11408,
											"end": 11688,
											"name": "tag",
											"source": 16,
											"value": "99"
										},
										{
											"begin": 11408,
											"end": 11688,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 11466,
											"end": 11472,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 11519,
											"end": 11521,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 11507,
											"end": 11516,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 11498,
											"end": 11505,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 11494,
											"end": 11517,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 11490,
											"end": 11522,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 11487,
											"end": 11539,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 11487,
											"end": 11539,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "529"
										},
										{
											"begin": 11487,
											"end": 11539,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 11535,
											"end": 11536,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 11532,
											"end": 11533,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 11525,
											"end": 11537,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 11487,
											"end": 11539,
											"name": "tag",
											"source": 16,
											"value": "529"
										},
										{
											"begin": 11487,
											"end": 11539,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 11574,
											"end": 11583,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 11561,
											"end": 11584,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 11624,
											"end": 11638,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 11617,
											"end": 11622,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 11613,
											"end": 11639,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 11606,
											"end": 11611,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 11603,
											"end": 11640,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 11593,
											"end": 11658,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 11593,
											"end": 11658,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 11654,
											"end": 11655,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 11651,
											"end": 11652,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 11644,
											"end": 11656,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 12116,
											"end": 12300,
											"name": "tag",
											"source": 16,
											"value": "108"
										},
										{
											"begin": 12116,
											"end": 12300,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12174,
											"end": 12180,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 12227,
											"end": 12229,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 12215,
											"end": 12224,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12206,
											"end": 12213,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 12202,
											"end": 12225,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 12198,
											"end": 12230,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 12195,
											"end": 12247,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 12195,
											"end": 12247,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "533"
										},
										{
											"begin": 12195,
											"end": 12247,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 12243,
											"end": 12244,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 12240,
											"end": 12241,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 12233,
											"end": 12245,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 12195,
											"end": 12247,
											"name": "tag",
											"source": 16,
											"value": "533"
										},
										{
											"begin": 12195,
											"end": 12247,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12266,
											"end": 12294,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 12284,
											"end": 12293,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 12266,
											"end": 12294,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "425"
										},
										{
											"begin": 12266,
											"end": 12294,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 12723,
											"end": 12907,
											"name": "tag",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 12723,
											"end": 12907,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12772,
											"end": 12773,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 12765,
											"end": 12853,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12872,
											"end": 12876,
											"name": "PUSH",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 12869,
											"end": 12870,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 12862,
											"end": 12877,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 12896,
											"end": 12900,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 12893,
											"end": 12894,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 12886,
											"end": 12901,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 12912,
											"end": 13162,
											"name": "tag",
											"source": 16,
											"value": "113"
										},
										{
											"begin": 12912,
											"end": 13162,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 12951,
											"end": 12954,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13072,
											"end": 13074,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13065,
											"end": 13070,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 13061,
											"end": 13075,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 13099,
											"end": 13101,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13090,
											"end": 13097,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13087,
											"end": 13102,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 13084,
											"end": 13125,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "539"
										},
										{
											"begin": 13084,
											"end": 13125,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 13105,
											"end": 13123,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "539"
										},
										{
											"begin": 13105,
											"end": 13123,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 13105,
											"end": 13123,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 13105,
											"end": 13123,
											"name": "tag",
											"source": 16,
											"value": "539"
										},
										{
											"begin": 13105,
											"end": 13123,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13154,
											"end": 13155,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 13141,
											"end": 13156,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13141,
											"end": 13156,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 12912,
											"end": 13162,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12912,
											"end": 13162,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 13167,
											"end": 13408,
											"name": "tag",
											"source": 16,
											"value": "122"
										},
										{
											"begin": 13167,
											"end": 13408,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13223,
											"end": 13229,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 13276,
											"end": 13278,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 13264,
											"end": 13273,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13255,
											"end": 13262,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 13251,
											"end": 13274,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 13247,
											"end": 13279,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 13244,
											"end": 13296,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13244,
											"end": 13296,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "541"
										},
										{
											"begin": 13244,
											"end": 13296,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 13292,
											"end": 13293,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 13289,
											"end": 13290,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13282,
											"end": 13294,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 13244,
											"end": 13296,
											"name": "tag",
											"source": 16,
											"value": "541"
										},
										{
											"begin": 13244,
											"end": 13296,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13331,
											"end": 13340,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13318,
											"end": 13341,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 13350,
											"end": 13378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "432"
										},
										{
											"begin": 13372,
											"end": 13377,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13350,
											"end": 13378,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "426"
										},
										{
											"begin": 13350,
											"end": 13378,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 13413,
											"end": 13935,
											"name": "tag",
											"source": 16,
											"value": "124"
										},
										{
											"begin": 13413,
											"end": 13935,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13491,
											"end": 13495,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 13497,
											"end": 13503,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13557,
											"end": 13568,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 13544,
											"end": 13569,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 13651,
											"end": 13653,
											"name": "PUSH",
											"source": 16,
											"value": "1E"
										},
										{
											"begin": 13647,
											"end": 13654,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 13636,
											"end": 13644,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 13620,
											"end": 13634,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 13616,
											"end": 13645,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 13612,
											"end": 13655,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13592,
											"end": 13610,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13588,
											"end": 13656,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 13578,
											"end": 13674,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "544"
										},
										{
											"begin": 13578,
											"end": 13674,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 13670,
											"end": 13671,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 13667,
											"end": 13668,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13660,
											"end": 13672,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 13578,
											"end": 13674,
											"name": "tag",
											"source": 16,
											"value": "544"
										},
										{
											"begin": 13578,
											"end": 13674,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13697,
											"end": 13730,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 13697,
											"end": 13730,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13749,
											"end": 13769,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13749,
											"end": 13769,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 13749,
											"end": 13769,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13792,
											"end": 13810,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13781,
											"end": 13811,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13781,
											"end": 13811,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 13778,
											"end": 13828,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13778,
											"end": 13828,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "545"
										},
										{
											"begin": 13778,
											"end": 13828,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 13824,
											"end": 13825,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 13821,
											"end": 13822,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13814,
											"end": 13826,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 13778,
											"end": 13828,
											"name": "tag",
											"source": 16,
											"value": "545"
										},
										{
											"begin": 13778,
											"end": 13828,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 13857,
											"end": 13861,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 13845,
											"end": 13862,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 13845,
											"end": 13862,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13888,
											"end": 13902,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 13884,
											"end": 13911,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 13884,
											"end": 13911,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 13884,
											"end": 13911,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 13874,
											"end": 13912,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 13874,
											"end": 13912,
											"name": "SGT",
											"source": 16
										},
										{
											"begin": 13871,
											"end": 13929,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 13871,
											"end": 13929,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "477"
										},
										{
											"begin": 13871,
											"end": 13929,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 13925,
											"end": 13926,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 13922,
											"end": 13923,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 13915,
											"end": 13927,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 14290,
											"end": 14727,
											"name": "tag",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 14290,
											"end": 14727,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 14369,
											"end": 14370,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 14365,
											"end": 14377,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 14365,
											"end": 14377,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 14365,
											"end": 14377,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 14365,
											"end": 14377,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 14412,
											"end": 14424,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14412,
											"end": 14424,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 14412,
											"end": 14424,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 14433,
											"end": 14494,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "549"
										},
										{
											"begin": 14433,
											"end": 14494,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 14487,
											"end": 14491,
											"name": "PUSH",
											"source": 16,
											"value": "7F"
										},
										{
											"begin": 14479,
											"end": 14485,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14475,
											"end": 14492,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 14465,
											"end": 14492,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 14465,
											"end": 14492,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 14433,
											"end": 14494,
											"name": "tag",
											"source": 16,
											"value": "549"
										},
										{
											"begin": 14433,
											"end": 14494,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 14540,
											"end": 14542,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 14532,
											"end": 14538,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 14529,
											"end": 14543,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 14509,
											"end": 14527,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 14506,
											"end": 14544,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 14503,
											"end": 14721,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "438"
										},
										{
											"begin": 14503,
											"end": 14721,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14574,
											"end": 14575,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14567,
											"end": 14655,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14678,
											"end": 14682,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 14675,
											"end": 14676,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 14668,
											"end": 14683,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 14706,
											"end": 14710,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 14703,
											"end": 14704,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 14696,
											"end": 14711,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 16556,
											"end": 16784,
											"name": "tag",
											"source": 16,
											"value": "217"
										},
										{
											"begin": 16556,
											"end": 16784,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 16595,
											"end": 16598,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 16623,
											"end": 16633,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 16660,
											"end": 16662,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 16657,
											"end": 16658,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 16653,
											"end": 16663,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 16690,
											"end": 16692,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 16687,
											"end": 16688,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 16683,
											"end": 16693,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 16721,
											"end": 16724,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 16717,
											"end": 16719,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 16713,
											"end": 16725,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 16708,
											"end": 16711,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 16705,
											"end": 16726,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 16702,
											"end": 16749,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 16702,
											"end": 16749,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "558"
										},
										{
											"begin": 16702,
											"end": 16749,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 16729,
											"end": 16747,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "558"
										},
										{
											"begin": 16729,
											"end": 16747,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 16729,
											"end": 16747,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 16729,
											"end": 16747,
											"name": "tag",
											"source": 16,
											"value": "558"
										},
										{
											"begin": 16729,
											"end": 16747,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 16765,
											"end": 16778,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 16765,
											"end": 16778,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 16556,
											"end": 16784,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16556,
											"end": 16784,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 17533,
											"end": 17717,
											"name": "tag",
											"source": 16,
											"value": "232"
										},
										{
											"begin": 17533,
											"end": 17717,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17582,
											"end": 17583,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 17575,
											"end": 17663,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17682,
											"end": 17686,
											"name": "PUSH",
											"source": 16,
											"value": "32"
										},
										{
											"begin": 17679,
											"end": 17680,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 17672,
											"end": 17687,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 17706,
											"end": 17710,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 17703,
											"end": 17704,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 17696,
											"end": 17711,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 17722,
											"end": 18267,
											"name": "tag",
											"source": 16,
											"value": "237"
										},
										{
											"begin": 17722,
											"end": 18267,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 17815,
											"end": 17819,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 17821,
											"end": 17827,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 17881,
											"end": 17892,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 17868,
											"end": 17893,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 17975,
											"end": 17977,
											"name": "PUSH",
											"source": 16,
											"value": "1E"
										},
										{
											"begin": 17971,
											"end": 17978,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 17960,
											"end": 17968,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 17944,
											"end": 17958,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 17940,
											"end": 17969,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 17936,
											"end": 17979,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 17916,
											"end": 17934,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 17912,
											"end": 17980,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 17902,
											"end": 17998,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "563"
										},
										{
											"begin": 17902,
											"end": 17998,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 17994,
											"end": 17995,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 17991,
											"end": 17992,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 17984,
											"end": 17996,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 17902,
											"end": 17998,
											"name": "tag",
											"source": 16,
											"value": "563"
										},
										{
											"begin": 17902,
											"end": 17998,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 18021,
											"end": 18054,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 18021,
											"end": 18054,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 18073,
											"end": 18093,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 18073,
											"end": 18093,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 18073,
											"end": 18093,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18116,
											"end": 18134,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18105,
											"end": 18135,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 18105,
											"end": 18135,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 18102,
											"end": 18152,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 18102,
											"end": 18152,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "564"
										},
										{
											"begin": 18102,
											"end": 18152,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 18148,
											"end": 18149,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 18145,
											"end": 18146,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 18138,
											"end": 18150,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 18102,
											"end": 18152,
											"name": "tag",
											"source": 16,
											"value": "564"
										},
										{
											"begin": 18102,
											"end": 18152,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 18181,
											"end": 18185,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 18169,
											"end": 18186,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 18169,
											"end": 18186,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18232,
											"end": 18233,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 18228,
											"end": 18242,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 18228,
											"end": 18242,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 18228,
											"end": 18242,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 18212,
											"end": 18226,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 18208,
											"end": 18243,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 18198,
											"end": 18244,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 18198,
											"end": 18244,
											"name": "SGT",
											"source": 16
										},
										{
											"begin": 18195,
											"end": 18261,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 18195,
											"end": 18261,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "477"
										},
										{
											"begin": 18195,
											"end": 18261,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 18257,
											"end": 18258,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 18254,
											"end": 18255,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 18247,
											"end": 18259,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 18272,
											"end": 18400,
											"name": "tag",
											"source": 16,
											"value": "243"
										},
										{
											"begin": 18272,
											"end": 18400,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 18312,
											"end": 18315,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 18343,
											"end": 18344,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 18339,
											"end": 18345,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 18336,
											"end": 18337,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 18333,
											"end": 18346,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 18330,
											"end": 18369,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 18330,
											"end": 18369,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "568"
										},
										{
											"begin": 18330,
											"end": 18369,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 18349,
											"end": 18367,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "568"
										},
										{
											"begin": 18349,
											"end": 18367,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 18349,
											"end": 18367,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 18349,
											"end": 18367,
											"name": "tag",
											"source": 16,
											"value": "568"
										},
										{
											"begin": 18349,
											"end": 18367,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18385,
											"end": 18394,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 18385,
											"end": 18394,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 18272,
											"end": 18400,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 19121,
											"end": 19305,
											"name": "tag",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 19121,
											"end": 19305,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19170,
											"end": 19171,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 19163,
											"end": 19251,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 19270,
											"end": 19274,
											"name": "PUSH",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 19267,
											"end": 19268,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 19260,
											"end": 19275,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 19294,
											"end": 19298,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 19291,
											"end": 19292,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 19284,
											"end": 19299,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 19310,
											"end": 20415,
											"name": "tag",
											"source": 16,
											"value": "252"
										},
										{
											"begin": 19310,
											"end": 20415,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 19405,
											"end": 19411,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 19436,
											"end": 19438,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 19479,
											"end": 19481,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 19467,
											"end": 19476,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 19458,
											"end": 19465,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 19454,
											"end": 19477,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 19450,
											"end": 19482,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 19447,
											"end": 19499,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 19447,
											"end": 19499,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "573"
										},
										{
											"begin": 19447,
											"end": 19499,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 19495,
											"end": 19496,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 19492,
											"end": 19493,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 19485,
											"end": 19497,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 19447,
											"end": 19499,
											"name": "tag",
											"source": 16,
											"value": "573"
										},
										{
											"begin": 19447,
											"end": 19499,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 19528,
											"end": 19537,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 19522,
											"end": 19538,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 19557,
											"end": 19575,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19598,
											"end": 19600,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 19590,
											"end": 19596,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 19587,
											"end": 19601,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 19584,
											"end": 19618,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 19584,
											"end": 19618,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "574"
										},
										{
											"begin": 19584,
											"end": 19618,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 19614,
											"end": 19615,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 19611,
											"end": 19612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 19604,
											"end": 19616,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 19584,
											"end": 19618,
											"name": "tag",
											"source": 16,
											"value": "574"
										},
										{
											"begin": 19584,
											"end": 19618,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 19652,
											"end": 19658,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 19641,
											"end": 19650,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 19637,
											"end": 19659,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 19627,
											"end": 19659,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 19627,
											"end": 19659,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 19697,
											"end": 19704,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 19690,
											"end": 19694,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 19686,
											"end": 19688,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 19682,
											"end": 19695,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 19678,
											"end": 19705,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 19668,
											"end": 19723,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "575"
										},
										{
											"begin": 19668,
											"end": 19723,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 19719,
											"end": 19720,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 19716,
											"end": 19717,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 19709,
											"end": 19721,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 19668,
											"end": 19723,
											"name": "tag",
											"source": 16,
											"value": "575"
										},
										{
											"begin": 19668,
											"end": 19723,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 19748,
											"end": 19750,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 19742,
											"end": 19751,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 19770,
											"end": 19772,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 19766,
											"end": 19768,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 19763,
											"end": 19773,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 19760,
											"end": 19796,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 19760,
											"end": 19796,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "577"
										},
										{
											"begin": 19760,
											"end": 19796,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 19776,
											"end": 19794,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "577"
										},
										{
											"begin": 19776,
											"end": 19794,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 19776,
											"end": 19794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 19776,
											"end": 19794,
											"name": "tag",
											"source": 16,
											"value": "577"
										},
										{
											"begin": 19776,
											"end": 19794,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 19822,
											"end": 19824,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 19819,
											"end": 19820,
											"name": "PUSH",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 19815,
											"end": 19825,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 19854,
											"end": 19856,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 19848,
											"end": 19857,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 19917,
											"end": 19919,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 19913,
											"end": 19920,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 19908,
											"end": 19910,
											"name": "PUSH",
											"source": 16,
											"value": "3F"
										},
										{
											"begin": 19904,
											"end": 19906,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 19900,
											"end": 19911,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 19896,
											"end": 19921,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 19888,
											"end": 19894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 19884,
											"end": 19922,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 19972,
											"end": 19978,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 19960,
											"end": 19970,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 19957,
											"end": 19979,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 19952,
											"end": 19954,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 19940,
											"end": 19950,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 19937,
											"end": 19955,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 19934,
											"end": 19980,
											"name": "OR",
											"source": 16
										},
										{
											"begin": 19931,
											"end": 20003,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 19931,
											"end": 20003,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "579"
										},
										{
											"begin": 19931,
											"end": 20003,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 19983,
											"end": 20001,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "579"
										},
										{
											"begin": 19983,
											"end": 20001,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "345"
										},
										{
											"begin": 19983,
											"end": 20001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 19983,
											"end": 20001,
											"name": "tag",
											"source": 16,
											"value": "579"
										},
										{
											"begin": 19983,
											"end": 20001,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 20019,
											"end": 20021,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 20012,
											"end": 20034,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 20069,
											"end": 20087,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 20069,
											"end": 20087,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 20069,
											"end": 20087,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 20103,
											"end": 20118,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 20103,
											"end": 20118,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 20103,
											"end": 20118,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20103,
											"end": 20118,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 20145,
											"end": 20156,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 20145,
											"end": 20156,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 20145,
											"end": 20156,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20141,
											"end": 20161,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 20141,
											"end": 20161,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20141,
											"end": 20161,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 20173,
											"end": 20192,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 20173,
											"end": 20192,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 20173,
											"end": 20192,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 20170,
											"end": 20209,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 20170,
											"end": 20209,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "580"
										},
										{
											"begin": 20170,
											"end": 20209,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 20205,
											"end": 20206,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 20202,
											"end": 20203,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 20195,
											"end": 20207,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 20170,
											"end": 20209,
											"name": "tag",
											"source": 16,
											"value": "580"
										},
										{
											"begin": 20170,
											"end": 20209,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 20229,
											"end": 20240,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 20229,
											"end": 20240,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 20229,
											"end": 20240,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20229,
											"end": 20240,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "tag",
											"source": 16,
											"value": "581"
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 20265,
											"end": 20271,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 20260,
											"end": 20263,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 20257,
											"end": 20272,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "583"
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 20331,
											"end": 20341,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 20331,
											"end": 20341,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 20319,
											"end": 20342,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 20319,
											"end": 20342,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 20282,
											"end": 20294,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 20282,
											"end": 20294,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 20282,
											"end": 20294,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20282,
											"end": 20294,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 20362,
											"end": 20374,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 20362,
											"end": 20374,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 20362,
											"end": 20374,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 20362,
											"end": 20374,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "581"
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "tag",
											"source": 16,
											"value": "583"
										},
										{
											"begin": 20249,
											"end": 20384,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 20403,
											"end": 20409,
											"name": "SWAP9",
											"source": 16
										},
										{
											"begin": 19310,
											"end": 20415,
											"name": "SWAP8",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19310,
											"end": 20415,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 21863,
											"end": 22047,
											"name": "tag",
											"source": 16,
											"value": "299"
										},
										{
											"begin": 21863,
											"end": 22047,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 21933,
											"end": 21939,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 21986,
											"end": 21988,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 21974,
											"end": 21983,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 21965,
											"end": 21972,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 21961,
											"end": 21984,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 21957,
											"end": 21989,
											"name": "SLT",
											"source": 16
										},
										{
											"begin": 21954,
											"end": 22006,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 21954,
											"end": 22006,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "589"
										},
										{
											"begin": 21954,
											"end": 22006,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 22002,
											"end": 22003,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 21999,
											"end": 22000,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 21992,
											"end": 22004,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 21954,
											"end": 22006,
											"name": "tag",
											"source": 16,
											"value": "589"
										},
										{
											"begin": 21954,
											"end": 22006,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 22025,
											"end": 22041,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 22025,
											"end": 22041,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 21863,
											"end": 22047,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 21863,
											"end": 22047,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 22758,
											"end": 23228,
											"name": "tag",
											"source": 16,
											"value": "336"
										},
										{
											"begin": 22758,
											"end": 23228,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 22937,
											"end": 22940,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 22975,
											"end": 22981,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 22969,
											"end": 22982,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 22991,
											"end": 23044,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "593"
										},
										{
											"begin": 23037,
											"end": 23043,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 23032,
											"end": 23035,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 23025,
											"end": 23029,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 23017,
											"end": 23023,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 23013,
											"end": 23030,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 22991,
											"end": 23044,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 22991,
											"end": 23044,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 22991,
											"end": 23044,
											"name": "tag",
											"source": 16,
											"value": "593"
										},
										{
											"begin": 22991,
											"end": 23044,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 23107,
											"end": 23120,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 23107,
											"end": 23120,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 23066,
											"end": 23082,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 23066,
											"end": 23082,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 23066,
											"end": 23082,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23066,
											"end": 23082,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 23129,
											"end": 23186,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "558"
										},
										{
											"begin": 23107,
											"end": 23120,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 23066,
											"end": 23082,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 23163,
											"end": 23167,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 23151,
											"end": 23168,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 23151,
											"end": 23168,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23129,
											"end": 23186,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 23129,
											"end": 23186,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 23233,
											"end": 23847,
											"name": "tag",
											"source": 16,
											"value": "341"
										},
										{
											"begin": 23233,
											"end": 23847,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 23513,
											"end": 23516,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 23551,
											"end": 23557,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 23545,
											"end": 23558,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 23567,
											"end": 23620,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "596"
										},
										{
											"begin": 23613,
											"end": 23619,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 23608,
											"end": 23611,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 23601,
											"end": 23605,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 23593,
											"end": 23599,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 23589,
											"end": 23606,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23567,
											"end": 23620,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 23567,
											"end": 23620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 23567,
											"end": 23620,
											"name": "tag",
											"source": 16,
											"value": "596"
										},
										{
											"begin": 23567,
											"end": 23620,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 23681,
											"end": 23684,
											"name": "PUSH",
											"source": 16,
											"value": "2F00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 23642,
											"end": 23658,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 23642,
											"end": 23658,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 23642,
											"end": 23658,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23667,
											"end": 23685,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 23667,
											"end": 23685,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 23667,
											"end": 23685,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 23710,
											"end": 23723,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 23710,
											"end": 23723,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 23732,
											"end": 23797,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "597"
										},
										{
											"begin": 23710,
											"end": 23723,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 23784,
											"end": 23785,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 23773,
											"end": 23786,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 23773,
											"end": 23786,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23766,
											"end": 23770,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 23754,
											"end": 23771,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 23754,
											"end": 23771,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23732,
											"end": 23797,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "422"
										},
										{
											"begin": 23732,
											"end": 23797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 23732,
											"end": 23797,
											"name": "tag",
											"source": 16,
											"value": "597"
										},
										{
											"begin": 23732,
											"end": 23797,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 23817,
											"end": 23837,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23839,
											"end": 23840,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 23813,
											"end": 23841,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23813,
											"end": 23841,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 23233,
											"end": 23847,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 23233,
											"end": 23847,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 23852,
											"end": 23987,
											"name": "tag",
											"source": 16,
											"value": "357"
										},
										{
											"begin": 23852,
											"end": 23987,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 23891,
											"end": 23894,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 23912,
											"end": 23929,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 23912,
											"end": 23929,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 23912,
											"end": 23929,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23909,
											"end": 23952,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "600"
										},
										{
											"begin": 23909,
											"end": 23952,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 23932,
											"end": 23950,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "600"
										},
										{
											"begin": 23932,
											"end": 23950,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 23932,
											"end": 23950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 23932,
											"end": 23950,
											"name": "tag",
											"source": 16,
											"value": "600"
										},
										{
											"begin": 23932,
											"end": 23950,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 23979,
											"end": 23980,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 23968,
											"end": 23981,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 23968,
											"end": 23981,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 23852,
											"end": 23987,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 25073,
											"end": 25257,
											"name": "tag",
											"source": 16,
											"value": "428"
										},
										{
											"begin": 25073,
											"end": 25257,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 25122,
											"end": 25123,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 25115,
											"end": 25203,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25222,
											"end": 25226,
											"name": "PUSH",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 25219,
											"end": 25220,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 25212,
											"end": 25227,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 25246,
											"end": 25250,
											"name": "PUSH",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 25243,
											"end": 25244,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 25236,
											"end": 25251,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 25262,
											"end": 25382,
											"name": "tag",
											"source": 16,
											"value": "375"
										},
										{
											"begin": 25262,
											"end": 25382,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 25302,
											"end": 25303,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 25328,
											"end": 25329,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 25318,
											"end": 25353,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "607"
										},
										{
											"begin": 25318,
											"end": 25353,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 25333,
											"end": 25351,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "607"
										},
										{
											"begin": 25333,
											"end": 25351,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "428"
										},
										{
											"begin": 25333,
											"end": 25351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 25333,
											"end": 25351,
											"name": "tag",
											"source": 16,
											"value": "607"
										},
										{
											"begin": 25333,
											"end": 25351,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 25367,
											"end": 25376,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 25367,
											"end": 25376,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25262,
											"end": 25382,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 25387,
											"end": 25512,
											"name": "tag",
											"source": 16,
											"value": "382"
										},
										{
											"begin": 25387,
											"end": 25512,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 25427,
											"end": 25431,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 25455,
											"end": 25456,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 25452,
											"end": 25453,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 25449,
											"end": 25457,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 25446,
											"end": 25480,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 25446,
											"end": 25480,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "610"
										},
										{
											"begin": 25446,
											"end": 25480,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 25460,
											"end": 25478,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "610"
										},
										{
											"begin": 25460,
											"end": 25478,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "427"
										},
										{
											"begin": 25460,
											"end": 25478,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 25460,
											"end": 25478,
											"name": "tag",
											"source": 16,
											"value": "610"
										},
										{
											"begin": 25460,
											"end": 25478,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 25497,
											"end": 25506,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 25497,
											"end": 25506,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25387,
											"end": 25512,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 25517,
											"end": 25629,
											"name": "tag",
											"source": 16,
											"value": "384"
										},
										{
											"begin": 25517,
											"end": 25629,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 25549,
											"end": 25550,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 25575,
											"end": 25576,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 25565,
											"end": 25600,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "613"
										},
										{
											"begin": 25565,
											"end": 25600,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 25580,
											"end": 25598,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "613"
										},
										{
											"begin": 25580,
											"end": 25598,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "428"
										},
										{
											"begin": 25580,
											"end": 25598,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 25580,
											"end": 25598,
											"name": "tag",
											"source": 16,
											"value": "613"
										},
										{
											"begin": 25580,
											"end": 25598,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 25614,
											"end": 25623,
											"name": "MOD",
											"source": 16
										},
										{
											"begin": 25614,
											"end": 25623,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 25517,
											"end": 25629,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol",
								"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol",
								"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol",
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
								"contracts/manifold/lazyclaim/ERC721LazyClaim.sol",
								"contracts/manifold/lazyclaim/IERC721LazyClaim.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"checkMintIndex(address,uint256,uint32)": "cda08536",
							"checkMintIndices(address,uint256,uint32[])": "f8a6137b",
							"getClaim(address,uint256)": "0f79ab39",
							"getClaimCount(address)": "d5fdfe87",
							"getTotalMints(address,address,uint256)": "42f3bef4",
							"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": "037b79db",
							"mint(address,uint256,uint32,bytes32[])": "bbf2a8c6",
							"mintBatch(address,uint256,uint16,uint32[],bytes32[][])": "3512da33",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenURI(address,uint256)": "e9dc6375",
							"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": "1831a643"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint224\",\"name\":\"claimIndex\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"ClaimInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"}],\"name\":\"ClaimMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"mintCount\",\"type\":\"uint16\"}],\"name\":\"ClaimMintBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"mintIndex\",\"type\":\"uint32\"}],\"name\":\"checkMintIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"mintIndices\",\"type\":\"uint32[]\"}],\"name\":\"checkMintIndices\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"minted\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"}],\"name\":\"getClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"total\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalMax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"walletMax\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"enum IERC721LazyClaim.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct IERC721LazyClaim.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"}],\"name\":\"getClaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"}],\"name\":\"getTotalMints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"totalMax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"walletMax\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"enum IERC721LazyClaim.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct IERC721LazyClaim.ClaimParameters\",\"name\":\"claimParameters\",\"type\":\"tuple\"}],\"name\":\"initializeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"mintIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"mintCount\",\"type\":\"uint16\"},{\"internalType\":\"uint32[]\",\"name\":\"mintIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"totalMax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"walletMax\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"enum IERC721LazyClaim.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct IERC721LazyClaim.ClaimParameters\",\"name\":\"claimParameters\",\"type\":\"tuple\"}],\"name\":\"updateClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"manifold.xyz\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"Lazy Claim\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkMintIndex(address,uint256,uint32)\":{\"notice\":\"See {IERC721LazyClaim-checkMintIndex}.\"},\"checkMintIndices(address,uint256,uint32[])\":{\"notice\":\"See {IERC721LazyClaim-checkMintIndices}.\"},\"getClaim(address,uint256)\":{\"notice\":\"See {IERC721LazyClaim-getClaim}.\"},\"getClaimCount(address)\":{\"notice\":\"See {IERC721LazyClaim-getClaimCount}.\"},\"getTotalMints(address,address,uint256)\":{\"notice\":\"See {IERC721LazyClaim-getTotalMints}.\"},\"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))\":{\"notice\":\"See {IERC721LazyClaim-initializeClaim}.\"},\"mint(address,uint256,uint32,bytes32[])\":{\"notice\":\"See {IERC721LazyClaim-mint}.\"},\"mintBatch(address,uint256,uint16,uint32[],bytes32[][])\":{\"notice\":\"See {IERC721LazyClaim-mintBatch}.\"},\"tokenURI(address,uint256)\":{\"notice\":\"See {ICreatorExtensionTokenURI-tokenURI}.\"},\"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))\":{\"notice\":\"See {IERC721LazyClaim-udpateClaim}.\"}},\"notice\":\"Lazy claim with optional whitelist ERC721 tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":\"ERC721LazyClaim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\":{\"keccak256\":\"0x2dc54667c7182b70fbfcb5c0775b098d9b6b652cbebdd55d2ef7e4676b84af4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383cef86be81bc48af21a27e945b82dcbb5ed1c1771a7bb68179538c6f8d6b71\",\"dweb:/ipfs/QmV345QPgtbZTqui7YQeA95QB3YCDnG7bX4H5RyUhTd4CX\"]},\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\":{\"keccak256\":\"0xf4f06a129d0081c2d6b2decc23ef16dccf4b723822ca64ab520f56b71fd16f6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3245738f14c48cd85b268394e540fc3b611926240d3eaaf5e5b917a26b36120c\",\"dweb:/ipfs/QmRWLPJ72CWgNnq6THvhp427gNjSS5yUTtSkGwLXQDBeUJ\"]},\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\":{\"keccak256\":\"0x6c8ca804ee7dea9d78f0dacdd9233b1b75ca2b2fa517f52f0fdf6beb34780a51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a04a6f0cce2bbdb022a8125e147519c7fbaa89692c8f0cfee69a67a2956316f\",\"dweb:/ipfs/QmdUxwBEnFshm1j5FEcJctC7DbFWUznis2LaPcKR7FEZX7\"]},\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\":{\"keccak256\":\"0xaed5e7784e33745ab1b16f1d87b22084a8b25d531c1dcb8dc41fc2a89e2617da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://44837a9cc639062b2d7424a10e9d579b8d3a9bc1cefede2cfbb917bee8f452ae\",\"dweb:/ipfs/QmburkqmRDZYWjKPRUynhdfkAfP5QDKcXH4WCbH1JC8UDq\"]},\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\":{\"keccak256\":\"0x7cc2e4e7d9052532f445e62ec1fa2f05cc0f5d1d8ee1fea913b43a132277bf2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://266618317d0654fe209b5450b8b5afa3a4a8d41294a2b37ddbae540099859887\",\"dweb:/ipfs/QmYksDqoxhachoqZquXGtjfiuAWJ1rxAKLtUYPL3YboBkE\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb\",\"dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://43ea1c4a5760f18794645133057e0a3df8eeac81a6ba266fb95f28233f088662\",\"dweb:/ipfs/QmbUHWmwqBMrub71Rs3dLnAoVkf2HPzmUAKfA6Eu28P3G7\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad2f29a9c17a4f746416c9e254e17671f43c409dbfa6e4d7d76c3e4a83212d31\",\"dweb:/ipfs/QmTqU65L6iu6yqmXKzcNLPioR8etzKPWycpDJCm17ifVdS\"]},\"contracts/manifold/lazyclaim/ERC721LazyClaim.sol\":{\"keccak256\":\"0x93b92d197ce478e5f488d29f6ad27a358d01e5d0efa220f7b92228c2cddbfa66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76d40fc1346c5be4e81d92c9bdbfdb39fb3c22115b5d740fe5c7f6ad4f1d9a21\",\"dweb:/ipfs/QmSpZCXcLxPucLmKfQaGLYdjYGinGk3XL9tZMDdTvDe4sq\"]},\"contracts/manifold/lazyclaim/IERC721LazyClaim.sol\":{\"keccak256\":\"0x722757e972a614f2ebe03307e47a0935ad94dc3e52976b2fd0309f8ec65aa295\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68d785b3e95f0fddd71342faf4547e5f475a1ba6e513f0534f869c0cb3ae1db7\",\"dweb:/ipfs/QmSJDtdZeg4uSw1J5rmZ8Xt6Y1nJTrZAcXf7rh6JL21ceL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 740,
								"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1752,
								"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
								"label": "_claimCounts",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_uint224)"
							},
							{
								"astId": 1759,
								"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
								"label": "_claims",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)2914_storage))"
							},
							{
								"astId": 1767,
								"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
								"label": "_mintsPerWallet",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
							},
							{
								"astId": 1775,
								"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
								"label": "_claimMintIndices",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
							},
							{
								"astId": 1787,
								"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
								"label": "_tokenClaims",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TokenClaim)1780_storage))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_enum(StorageProtocol)2876": {
								"encoding": "inplace",
								"label": "enum IERC721LazyClaim.StorageProtocol",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_struct(Claim)2914_storage))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_struct(Claim)2914_storage)"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_struct(TokenClaim)1780_storage))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => struct ERC721LazyClaim.TokenClaim))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_struct(TokenClaim)1780_storage)"
							},
							"t_mapping(t_address,t_uint224)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint224)",
								"numberOfBytes": "32",
								"value": "t_uint224"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => mapping(uint256 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_uint256)"
							},
							"t_mapping(t_uint256,t_struct(Claim)2914_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct IERC721LazyClaim.Claim)",
								"numberOfBytes": "32",
								"value": "t_struct(Claim)2914_storage"
							},
							"t_mapping(t_uint256,t_struct(TokenClaim)1780_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct ERC721LazyClaim.TokenClaim)",
								"numberOfBytes": "32",
								"value": "t_struct(TokenClaim)1780_storage"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Claim)2914_storage": {
								"encoding": "inplace",
								"label": "struct IERC721LazyClaim.Claim",
								"members": [
									{
										"astId": 2896,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "total",
										"offset": 0,
										"slot": "0",
										"type": "t_uint32"
									},
									{
										"astId": 2898,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "totalMax",
										"offset": 4,
										"slot": "0",
										"type": "t_uint32"
									},
									{
										"astId": 2900,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "walletMax",
										"offset": 8,
										"slot": "0",
										"type": "t_uint32"
									},
									{
										"astId": 2902,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "startDate",
										"offset": 12,
										"slot": "0",
										"type": "t_uint48"
									},
									{
										"astId": 2904,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "endDate",
										"offset": 18,
										"slot": "0",
										"type": "t_uint48"
									},
									{
										"astId": 2907,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "storageProtocol",
										"offset": 24,
										"slot": "0",
										"type": "t_enum(StorageProtocol)2876"
									},
									{
										"astId": 2909,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "identical",
										"offset": 25,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 2911,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "merkleRoot",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									},
									{
										"astId": 2913,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "location",
										"offset": 0,
										"slot": "2",
										"type": "t_string_storage"
									}
								],
								"numberOfBytes": "96"
							},
							"t_struct(TokenClaim)1780_storage": {
								"encoding": "inplace",
								"label": "struct ERC721LazyClaim.TokenClaim",
								"members": [
									{
										"astId": 1777,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "claimIndex",
										"offset": 0,
										"slot": "0",
										"type": "t_uint224"
									},
									{
										"astId": 1779,
										"contract": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol:ERC721LazyClaim",
										"label": "mintOrder",
										"offset": 28,
										"slot": "0",
										"type": "t_uint32"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint224": {
								"encoding": "inplace",
								"label": "uint224",
								"numberOfBytes": "28"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint32": {
								"encoding": "inplace",
								"label": "uint32",
								"numberOfBytes": "4"
							},
							"t_uint48": {
								"encoding": "inplace",
								"label": "uint48",
								"numberOfBytes": "6"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"checkMintIndex(address,uint256,uint32)": {
								"notice": "See {IERC721LazyClaim-checkMintIndex}."
							},
							"checkMintIndices(address,uint256,uint32[])": {
								"notice": "See {IERC721LazyClaim-checkMintIndices}."
							},
							"getClaim(address,uint256)": {
								"notice": "See {IERC721LazyClaim-getClaim}."
							},
							"getClaimCount(address)": {
								"notice": "See {IERC721LazyClaim-getClaimCount}."
							},
							"getTotalMints(address,address,uint256)": {
								"notice": "See {IERC721LazyClaim-getTotalMints}."
							},
							"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
								"notice": "See {IERC721LazyClaim-initializeClaim}."
							},
							"mint(address,uint256,uint32,bytes32[])": {
								"notice": "See {IERC721LazyClaim-mint}."
							},
							"mintBatch(address,uint256,uint16,uint32[],bytes32[][])": {
								"notice": "See {IERC721LazyClaim-mintBatch}."
							},
							"tokenURI(address,uint256)": {
								"notice": "See {ICreatorExtensionTokenURI-tokenURI}."
							},
							"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
								"notice": "See {IERC721LazyClaim-udpateClaim}."
							}
						},
						"notice": "Lazy claim with optional whitelist ERC721 tokens",
						"version": 1
					}
				}
			},
			"contracts/manifold/lazyclaim/IERC721LazyClaim.sol": {
				"IERC721LazyClaim": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creatorContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint224",
									"name": "claimIndex",
									"type": "uint224"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "initializer",
									"type": "address"
								}
							],
							"name": "ClaimInitialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creatorContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								}
							],
							"name": "ClaimMint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creatorContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "mintCount",
									"type": "uint16"
								}
							],
							"name": "ClaimMintBatch",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint32",
									"name": "mintIndex",
									"type": "uint32"
								}
							],
							"name": "checkMintIndex",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint32[]",
									"name": "mintIndices",
									"type": "uint32[]"
								}
							],
							"name": "checkMintIndices",
							"outputs": [
								{
									"internalType": "bool[]",
									"name": "",
									"type": "bool[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								}
							],
							"name": "getClaim",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "total",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "totalMax",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "walletMax",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "startDate",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "endDate",
											"type": "uint48"
										},
										{
											"internalType": "enum IERC721LazyClaim.StorageProtocol",
											"name": "storageProtocol",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "identical",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "merkleRoot",
											"type": "bytes32"
										},
										{
											"internalType": "string",
											"name": "location",
											"type": "string"
										}
									],
									"internalType": "struct IERC721LazyClaim.Claim",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								}
							],
							"name": "getClaimCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "minter",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								}
							],
							"name": "getTotalMints",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "totalMax",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "walletMax",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "startDate",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "endDate",
											"type": "uint48"
										},
										{
											"internalType": "enum IERC721LazyClaim.StorageProtocol",
											"name": "storageProtocol",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "identical",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "merkleRoot",
											"type": "bytes32"
										},
										{
											"internalType": "string",
											"name": "location",
											"type": "string"
										}
									],
									"internalType": "struct IERC721LazyClaim.ClaimParameters",
									"name": "claimParameters",
									"type": "tuple"
								}
							],
							"name": "initializeClaim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint32",
									"name": "mintIndex",
									"type": "uint32"
								},
								{
									"internalType": "bytes32[]",
									"name": "merkleProof",
									"type": "bytes32[]"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint16",
									"name": "mintCount",
									"type": "uint16"
								},
								{
									"internalType": "uint32[]",
									"name": "mintIndices",
									"type": "uint32[]"
								},
								{
									"internalType": "bytes32[][]",
									"name": "merkleProofs",
									"type": "bytes32[][]"
								}
							],
							"name": "mintBatch",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "creatorContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "claimIndex",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "totalMax",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "walletMax",
											"type": "uint32"
										},
										{
											"internalType": "uint48",
											"name": "startDate",
											"type": "uint48"
										},
										{
											"internalType": "uint48",
											"name": "endDate",
											"type": "uint48"
										},
										{
											"internalType": "enum IERC721LazyClaim.StorageProtocol",
											"name": "storageProtocol",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "identical",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "merkleRoot",
											"type": "bytes32"
										},
										{
											"internalType": "string",
											"name": "location",
											"type": "string"
										}
									],
									"internalType": "struct IERC721LazyClaim.ClaimParameters",
									"name": "claimParameters",
									"type": "tuple"
								}
							],
							"name": "updateClaim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"checkMintIndex(address,uint256,uint32)": {
								"params": {
									"claimIndex": "the index of the claim",
									"creatorContractAddress": "the address of the creator contract for the claim",
									"mintIndex": "the mint index of the claim"
								},
								"returns": {
									"_0": "whether or not the mint index was consumed"
								}
							},
							"checkMintIndices(address,uint256,uint32[])": {
								"params": {
									"claimIndex": "the index of the claim",
									"creatorContractAddress": "the address of the creator contract for the claim",
									"mintIndices": "the mint index of the claim"
								},
								"returns": {
									"_0": "whether or not the mint index was consumed"
								}
							},
							"getClaim(address,uint256)": {
								"params": {
									"claimIndex": "the index of the claim",
									"creatorContractAddress": "the address of the creator contract"
								},
								"returns": {
									"_0": "the claim object"
								}
							},
							"getClaimCount(address)": {
								"params": {
									"creatorContractAddress": "the address of the creator contract"
								},
								"returns": {
									"_0": "the number of _claims initialized for this creator contract"
								}
							},
							"getTotalMints(address,address,uint256)": {
								"params": {
									"claimIndex": "the index of the claim",
									"creatorContractAddress": "the address of the creator contract for the claim",
									"minter": "the address of the minting address"
								},
								"returns": {
									"_0": "how many mints the minter has made"
								}
							},
							"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
								"params": {
									"claimParameters": "the parameters which will affect the minting behavior of the claim",
									"creatorContractAddress": "the creator contract the claim will mint tokens for"
								},
								"returns": {
									"_0": "the index of the newly created claim"
								}
							},
							"mint(address,uint256,uint32,bytes32[])": {
								"params": {
									"claimIndex": "the index of the claim for which we will mint",
									"creatorContractAddress": "the creator contract address",
									"merkleProof": "if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)",
									"mintIndex": "the mint index (only needed for merkle claims)"
								}
							},
							"mintBatch(address,uint256,uint16,uint32[],bytes32[][])": {
								"params": {
									"claimIndex": "the index of the claim for which we will mint",
									"creatorContractAddress": "the creator contract address",
									"merkleProofs": "if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)",
									"mintCount": "the number of claims to mint",
									"mintIndices": "the mint index (only needed for merkle claims)"
								}
							},
							"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
								"params": {
									"claimIndex": "the index of the claim in the list of creatorContractAddress' _claims",
									"claimParameters": "the parameters which will affect the minting behavior of the claim",
									"creatorContractAddress": "the creator contract corresponding to the claim"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"checkMintIndex(address,uint256,uint32)": "cda08536",
							"checkMintIndices(address,uint256,uint32[])": "f8a6137b",
							"getClaim(address,uint256)": "0f79ab39",
							"getClaimCount(address)": "d5fdfe87",
							"getTotalMints(address,address,uint256)": "42f3bef4",
							"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": "037b79db",
							"mint(address,uint256,uint32,bytes32[])": "bbf2a8c6",
							"mintBatch(address,uint256,uint16,uint32[],bytes32[][])": "3512da33",
							"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": "1831a643"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint224\",\"name\":\"claimIndex\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"ClaimInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"}],\"name\":\"ClaimMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"mintCount\",\"type\":\"uint16\"}],\"name\":\"ClaimMintBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"mintIndex\",\"type\":\"uint32\"}],\"name\":\"checkMintIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"mintIndices\",\"type\":\"uint32[]\"}],\"name\":\"checkMintIndices\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"}],\"name\":\"getClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"total\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalMax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"walletMax\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"enum IERC721LazyClaim.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct IERC721LazyClaim.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"}],\"name\":\"getClaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"}],\"name\":\"getTotalMints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"totalMax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"walletMax\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"enum IERC721LazyClaim.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct IERC721LazyClaim.ClaimParameters\",\"name\":\"claimParameters\",\"type\":\"tuple\"}],\"name\":\"initializeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"mintIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"mintCount\",\"type\":\"uint16\"},{\"internalType\":\"uint32[]\",\"name\":\"mintIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"totalMax\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"walletMax\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"enum IERC721LazyClaim.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"identical\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"internalType\":\"struct IERC721LazyClaim.ClaimParameters\",\"name\":\"claimParameters\",\"type\":\"tuple\"}],\"name\":\"updateClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkMintIndex(address,uint256,uint32)\":{\"params\":{\"claimIndex\":\"the index of the claim\",\"creatorContractAddress\":\"the address of the creator contract for the claim\",\"mintIndex\":\"the mint index of the claim\"},\"returns\":{\"_0\":\"whether or not the mint index was consumed\"}},\"checkMintIndices(address,uint256,uint32[])\":{\"params\":{\"claimIndex\":\"the index of the claim\",\"creatorContractAddress\":\"the address of the creator contract for the claim\",\"mintIndices\":\"the mint index of the claim\"},\"returns\":{\"_0\":\"whether or not the mint index was consumed\"}},\"getClaim(address,uint256)\":{\"params\":{\"claimIndex\":\"the index of the claim\",\"creatorContractAddress\":\"the address of the creator contract\"},\"returns\":{\"_0\":\"the claim object\"}},\"getClaimCount(address)\":{\"params\":{\"creatorContractAddress\":\"the address of the creator contract\"},\"returns\":{\"_0\":\"the number of _claims initialized for this creator contract\"}},\"getTotalMints(address,address,uint256)\":{\"params\":{\"claimIndex\":\"the index of the claim\",\"creatorContractAddress\":\"the address of the creator contract for the claim\",\"minter\":\"the address of the minting address\"},\"returns\":{\"_0\":\"how many mints the minter has made\"}},\"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))\":{\"params\":{\"claimParameters\":\"the parameters which will affect the minting behavior of the claim\",\"creatorContractAddress\":\"the creator contract the claim will mint tokens for\"},\"returns\":{\"_0\":\"the index of the newly created claim\"}},\"mint(address,uint256,uint32,bytes32[])\":{\"params\":{\"claimIndex\":\"the index of the claim for which we will mint\",\"creatorContractAddress\":\"the creator contract address\",\"merkleProof\":\"if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\",\"mintIndex\":\"the mint index (only needed for merkle claims)\"}},\"mintBatch(address,uint256,uint16,uint32[],bytes32[][])\":{\"params\":{\"claimIndex\":\"the index of the claim for which we will mint\",\"creatorContractAddress\":\"the creator contract address\",\"merkleProofs\":\"if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)\",\"mintCount\":\"the number of claims to mint\",\"mintIndices\":\"the mint index (only needed for merkle claims)\"}},\"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))\":{\"params\":{\"claimIndex\":\"the index of the claim in the list of creatorContractAddress' _claims\",\"claimParameters\":\"the parameters which will affect the minting behavior of the claim\",\"creatorContractAddress\":\"the creator contract corresponding to the claim\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkMintIndex(address,uint256,uint32)\":{\"notice\":\"check if a mint index has been consumed or not (only for merkle claims)\"},\"checkMintIndices(address,uint256,uint32[])\":{\"notice\":\"check if multiple mint indices has been consumed or not (only for merkle claims)\"},\"getClaim(address,uint256)\":{\"notice\":\"get a claim corresponding to a creator contract and index\"},\"getClaimCount(address)\":{\"notice\":\"get the number of _claims initialized for a given creator contract\"},\"getTotalMints(address,address,uint256)\":{\"notice\":\"get mints made for a wallet (only for non-merkle claims with walletMax)\"},\"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))\":{\"notice\":\"initialize a new claim, emit initialize event, and return the newly created index\"},\"mint(address,uint256,uint32,bytes32[])\":{\"notice\":\"allow a wallet to lazily claim a token according to parameters\"},\"mintBatch(address,uint256,uint16,uint32[],bytes32[][])\":{\"notice\":\"allow a wallet to lazily claim a token according to parameters\"},\"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))\":{\"notice\":\"update an existing claim at claimIndex\"}},\"notice\":\"Lazy Claim interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/manifold/lazyclaim/IERC721LazyClaim.sol\":\"IERC721LazyClaim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/manifold/lazyclaim/IERC721LazyClaim.sol\":{\"keccak256\":\"0x722757e972a614f2ebe03307e47a0935ad94dc3e52976b2fd0309f8ec65aa295\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68d785b3e95f0fddd71342faf4547e5f475a1ba6e513f0534f869c0cb3ae1db7\",\"dweb:/ipfs/QmSJDtdZeg4uSw1J5rmZ8Xt6Y1nJTrZAcXf7rh6JL21ceL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"checkMintIndex(address,uint256,uint32)": {
								"notice": "check if a mint index has been consumed or not (only for merkle claims)"
							},
							"checkMintIndices(address,uint256,uint32[])": {
								"notice": "check if multiple mint indices has been consumed or not (only for merkle claims)"
							},
							"getClaim(address,uint256)": {
								"notice": "get a claim corresponding to a creator contract and index"
							},
							"getClaimCount(address)": {
								"notice": "get the number of _claims initialized for a given creator contract"
							},
							"getTotalMints(address,address,uint256)": {
								"notice": "get mints made for a wallet (only for non-merkle claims with walletMax)"
							},
							"initializeClaim(address,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
								"notice": "initialize a new claim, emit initialize event, and return the newly created index"
							},
							"mint(address,uint256,uint32,bytes32[])": {
								"notice": "allow a wallet to lazily claim a token according to parameters"
							},
							"mintBatch(address,uint256,uint16,uint32[],bytes32[][])": {
								"notice": "allow a wallet to lazily claim a token according to parameters"
							},
							"updateClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
								"notice": "update an existing claim at claimIndex"
							}
						},
						"notice": "Lazy Claim interface",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol": {
				"ast": {
					"absolutePath": "@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol",
					"exportedSymbols": {
						"ICreatorCore": [
							277
						],
						"IERC165": [
							1118
						]
					},
					"id": 278,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 278,
							"sourceUnit": 1119,
							"src": "85:65:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1118,
										"src": "217:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "217:7:0"
								}
							],
							"canonicalName": "ICreatorCore",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "152:38:0",
								"text": " @dev Core creator interface"
							},
							"fullyImplemented": false,
							"id": 277,
							"linearizedBaseContracts": [
								277,
								1118
							],
							"name": "ICreatorCore",
							"nameLocation": "201:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "d8cb8ba4086944eabf43c5535b7712015e4d4c714b24bf812c040ea5b7a3e42a",
									"id": 11,
									"name": "ExtensionRegistered",
									"nameLocation": "238:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "274:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "258:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "258:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "301:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "285:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "285:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "257:51:0"
									},
									"src": "232:77:0"
								},
								{
									"anonymous": false,
									"eventSelector": "d19cf84cf0fec6bec9ddfa29c63adf83a55707c712f32c8285d6180a78901479",
									"id": 17,
									"name": "ExtensionUnregistered",
									"nameLocation": "320:21:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"indexed": true,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "358:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "342:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "385:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "369:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 14,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "369:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:51:0"
									},
									"src": "314:79:0"
								},
								{
									"anonymous": false,
									"eventSelector": "05ac7bc5a606cd92a63365f9fda244499b9add0526b22d99937b6bd88181059c",
									"id": 23,
									"name": "ExtensionBlacklisted",
									"nameLocation": "404:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"indexed": true,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "441:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "425:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "468:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "452:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 20,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "452:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "424:51:0"
									},
									"src": "398:78:0"
								},
								{
									"anonymous": false,
									"eventSelector": "6a835c4fcf7e0d398db3762332fdaa1471814ad39f1e2d6d0b3fdabf8efee3e0",
									"id": 31,
									"name": "MintPermissionsUpdated",
									"nameLocation": "487:22:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "526:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "510:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "510:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": true,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "553:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "537:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "537:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "582:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "566:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "566:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "509:80:0"
									},
									"src": "481:109:0"
								},
								{
									"anonymous": false,
									"eventSelector": "abb46fe0761d77584bde75697647804ffd8113abd4d8d06bc664150395eccdee",
									"id": 41,
									"name": "RoyaltiesUpdated",
									"nameLocation": "601:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "634:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "618:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "618:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"indexed": false,
												"mutability": "mutable",
												"name": "receivers",
												"nameLocation": "661:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "643:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 34,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "643:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 35,
													"nodeType": "ArrayTypeName",
													"src": "643:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"indexed": false,
												"mutability": "mutable",
												"name": "basisPoints",
												"nameLocation": "682:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "672:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 37,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "672:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 38,
													"nodeType": "ArrayTypeName",
													"src": "672:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "617:77:0"
									},
									"src": "595:100:0"
								},
								{
									"anonymous": false,
									"eventSelector": "2b6849d5976d799a5b0ca4dfd6b40a3d7afe9ea72c091fa01a958594f9a2659b",
									"id": 49,
									"name": "DefaultRoyaltiesUpdated",
									"nameLocation": "706:23:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"indexed": false,
												"mutability": "mutable",
												"name": "receivers",
												"nameLocation": "748:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "730:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 42,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "730:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 43,
													"nodeType": "ArrayTypeName",
													"src": "730:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"indexed": false,
												"mutability": "mutable",
												"name": "basisPoints",
												"nameLocation": "769:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "759:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 45,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "759:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 46,
													"nodeType": "ArrayTypeName",
													"src": "759:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "729:52:0"
									},
									"src": "700:82:0"
								},
								{
									"anonymous": false,
									"eventSelector": "535a93d2cb000582c0ebeaa9be4890ec6a287f98eb2df00c54c300612fd78d8f",
									"id": 59,
									"name": "ExtensionRoyaltiesUpdated",
									"nameLocation": "793:25:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"indexed": true,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "835:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "819:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 54,
												"indexed": false,
												"mutability": "mutable",
												"name": "receivers",
												"nameLocation": "864:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "846:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 52,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "846:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 53,
													"nodeType": "ArrayTypeName",
													"src": "846:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"indexed": false,
												"mutability": "mutable",
												"name": "basisPoints",
												"nameLocation": "885:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "875:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 55,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "875:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 56,
													"nodeType": "ArrayTypeName",
													"src": "875:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:79:0"
									},
									"src": "787:111:0"
								},
								{
									"anonymous": false,
									"eventSelector": "072a7592283e2c2d1d56d21517ff6013325e0f55483f4828373ff4d98b0a1a36",
									"id": 65,
									"name": "ExtensionApproveTransferUpdated",
									"nameLocation": "909:31:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"indexed": true,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "957:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "941:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"indexed": false,
												"mutability": "mutable",
												"name": "enabled",
												"nameLocation": "973:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "968:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 62,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "968:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:41:0"
									},
									"src": "903:79:0"
								},
								{
									"documentation": {
										"id": 66,
										"nodeType": "StructuredDocumentation",
										"src": "988:54:0",
										"text": " @dev gets address of all extensions"
									},
									"functionSelector": "83b7db63",
									"id": 72,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getExtensions",
									"nameLocation": "1056:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1069:2:0"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1095:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 68,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1095:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 69,
													"nodeType": "ArrayTypeName",
													"src": "1095:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1094:18:0"
									},
									"scope": 277,
									"src": "1047:66:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 73,
										"nodeType": "StructuredDocumentation",
										"src": "1119:231:0",
										"text": " @dev add an extension.  Can only be called by contract owner or admin.\n extension address must point to a contract implementing ICreatorExtension.\n Returns True if newly added, False if already added."
									},
									"functionSelector": "3071a0f9",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerExtension",
									"nameLocation": "1364:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "1390:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1382:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1382:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "baseURI",
												"nameLocation": "1417:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1401:23:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 76,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1401:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1381:44:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1434:0:0"
									},
									"scope": 277,
									"src": "1355:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "1441:231:0",
										"text": " @dev add an extension.  Can only be called by contract owner or admin.\n extension address must point to a contract implementing ICreatorExtension.\n Returns True if newly added, False if already added."
									},
									"functionSelector": "3f0f37f6",
									"id": 90,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerExtension",
									"nameLocation": "1686:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "1712:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1704:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1704:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "baseURI",
												"nameLocation": "1739:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1723:23:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 84,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1723:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "baseURIIdentical",
												"nameLocation": "1753:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1748:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 86,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1748:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1703:67:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1779:0:0"
									},
									"scope": 277,
									"src": "1677:103:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "1786:147:0",
										"text": " @dev add an extension.  Can only be called by contract owner or admin.\n Returns True if removed, False if already removed."
									},
									"functionSelector": "ce8aee9d",
									"id": 96,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unregisterExtension",
									"nameLocation": "1947:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "1975:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "1967:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1967:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1966:19:0"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1994:0:0"
									},
									"scope": 277,
									"src": "1938:57:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "2001:331:0",
										"text": " @dev blacklist an extension.  Can only be called by contract owner or admin.\n This function will destroy all ability to reference the metadata of any tokens created\n by the specified extension. It will also unregister the extension if needed.\n Returns True if removed, False if already removed."
									},
									"functionSelector": "02e7afb7",
									"id": 102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "blacklistExtension",
									"nameLocation": "2346:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "2373:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "2365:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2365:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2364:19:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2392:0:0"
									},
									"scope": 277,
									"src": "2337:56:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "2399:95:0",
										"text": " @dev set the baseTokenURI of an extension.  Can only be called by extension."
									},
									"functionSelector": "3e6134b8",
									"id": 108,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setBaseTokenURIExtension",
									"nameLocation": "2508:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "2549:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "2533:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 104,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2533:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2532:21:0"
									},
									"returnParameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2562:0:0"
									},
									"scope": 277,
									"src": "2499:64:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "2569:172:0",
										"text": " @dev set the baseTokenURI of an extension.  Can only be called by extension.\n For tokens with no uri configured, tokenURI will return \"uri+tokenId\""
									},
									"functionSelector": "82dcc0c8",
									"id": 116,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setBaseTokenURIExtension",
									"nameLocation": "2755:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "2796:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "2780:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 110,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2780:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "identical",
												"nameLocation": "2806:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "2801:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 112,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2801:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:37:0"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2825:0:0"
									},
									"scope": 277,
									"src": "2746:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 117,
										"nodeType": "StructuredDocumentation",
										"src": "2832:233:0",
										"text": " @dev set the common prefix of an extension.  Can only be called by extension.\n If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n Useful if you want to use ipfs/arweave"
									},
									"functionSelector": "66d1e9d0",
									"id": 122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenURIPrefixExtension",
									"nameLocation": "3079:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "prefix",
												"nameLocation": "3122:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "3106:22:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 118,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3106:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3105:24:0"
									},
									"returnParameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3138:0:0"
									},
									"scope": 277,
									"src": "3070:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "3145:114:0",
										"text": " @dev set the tokenURI of a token extension.  Can only be called by extension that minted token."
									},
									"functionSelector": "e92a89f6",
									"id": 130,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenURIExtension",
									"nameLocation": "3273:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3302:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 130,
												"src": "3294:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "3327:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 130,
												"src": "3311:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 126,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3311:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3293:38:0"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3340:0:0"
									},
									"scope": 277,
									"src": "3264:77:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "3347:134:0",
										"text": " @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token."
									},
									"functionSelector": "61e5bc6b",
									"id": 140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenURIExtension",
									"nameLocation": "3495:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3533:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "3516:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 132,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3516:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 133,
													"nodeType": "ArrayTypeName",
													"src": "3516:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "3560:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "3542:21:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 135,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "3542:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 136,
													"nodeType": "ArrayTypeName",
													"src": "3542:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3515:49:0"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3573:0:0"
									},
									"scope": 277,
									"src": "3486:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "3580:187:0",
										"text": " @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\n For tokens with no uri configured, tokenURI will return \"uri+tokenId\""
									},
									"functionSelector": "30176e13",
									"id": 146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setBaseTokenURI",
									"nameLocation": "3781:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "3813:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "3797:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3797:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:21:0"
									},
									"returnParameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3826:0:0"
									},
									"scope": 277,
									"src": "3772:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "3833:248:0",
										"text": " @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\n If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n Useful if you want to use ipfs/arweave"
									},
									"functionSelector": "99e0dd7c",
									"id": 152,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenURIPrefix",
									"nameLocation": "4095:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "prefix",
												"nameLocation": "4129:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "4113:22:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 148,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4113:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4112:24:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4145:0:0"
									},
									"scope": 277,
									"src": "4086:60:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "4152:106:0",
										"text": " @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin."
									},
									"functionSelector": "162094c4",
									"id": 160,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenURI",
									"nameLocation": "4272:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4292:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4284:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4284:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "4317:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "4301:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 156,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4301:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4283:38:0"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4330:0:0"
									},
									"scope": 277,
									"src": "4263:68:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "4337:114:0",
										"text": " @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin."
									},
									"functionSelector": "aafb2d44",
									"id": 170,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenURI",
									"nameLocation": "4465:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "4494:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4477:25:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 162,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "4477:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 163,
													"nodeType": "ArrayTypeName",
													"src": "4477:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "uris",
												"nameLocation": "4522:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4504:22:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 165,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "4504:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 166,
													"nodeType": "ArrayTypeName",
													"src": "4504:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:51:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4536:0:0"
									},
									"scope": 277,
									"src": "4456:81:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "4543:94:0",
										"text": " @dev set a permissions contract for an extension.  Used to control minting."
									},
									"functionSelector": "f0cdc499",
									"id": 178,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setMintPermissions",
									"nameLocation": "4651:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "4678:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "4670:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "4697:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "4689:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4689:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4669:40:0"
									},
									"returnParameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4718:0:0"
									},
									"scope": 277,
									"src": "4642:77:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "4725:158:0",
										"text": " @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\n from the extension before transferring"
									},
									"functionSelector": "ac0c8cfa",
									"id": 184,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApproveTransferExtension",
									"nameLocation": "4897:27:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "enabled",
												"nameLocation": "4930:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "4925:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 180,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4925:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4924:14:0"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4947:0:0"
									},
									"scope": 277,
									"src": "4888:60:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "4954:58:0",
										"text": " @dev get the extension of a given token"
									},
									"functionSelector": "239be317",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenExtension",
									"nameLocation": "5026:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5049:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "5041:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5041:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5040:17:0"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "5081:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5081:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5080:9:0"
									},
									"scope": 277,
									"src": "5017:73:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "5096:45:0",
										"text": " @dev Set default royalties"
									},
									"functionSelector": "332dd1ae",
									"id": 202,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRoyalties",
									"nameLocation": "5155:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "receivers",
												"nameLocation": "5195:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "5168:36:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_calldata_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 194,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5168:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 195,
													"nodeType": "ArrayTypeName",
													"src": "5168:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "basisPoints",
												"nameLocation": "5225:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "5206:30:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 197,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5206:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 198,
													"nodeType": "ArrayTypeName",
													"src": "5206:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5167:70:0"
									},
									"returnParameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5246:0:0"
									},
									"scope": 277,
									"src": "5146:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "5253:48:0",
										"text": " @dev Set royalties of a token"
									},
									"functionSelector": "20e4afe2",
									"id": 214,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRoyalties",
									"nameLocation": "5315:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5336:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "5328:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5328:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "receivers",
												"nameLocation": "5372:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "5345:36:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_calldata_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 206,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5345:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 207,
													"nodeType": "ArrayTypeName",
													"src": "5345:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "basisPoints",
												"nameLocation": "5402:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "5383:30:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 209,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5383:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 210,
													"nodeType": "ArrayTypeName",
													"src": "5383:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5327:87:0"
									},
									"returnParameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5423:0:0"
									},
									"scope": 277,
									"src": "5306:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "5430:53:0",
										"text": " @dev Set royalties of an extension"
									},
									"functionSelector": "b0fe87c9",
									"id": 226,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRoyaltiesExtension",
									"nameLocation": "5497:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "extension",
												"nameLocation": "5527:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "5519:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5519:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "receivers",
												"nameLocation": "5565:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "5538:36:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_calldata_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 218,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5538:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 219,
													"nodeType": "ArrayTypeName",
													"src": "5538:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "basisPoints",
												"nameLocation": "5595:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "5576:30:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 221,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5576:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 222,
													"nodeType": "ArrayTypeName",
													"src": "5576:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5518:89:0"
									},
									"returnParameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5616:0:0"
									},
									"scope": 277,
									"src": "5488:129:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "5623:92:0",
										"text": " @dev Get royalites of a token.  Returns list of receivers and basisPoints"
									},
									"functionSelector": "bb3bafd6",
									"id": 238,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoyalties",
									"nameLocation": "5729:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5750:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "5742:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5742:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5741:17:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "5782:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 231,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5782:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 232,
													"nodeType": "ArrayTypeName",
													"src": "5782:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "5808:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 234,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5808:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 235,
													"nodeType": "ArrayTypeName",
													"src": "5808:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5781:44:0"
									},
									"scope": 277,
									"src": "5720:106:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b9c4d9fb",
									"id": 246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFeeRecipients",
									"nameLocation": "5896:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5921:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "5913:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5913:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5912:17:0"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "5953:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 242,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5953:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 243,
													"nodeType": "ArrayTypeName",
													"src": "5953:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5952:26:0"
									},
									"scope": 277,
									"src": "5887:92:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "0ebd4c7f",
									"id": 254,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFeeBps",
									"nameLocation": "5993:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6011:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "6003:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6003:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6002:17:0"
									},
									"returnParameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "6043:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 250,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "6043:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 251,
													"nodeType": "ArrayTypeName",
													"src": "6043:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6042:15:0"
									},
									"scope": 277,
									"src": "5984:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d5a06d4c",
									"id": 265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFees",
									"nameLocation": "6072:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6088:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6080:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6080:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6079:17:0"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6120:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
													"typeString": "address payable[]"
												},
												"typeName": {
													"baseType": {
														"id": 258,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "6120:15:0",
														"stateMutability": "payable",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 259,
													"nodeType": "ArrayTypeName",
													"src": "6120:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
														"typeString": "address payable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "6146:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 261,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6146:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 262,
													"nodeType": "ArrayTypeName",
													"src": "6146:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6119:44:0"
									},
									"scope": 277,
									"src": "6063:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2a55205a",
									"id": 276,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "royaltyInfo",
									"nameLocation": "6178:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6198:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6190:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6190:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6215:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6207:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6207:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6189:32:0"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6245:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6245:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6254:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6254:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6244:18:0"
									},
									"scope": 277,
									"src": "6169:94:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 278,
							"src": "191:6075:0",
							"usedErrors": []
						}
					],
					"src": "33:6234:0"
				},
				"id": 0
			},
			"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol": {
				"ast": {
					"absolutePath": "@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol",
					"exportedSymbols": {
						"ICreatorCore": [
							277
						],
						"IERC165": [
							1118
						],
						"IERC721CreatorCore": [
							372
						]
					},
					"id": 373,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 279,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"absolutePath": "@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol",
							"file": "./ICreatorCore.sol",
							"id": 280,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 373,
							"sourceUnit": 278,
							"src": "85:28:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 282,
										"name": "ICreatorCore",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 277,
										"src": "193:12:1"
									},
									"id": 283,
									"nodeType": "InheritanceSpecifier",
									"src": "193:12:1"
								}
							],
							"canonicalName": "IERC721CreatorCore",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 281,
								"nodeType": "StructuredDocumentation",
								"src": "115:45:1",
								"text": " @dev Core ERC721 creator interface"
							},
							"fullyImplemented": false,
							"id": 372,
							"linearizedBaseContracts": [
								372,
								277,
								1118
							],
							"name": "IERC721CreatorCore",
							"nameLocation": "171:18:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "213:117:1",
										"text": " @dev mint a token with no extension. Can only be called by an admin.\n Returns tokenId minted"
									},
									"functionSelector": "72ff03d3",
									"id": 291,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintBase",
									"nameLocation": "344:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "361:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "353:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "353:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "352:12:1"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "383:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "383:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "382:9:1"
									},
									"scope": 372,
									"src": "335:57:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "398:117:1",
										"text": " @dev mint a token with no extension. Can only be called by an admin.\n Returns tokenId minted"
									},
									"functionSelector": "7884af44",
									"id": 301,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintBase",
									"nameLocation": "529:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "546:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "538:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "538:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "566:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "550:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 295,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "550:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "537:33:1"
									},
									"returnParameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "589:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "589:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "588:9:1"
									},
									"scope": 372,
									"src": "520:78:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "604:123:1",
										"text": " @dev batch mint a token with no extension. Can only be called by an admin.\n Returns tokenId minted"
									},
									"functionSelector": "ad2d0ddd",
									"id": 312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintBaseBatch",
									"nameLocation": "741:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "763:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "755:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "755:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "count",
												"nameLocation": "774:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "767:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 305,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "767:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "754:26:1"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "799:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 308,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "799:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 309,
													"nodeType": "ArrayTypeName",
													"src": "799:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:18:1"
									},
									"scope": 372,
									"src": "732:85:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "823:123:1",
										"text": " @dev batch mint a token with no extension. Can only be called by an admin.\n Returns tokenId minted"
									},
									"functionSelector": "7aa15f16",
									"id": 324,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintBaseBatch",
									"nameLocation": "960:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "982:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 324,
												"src": "974:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "uris",
												"nameLocation": "1004:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 324,
												"src": "986:22:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 316,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "986:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 317,
													"nodeType": "ArrayTypeName",
													"src": "986:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:36:1"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 324,
												"src": "1028:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 320,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1028:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 321,
													"nodeType": "ArrayTypeName",
													"src": "1028:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:18:1"
									},
									"scope": 372,
									"src": "951:95:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 325,
										"nodeType": "StructuredDocumentation",
										"src": "1052:113:1",
										"text": " @dev mint a token. Can only be called by a registered extension.\n Returns tokenId minted"
									},
									"functionSelector": "2928ca58",
									"id": 332,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintExtension",
									"nameLocation": "1179:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1201:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "1193:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 326,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1193:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1192:12:1"
									},
									"returnParameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "1223:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:9:1"
									},
									"scope": 372,
									"src": "1170:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "1238:113:1",
										"text": " @dev mint a token. Can only be called by a registered extension.\n Returns tokenId minted"
									},
									"functionSelector": "fe2e1f58",
									"id": 342,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintExtension",
									"nameLocation": "1365:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1387:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 342,
												"src": "1379:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1379:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "1407:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 342,
												"src": "1391:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 336,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1391:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1378:33:1"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 342,
												"src": "1430:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1430:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1429:9:1"
									},
									"scope": 372,
									"src": "1356:83:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 343,
										"nodeType": "StructuredDocumentation",
										"src": "1445:120:1",
										"text": " @dev batch mint a token. Can only be called by a registered extension.\n Returns tokenIds minted"
									},
									"functionSelector": "e00aab4b",
									"id": 353,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintExtensionBatch",
									"nameLocation": "1579:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1606:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "1598:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1598:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "count",
												"nameLocation": "1617:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "1610:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 346,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1610:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1597:26:1"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "1642:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 349,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1642:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 350,
													"nodeType": "ArrayTypeName",
													"src": "1642:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1641:18:1"
									},
									"scope": 372,
									"src": "1570:90:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "1666:119:1",
										"text": " @dev batch mint a token. Can only be called by a registered extension.\n Returns tokenId minted"
									},
									"functionSelector": "38e52e78",
									"id": 365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintExtensionBatch",
									"nameLocation": "1799:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1826:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1818:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1818:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "uris",
												"nameLocation": "1848:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1830:22:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 357,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "1830:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 358,
													"nodeType": "ArrayTypeName",
													"src": "1830:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1817:36:1"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "1872:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 361,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1872:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 362,
													"nodeType": "ArrayTypeName",
													"src": "1872:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:18:1"
									},
									"scope": 372,
									"src": "1790:100:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "1896:163:1",
										"text": " @dev burn a token. Can only be called by token owner or approved address.\n On burn, calls back to the registered extension's onBurn method"
									},
									"functionSelector": "42966c68",
									"id": 371,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "2073:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2086:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "2078:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2078:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2077:17:1"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2103:0:1"
									},
									"scope": 372,
									"src": "2064:40:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 373,
							"src": "161:1946:1",
							"usedErrors": []
						}
					],
					"src": "33:2074:1"
				},
				"id": 1
			},
			"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol": {
				"ast": {
					"absolutePath": "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
					"exportedSymbols": {
						"ICreatorExtensionTokenURI": [
							389
						],
						"IERC165": [
							1118
						]
					},
					"id": 390,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 374,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 375,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 390,
							"sourceUnit": 1119,
							"src": "85:65:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 377,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1118,
										"src": "276:7:2"
									},
									"id": 378,
									"nodeType": "InheritanceSpecifier",
									"src": "276:7:2"
								}
							],
							"canonicalName": "ICreatorExtensionTokenURI",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 376,
								"nodeType": "StructuredDocumentation",
								"src": "152:84:2",
								"text": " @dev Implement this if you want your extension to have overloadable URI's"
							},
							"fullyImplemented": false,
							"id": 389,
							"linearizedBaseContracts": [
								389,
								1118
							],
							"name": "ICreatorExtensionTokenURI",
							"nameLocation": "247:25:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 379,
										"nodeType": "StructuredDocumentation",
										"src": "291:58:2",
										"text": " Get the uri for a given creator/tokenId"
									},
									"functionSelector": "e9dc6375",
									"id": 388,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "363:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "creator",
												"nameLocation": "380:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "372:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 380,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "372:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "397:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "389:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 382,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "389:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:34:2"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "429:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 385,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "429:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "428:15:2"
									},
									"scope": 389,
									"src": "354:90:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 390,
							"src": "237:209:2",
							"usedErrors": []
						}
					],
					"src": "33:414:2"
				},
				"id": 2
			},
			"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol": {
				"ast": {
					"absolutePath": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol",
					"exportedSymbols": {
						"AdminControl": [
							575
						],
						"Context": [
							791
						],
						"ERC165": [
							1106
						],
						"EnumerableSet": [
							1717
						],
						"IAdminControl": [
							621
						],
						"IERC165": [
							1118
						],
						"Ownable": [
							726
						]
					},
					"id": 576,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 391,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"id": 392,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 576,
							"sourceUnit": 1107,
							"src": "85:64:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
							"file": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
							"id": 393,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 576,
							"sourceUnit": 1718,
							"src": "150:65:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 394,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 576,
							"sourceUnit": 727,
							"src": "216:52:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol",
							"file": "./IAdminControl.sol",
							"id": 395,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 576,
							"sourceUnit": 622,
							"src": "269:29:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 396,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 726,
										"src": "334:7:3"
									},
									"id": 397,
									"nodeType": "InheritanceSpecifier",
									"src": "334:7:3"
								},
								{
									"baseName": {
										"id": 398,
										"name": "IAdminControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 621,
										"src": "343:13:3"
									},
									"id": 399,
									"nodeType": "InheritanceSpecifier",
									"src": "343:13:3"
								},
								{
									"baseName": {
										"id": 400,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1106,
										"src": "358:6:3"
									},
									"id": 401,
									"nodeType": "InheritanceSpecifier",
									"src": "358:6:3"
								}
							],
							"canonicalName": "AdminControl",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 575,
							"linearizedBaseContracts": [
								575,
								1106,
								621,
								1118,
								726,
								791
							],
							"name": "AdminControl",
							"nameLocation": "318:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 405,
									"libraryName": {
										"id": 402,
										"name": "EnumerableSet",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1717,
										"src": "377:13:3"
									},
									"nodeType": "UsingForDirective",
									"src": "371:49:3",
									"typeName": {
										"id": 404,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 403,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1430,
											"src": "395:24:3"
										},
										"referencedDeclaration": 1430,
										"src": "395:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									}
								},
								{
									"constant": false,
									"id": 408,
									"mutability": "mutable",
									"name": "_admins",
									"nameLocation": "490:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 575,
									"src": "457:40:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
										"typeString": "struct EnumerableSet.AddressSet"
									},
									"typeName": {
										"id": 407,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 406,
											"name": "EnumerableSet.AddressSet",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1430,
											"src": "457:24:3"
										},
										"referencedDeclaration": 1430,
										"src": "457:24:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
											"typeString": "struct EnumerableSet.AddressSet"
										}
									},
									"visibility": "private"
								},
								{
									"baseFunctions": [
										1105,
										1117
									],
									"body": {
										"id": 431,
										"nodeType": "Block",
										"src": "673:122:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 419,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "690:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 421,
																		"name": "IAdminControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 621,
																		"src": "710:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAdminControl_$621_$",
																			"typeString": "type(contract IAdminControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAdminControl_$621_$",
																			"typeString": "type(contract IAdminControl)"
																		}
																	],
																	"id": 420,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "705:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 422,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "705:19:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAdminControl_$621",
																	"typeString": "type(contract IAdminControl)"
																}
															},
															"id": 423,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "705:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "690:46:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 427,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 411,
																"src": "776:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 425,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "752:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AdminControl_$575_$",
																	"typeString": "type(contract super AdminControl)"
																}
															},
															"id": 426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1105,
															"src": "752:23:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "752:36:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "690:98:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 418,
												"id": 430,
												"nodeType": "Return",
												"src": "683:105:3"
											}
										]
									},
									"documentation": {
										"id": 409,
										"nodeType": "StructuredDocumentation",
										"src": "504:56:3",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "574:17:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 415,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 413,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1106,
												"src": "641:6:3"
											},
											{
												"id": 414,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1118,
												"src": "649:7:3"
											}
										],
										"src": "632:25:3"
									},
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "599:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "592:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 410,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "592:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "591:20:3"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "667:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 416,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "667:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "666:6:3"
									},
									"scope": 575,
									"src": "565:230:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 451,
										"nodeType": "Block",
										"src": "913:130:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 446,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 436,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 654,
																		"src": "931:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "931:7:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 438,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "942:3:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 439,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "942:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "931:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 443,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "973:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "973:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 441,
																		"name": "_admins",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 408,
																		"src": "956:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																			"typeString": "struct EnumerableSet.AddressSet storage ref"
																		}
																	},
																	"id": 442,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "contains",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1511,
																	"src": "956:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1430_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																		"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
																	}
																},
																"id": 445,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "956:28:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "931:53:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41646d696e436f6e74726f6c3a204d757374206265206f776e6572206f722061646d696e",
															"id": 447,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "986:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ca6fc84f9a44d1110756284e5c56ff72cff80e2de6c9cfbe8379a88afa111687",
																"typeString": "literal_string \"AdminControl: Must be owner or admin\""
															},
															"value": "AdminControl: Must be owner or admin"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ca6fc84f9a44d1110756284e5c56ff72cff80e2de6c9cfbe8379a88afa111687",
																"typeString": "literal_string \"AdminControl: Must be owner or admin\""
															}
														],
														"id": 435,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "923:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "923:102:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 449,
												"nodeType": "ExpressionStatement",
												"src": "923:102:3"
											},
											{
												"id": 450,
												"nodeType": "PlaceholderStatement",
												"src": "1035:1:3"
											}
										]
									},
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "801:82:3",
										"text": " @dev Only allows approved admins to call the specified function"
									},
									"id": 452,
									"name": "adminRequired",
									"nameLocation": "897:13:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "910:2:3"
									},
									"src": "888:155:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										600
									],
									"body": {
										"id": 495,
										"nodeType": "Block",
										"src": "1189:183:3",
										"statements": [
											{
												"expression": {
													"id": 468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 460,
														"name": "admins",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "1199:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 464,
																		"name": "_admins",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 408,
																		"src": "1222:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																			"typeString": "struct EnumerableSet.AddressSet storage ref"
																		}
																	},
																	"id": 465,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1526,
																	"src": "1222:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1430_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																		"typeString": "function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"
																	}
																},
																"id": 466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1222:16:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "1208:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (address[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 461,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1212:7:3",
																	"stateMutability": "nonpayable",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 462,
																"nodeType": "ArrayTypeName",
																"src": "1212:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																	"typeString": "address[]"
																}
															}
														},
														"id": 467,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1208:31:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "1199:40:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"id": 469,
												"nodeType": "ExpressionStatement",
												"src": "1199:40:3"
											},
											{
												"body": {
													"id": 491,
													"nodeType": "Block",
													"src": "1293:50:3",
													"statements": [
														{
															"expression": {
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 482,
																		"name": "admins",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 458,
																		"src": "1307:6:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																			"typeString": "address[] memory"
																		}
																	},
																	"id": 484,
																	"indexExpression": {
																		"id": 483,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 471,
																		"src": "1314:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1307:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 487,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 471,
																			"src": "1330:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 485,
																			"name": "_admins",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 408,
																			"src": "1319:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																				"typeString": "struct EnumerableSet.AddressSet storage ref"
																			}
																		},
																		"id": 486,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "at",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1553,
																		"src": "1319:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1430_storage_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																			"typeString": "function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"
																		}
																	},
																	"id": 488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1319:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1307:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 490,
															"nodeType": "ExpressionStatement",
															"src": "1307:25:3"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 474,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "1266:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 475,
																"name": "_admins",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 408,
																"src": "1270:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																	"typeString": "struct EnumerableSet.AddressSet storage ref"
																}
															},
															"id": 476,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1526,
															"src": "1270:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1430_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																"typeString": "function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"
															}
														},
														"id": 477,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1270:16:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1266:20:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 492,
												"initializationExpression": {
													"assignments": [
														471
													],
													"declarations": [
														{
															"constant": false,
															"id": 471,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1259:1:3",
															"nodeType": "VariableDeclaration",
															"scope": 492,
															"src": "1254:6:3",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 470,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "1254:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 473,
													"initialValue": {
														"hexValue": "30",
														"id": 472,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1263:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1254:10:3"
												},
												"loopExpression": {
													"expression": {
														"id": 480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1288:3:3",
														"subExpression": {
															"id": 479,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "1288:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 481,
													"nodeType": "ExpressionStatement",
													"src": "1288:3:3"
												},
												"nodeType": "ForStatement",
												"src": "1249:94:3"
											},
											{
												"expression": {
													"id": 493,
													"name": "admins",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 458,
													"src": "1359:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 459,
												"id": 494,
												"nodeType": "Return",
												"src": "1352:13:3"
											}
										]
									},
									"documentation": {
										"id": 453,
										"nodeType": "StructuredDocumentation",
										"src": "1052:54:3",
										"text": " @dev See {IAdminControl-getAdmins}."
									},
									"functionSelector": "31ae450b",
									"id": 496,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAdmins",
									"nameLocation": "1120:9:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 455,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1146:8:3"
									},
									"parameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1129:2:3"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "admins",
												"nameLocation": "1181:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "1164:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 456,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1164:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 457,
													"nodeType": "ArrayTypeName",
													"src": "1164:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1163:25:3"
									},
									"scope": 575,
									"src": "1111:261:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										606
									],
									"body": {
										"id": 524,
										"nodeType": "Block",
										"src": "1505:140:3",
										"statements": [
											{
												"condition": {
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1519:24:3",
													"subExpression": {
														"arguments": [
															{
																"id": 507,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 499,
																"src": "1537:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 505,
																"name": "_admins",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 408,
																"src": "1520:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																	"typeString": "struct EnumerableSet.AddressSet storage ref"
																}
															},
															"id": 506,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "contains",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1511,
															"src": "1520:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1430_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
															}
														},
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1520:23:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 523,
												"nodeType": "IfStatement",
												"src": "1515:124:3",
												"trueBody": {
													"id": 522,
													"nodeType": "Block",
													"src": "1545:94:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 511,
																		"name": "admin",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 499,
																		"src": "1578:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 512,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1585:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1585:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 510,
																	"name": "AdminApproved",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 587,
																	"src": "1564:13:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (address,address)"
																	}
																},
																"id": 514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1564:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 515,
															"nodeType": "EmitStatement",
															"src": "1559:37:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 519,
																		"name": "admin",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 499,
																		"src": "1622:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 516,
																		"name": "_admins",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 408,
																		"src": "1610:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																			"typeString": "struct EnumerableSet.AddressSet storage ref"
																		}
																	},
																	"id": 518,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "add",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1457,
																	"src": "1610:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1430_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																		"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
																	}
																},
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1610:18:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 521,
															"nodeType": "ExpressionStatement",
															"src": "1610:18:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 497,
										"nodeType": "StructuredDocumentation",
										"src": "1378:57:3",
										"text": " @dev See {IAdminControl-approveAdmin}."
									},
									"functionSelector": "6d73e669",
									"id": 525,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 503,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 502,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 668,
												"src": "1495:9:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "1495:9:3"
										}
									],
									"name": "approveAdmin",
									"nameLocation": "1449:12:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 501,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1486:8:3"
									},
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "1470:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "1462:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 498,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1462:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:15:3"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1505:0:3"
									},
									"scope": 575,
									"src": "1440:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										612
									],
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "1776:141:3",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 536,
															"name": "admin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "1807:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 534,
															"name": "_admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "1790:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																"typeString": "struct EnumerableSet.AddressSet storage ref"
															}
														},
														"id": 535,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "contains",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1511,
														"src": "1790:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1430_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
															"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
														}
													},
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1790:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 551,
												"nodeType": "IfStatement",
												"src": "1786:125:3",
												"trueBody": {
													"id": 550,
													"nodeType": "Block",
													"src": "1815:96:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 539,
																		"name": "admin",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "1847:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 540,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1854:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1854:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 538,
																	"name": "AdminRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 593,
																	"src": "1834:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (address,address)"
																	}
																},
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1834:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 543,
															"nodeType": "EmitStatement",
															"src": "1829:36:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 547,
																		"name": "admin",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "1894:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 544,
																		"name": "_admins",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 408,
																		"src": "1879:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																			"typeString": "struct EnumerableSet.AddressSet storage ref"
																		}
																	},
																	"id": 546,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "remove",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1484,
																	"src": "1879:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AddressSet_$1430_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																		"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1879:21:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 549,
															"nodeType": "ExpressionStatement",
															"src": "1879:21:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 526,
										"nodeType": "StructuredDocumentation",
										"src": "1651:56:3",
										"text": " @dev See {IAdminControl-revokeAdmin}."
									},
									"functionSelector": "2d345670",
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 532,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 531,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 668,
												"src": "1766:9:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "1766:9:3"
										}
									],
									"name": "revokeAdmin",
									"nameLocation": "1721:11:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 530,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1757:8:3"
									},
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "1741:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "1733:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1733:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1732:15:3"
									},
									"returnParameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1776:0:3"
									},
									"scope": 575,
									"src": "1712:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										620
									],
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "2048:69:3",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 562,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 654,
																		"src": "2066:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2066:7:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 564,
																	"name": "admin",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 556,
																	"src": "2077:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2066:16:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 568,
																		"name": "admin",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 556,
																		"src": "2103:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 566,
																		"name": "_admins",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 408,
																		"src": "2086:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_AddressSet_$1430_storage",
																			"typeString": "struct EnumerableSet.AddressSet storage ref"
																		}
																	},
																	"id": 567,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "contains",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1511,
																	"src": "2086:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_struct$_AddressSet_$1430_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$1430_storage_ptr_$",
																		"typeString": "function (struct EnumerableSet.AddressSet storage pointer,address) view returns (bool)"
																	}
																},
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2086:23:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2066:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 571,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2065:45:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 561,
												"id": 572,
												"nodeType": "Return",
												"src": "2058:52:3"
											}
										]
									},
									"documentation": {
										"id": 554,
										"nodeType": "StructuredDocumentation",
										"src": "1923:52:3",
										"text": " @dev See {IAdminControl-isAdmin}."
									},
									"functionSelector": "24d7806c",
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isAdmin",
									"nameLocation": "1989:7:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 558,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2019:8:3"
									},
									"parameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "2005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "1997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:15:3"
									},
									"returnParameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "2042:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 559,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:6:3"
									},
									"scope": 575,
									"src": "1980:137:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 576,
							"src": "300:1820:3",
							"usedErrors": []
						}
					],
					"src": "33:2087:3"
				},
				"id": 3
			},
			"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol": {
				"ast": {
					"absolutePath": "@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol",
					"exportedSymbols": {
						"IAdminControl": [
							621
						],
						"IERC165": [
							1118
						]
					},
					"id": 622,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 577,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 578,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 622,
							"sourceUnit": 1119,
							"src": "85:65:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 580,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1118,
										"src": "223:7:4"
									},
									"id": 581,
									"nodeType": "InheritanceSpecifier",
									"src": "223:7:4"
								}
							],
							"canonicalName": "IAdminControl",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 579,
								"nodeType": "StructuredDocumentation",
								"src": "152:43:4",
								"text": " @dev Interface for admin control"
							},
							"fullyImplemented": false,
							"id": 621,
							"linearizedBaseContracts": [
								621,
								1118
							],
							"name": "IAdminControl",
							"nameLocation": "206:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "7e1a1a08d52e4ba0e21554733d66165fd5151f99460116223d9e3a608eec5cb1",
									"id": 587,
									"name": "AdminApproved",
									"nameLocation": "244:13:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 583,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "274:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "258:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "258:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "299:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "283:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "283:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "257:49:4"
									},
									"src": "238:69:4"
								},
								{
									"anonymous": false,
									"eventSelector": "7c0c3c84c67c85fcac635147348bfe374c24a1a93d0366d1cfe9d8853cbf89d5",
									"id": 593,
									"name": "AdminRevoked",
									"nameLocation": "318:12:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "347:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "331:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "331:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "372:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "356:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "356:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "330:49:4"
									},
									"src": "312:68:4"
								},
								{
									"documentation": {
										"id": 594,
										"nodeType": "StructuredDocumentation",
										"src": "386:50:4",
										"text": " @dev gets address of all admins"
									},
									"functionSelector": "31ae450b",
									"id": 600,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAdmins",
									"nameLocation": "450:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "459:2:4"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 600,
												"src": "485:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 596,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "485:7:4",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 597,
													"nodeType": "ArrayTypeName",
													"src": "485:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "484:18:4"
									},
									"scope": 621,
									"src": "441:62:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 601,
										"nodeType": "StructuredDocumentation",
										"src": "509:76:4",
										"text": " @dev add an admin.  Can only be called by contract owner."
									},
									"functionSelector": "6d73e669",
									"id": 606,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAdmin",
									"nameLocation": "599:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "620:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "612:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 602,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "611:15:4"
									},
									"returnParameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:0:4"
									},
									"scope": 621,
									"src": "590:46:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "642:79:4",
										"text": " @dev remove an admin.  Can only be called by contract owner."
									},
									"functionSelector": "2d345670",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeAdmin",
									"nameLocation": "735:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "755:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "747:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "747:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "746:15:4"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "770:0:4"
									},
									"scope": 621,
									"src": "726:45:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "777:103:4",
										"text": " @dev checks whether or not given address is an admin\n Returns True if they are"
									},
									"functionSelector": "24d7806c",
									"id": 620,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAdmin",
									"nameLocation": "894:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "910:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "902:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "902:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "901:15:4"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 620,
												"src": "940:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 617,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "940:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:6:4"
									},
									"scope": 621,
									"src": "885:61:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 622,
							"src": "196:753:4",
							"usedErrors": []
						}
					],
					"src": "33:916:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							791
						],
						"Ownable": [
							726
						]
					},
					"id": 727,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 623,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 624,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 727,
							"sourceUnit": 792,
							"src": "112:30:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 626,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 791,
										"src": "668:7:5"
									},
									"id": 627,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:5"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 625,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:5",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 726,
							"linearizedBaseContracts": [
								726,
								791
							],
							"name": "Ownable",
							"nameLocation": "657:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 629,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 726,
									"src": "682:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 628,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 635,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 631,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:5",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "738:29:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "769:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 632,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:5"
									},
									"src": "711:84:5"
								},
								{
									"body": {
										"id": 644,
										"nodeType": "Block",
										"src": "911:49:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 640,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "940:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 639,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 725,
														"src": "921:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 643,
												"nodeType": "ExpressionStatement",
												"src": "921:32:5"
											}
										]
									},
									"documentation": {
										"id": 636,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:5",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 645,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:5"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:5"
									},
									"scope": 726,
									"src": "897:63:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 653,
										"nodeType": "Block",
										"src": "1091:30:5",
										"statements": [
											{
												"expression": {
													"id": 651,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 629,
													"src": "1108:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 650,
												"id": 652,
												"nodeType": "Return",
												"src": "1101:13:5"
											}
										]
									},
									"documentation": {
										"id": 646,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:5",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 654,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 647,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:5"
									},
									"returnParameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "1082:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 648,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:5"
									},
									"scope": 726,
									"src": "1036:85:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 667,
										"nodeType": "Block",
										"src": "1230:96:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 658,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 654,
																	"src": "1248:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 659,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 660,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 781,
																	"src": "1259:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 657,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:5"
											},
											{
												"id": 666,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:5"
											}
										]
									},
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:5",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 668,
									"name": "onlyOwner",
									"nameLocation": "1218:9:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:5"
									},
									"src": "1209:117:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 681,
										"nodeType": "Block",
										"src": "1722:47:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 677,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 675,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 674,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 725,
														"src": "1732:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 680,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:5"
											}
										]
									},
									"documentation": {
										"id": 669,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:5",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 682,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 672,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 671,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 668,
												"src": "1712:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:5"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:5"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:5"
									},
									"scope": 726,
									"src": "1668:101:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 704,
										"nodeType": "Block",
										"src": "1988:128:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 696,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 691,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 685,
																"src": "2006:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 694,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 693,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 692,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 695,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 690,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 699,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 701,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "2100:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 700,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 725,
														"src": "2081:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 703,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:5"
											}
										]
									},
									"documentation": {
										"id": 683,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 705,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 688,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 687,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 668,
												"src": "1978:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:5"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "1945:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:5"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:5"
									},
									"scope": 726,
									"src": "1918:198:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 724,
										"nodeType": "Block",
										"src": "2333:124:5",
										"statements": [
											{
												"assignments": [
													712
												],
												"declarations": [
													{
														"constant": false,
														"id": 712,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 724,
														"src": "2343:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 711,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 714,
												"initialValue": {
													"id": 713,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 629,
													"src": "2362:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:5"
											},
											{
												"expression": {
													"id": 717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 715,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 629,
														"src": "2378:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 716,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 708,
														"src": "2387:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 718,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 720,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "2431:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 721,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 708,
															"src": "2441:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 719,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 635,
														"src": "2410:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 723,
												"nodeType": "EmitStatement",
												"src": "2405:45:5"
											}
										]
									},
									"documentation": {
										"id": 706,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 725,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "2298:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 707,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:5"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:5"
									},
									"scope": 726,
									"src": "2270:187:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 727,
							"src": "639:1820:5",
							"usedErrors": []
						}
					],
					"src": "87:2373:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1118
						]
					},
					"id": 730,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 728,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "91:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 729,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 730,
							"sourceUnit": 1119,
							"src": "116:44:6",
							"symbolAliases": [],
							"unitAlias": ""
						}
					],
					"src": "91:70:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							769
						]
					},
					"id": 770,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 731,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 732,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:7",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 769,
							"linearizedBaseContracts": [
								769
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 735,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 769,
									"src": "1661:41:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 733,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 734,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 738,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:7",
									"nodeType": "VariableDeclaration",
									"scope": 769,
									"src": "1708:37:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 736,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 737,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 740,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 769,
									"src": "1752:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 739,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 747,
										"nodeType": "Block",
										"src": "1796:39:7",
										"statements": [
											{
												"expression": {
													"id": 745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 743,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "1806:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 744,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "1816:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 746,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:7"
											}
										]
									},
									"id": 748,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:7"
									},
									"returnParameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:7"
									},
									"scope": 769,
									"src": "1782:53:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 767,
										"nodeType": "Block",
										"src": "2236:421:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 752,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 740,
																"src": "2325:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 753,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 738,
																"src": "2336:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 755,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 751,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 756,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 757,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:7"
											},
											{
												"expression": {
													"id": 760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 758,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "2455:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 759,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 738,
														"src": "2465:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 761,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:7"
											},
											{
												"id": 762,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:7"
											},
											{
												"expression": {
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 763,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "2628:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 764,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "2638:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 766,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:7"
											}
										]
									},
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:7",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 768,
									"name": "nonReentrant",
									"nameLocation": "2221:12:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:7"
									},
									"src": "2212:445:7",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 770,
							"src": "873:1786:7",
							"usedErrors": []
						}
					],
					"src": "97:2563:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							791
						]
					},
					"id": 792,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 771,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 772,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 791,
							"linearizedBaseContracts": [
								791
							],
							"name": "Context",
							"nameLocation": "626:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 780,
										"nodeType": "Block",
										"src": "702:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 777,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 778,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 776,
												"id": 779,
												"nodeType": "Return",
												"src": "712:17:8"
											}
										]
									},
									"id": 781,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:8"
									},
									"returnParameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 781,
												"src": "693:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:8"
									},
									"scope": 791,
									"src": "640:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 789,
										"nodeType": "Block",
										"src": "809:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 786,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 785,
												"id": 788,
												"nodeType": "Return",
												"src": "819:15:8"
											}
										]
									},
									"id": 790,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:8"
									},
									"returnParameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "793:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 783,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:8"
									},
									"scope": 791,
									"src": "742:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 792,
							"src": "608:235:8",
							"usedErrors": []
						}
					],
					"src": "86:758:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							994
						]
					},
					"id": 995,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 793,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 794,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:9",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 994,
							"linearizedBaseContracts": [
								994
							],
							"name": "Strings",
							"nameLocation": "154:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 797,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 994,
									"src": "168:58:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 795,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 796,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:9",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 875,
										"nodeType": "Block",
										"src": "399:632:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 805,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "601:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 811,
												"nodeType": "IfStatement",
												"src": "597:51:9",
												"trueBody": {
													"id": 810,
													"nodeType": "Block",
													"src": "613:35:9",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 808,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 804,
															"id": 809,
															"nodeType": "Return",
															"src": "627:10:9"
														}
													]
												}
											},
											{
												"assignments": [
													813
												],
												"declarations": [
													{
														"constant": false,
														"id": 813,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 875,
														"src": "657:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 812,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 815,
												"initialValue": {
													"id": 814,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 800,
													"src": "672:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:9"
											},
											{
												"assignments": [
													817
												],
												"declarations": [
													{
														"constant": false,
														"id": 817,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 875,
														"src": "687:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 816,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 818,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:9"
											},
											{
												"body": {
													"id": 829,
													"nodeType": "Block",
													"src": "729:57:9",
													"statements": [
														{
															"expression": {
																"id": 823,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:9",
																"subExpression": {
																	"id": 822,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 817,
																	"src": "743:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 824,
															"nodeType": "ExpressionStatement",
															"src": "743:8:9"
														},
														{
															"expression": {
																"id": 827,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 825,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 813,
																	"src": "765:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 826,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 828,
															"nodeType": "ExpressionStatement",
															"src": "765:10:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 819,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "718:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 820,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 830,
												"nodeType": "WhileStatement",
												"src": "711:75:9"
											},
											{
												"assignments": [
													832
												],
												"declarations": [
													{
														"constant": false,
														"id": 832,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 875,
														"src": "795:19:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 831,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 837,
												"initialValue": {
													"arguments": [
														{
															"id": 835,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "827:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 833,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:9"
											},
											{
												"body": {
													"id": 868,
													"nodeType": "Block",
													"src": "863:131:9",
													"statements": [
														{
															"expression": {
																"id": 843,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 841,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 817,
																	"src": "877:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 844,
															"nodeType": "ExpressionStatement",
															"src": "877:11:9"
														},
														{
															"expression": {
																"id": 862,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 845,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 832,
																		"src": "902:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 847,
																	"indexExpression": {
																		"id": 846,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 817,
																		"src": "909:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 859,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 852,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 857,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 855,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 800,
																									"src": "945:5:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 856,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 854,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 853,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:9",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 858,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 851,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 850,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:9",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 860,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 849,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 848,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 863,
															"nodeType": "ExpressionStatement",
															"src": "902:56:9"
														},
														{
															"expression": {
																"id": 866,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 864,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "972:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 867,
															"nodeType": "ExpressionStatement",
															"src": "972:11:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 838,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "851:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 839,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 869,
												"nodeType": "WhileStatement",
												"src": "844:150:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 872,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "1017:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 871,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 870,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:9",
															"typeDescriptions": {}
														}
													},
													"id": 873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 804,
												"id": 874,
												"nodeType": "Return",
												"src": "1003:21:9"
											}
										]
									},
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:9",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 876,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "346:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 799,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:9"
									},
									"returnParameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "384:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 802,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:9"
									},
									"scope": 994,
									"src": "328:703:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 916,
										"nodeType": "Block",
										"src": "1210:255:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 884,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 879,
														"src": "1224:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 885,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 890,
												"nodeType": "IfStatement",
												"src": "1220:54:9",
												"trueBody": {
													"id": 889,
													"nodeType": "Block",
													"src": "1236:38:9",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 887,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 883,
															"id": 888,
															"nodeType": "Return",
															"src": "1250:13:9"
														}
													]
												}
											},
											{
												"assignments": [
													892
												],
												"declarations": [
													{
														"constant": false,
														"id": 892,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 916,
														"src": "1283:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 891,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 894,
												"initialValue": {
													"id": 893,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 879,
													"src": "1298:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:9"
											},
											{
												"assignments": [
													896
												],
												"declarations": [
													{
														"constant": false,
														"id": 896,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 916,
														"src": "1313:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 895,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 898,
												"initialValue": {
													"hexValue": "30",
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:9"
											},
											{
												"body": {
													"id": 909,
													"nodeType": "Block",
													"src": "1359:57:9",
													"statements": [
														{
															"expression": {
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:9",
																"subExpression": {
																	"id": 902,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 896,
																	"src": "1373:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 904,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:9"
														},
														{
															"expression": {
																"id": 907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 905,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 892,
																	"src": "1395:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 908,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 899,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 892,
														"src": "1348:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 900,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 910,
												"nodeType": "WhileStatement",
												"src": "1341:75:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 912,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "1444:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 913,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 896,
															"src": "1451:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 911,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															993
														],
														"referencedDeclaration": 993,
														"src": "1432:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 883,
												"id": 915,
												"nodeType": "Return",
												"src": "1425:33:9"
											}
										]
									},
									"documentation": {
										"id": 877,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:9",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1157:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 878,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:9"
									},
									"returnParameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1195:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 881,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:9"
									},
									"scope": 994,
									"src": "1136:329:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "1678:351:9",
										"statements": [
											{
												"assignments": [
													928
												],
												"declarations": [
													{
														"constant": false,
														"id": 928,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 992,
														"src": "1688:19:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 927,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 937,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 935,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 931,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 932,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 922,
																	"src": "1724:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 934,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 929,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:9"
											},
											{
												"expression": {
													"id": 942,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 938,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 928,
															"src": "1745:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 940,
														"indexExpression": {
															"hexValue": "30",
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 941,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 943,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:9"
											},
											{
												"expression": {
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 944,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 928,
															"src": "1770:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 946,
														"indexExpression": {
															"hexValue": "31",
															"id": 945,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 949,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:9"
											},
											{
												"body": {
													"id": 978,
													"nodeType": "Block",
													"src": "1840:87:9",
													"statements": [
														{
															"expression": {
																"id": 972,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 964,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 928,
																		"src": "1854:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 966,
																	"indexExpression": {
																		"id": 965,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 951,
																		"src": "1861:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 967,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 797,
																		"src": "1866:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 971,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 970,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 968,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 920,
																			"src": "1879:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 969,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 973,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:9"
														},
														{
															"expression": {
																"id": 976,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 974,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 920,
																	"src": "1905:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 975,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 977,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 958,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 951,
														"src": "1828:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 959,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 979,
												"initializationExpression": {
													"assignments": [
														951
													],
													"declarations": [
														{
															"constant": false,
															"id": 951,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 979,
															"src": "1800:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 950,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 957,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 956,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 954,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 952,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 953,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 922,
																"src": "1816:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:9"
												},
												"loopExpression": {
													"expression": {
														"id": 962,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:9",
														"subExpression": {
															"id": 961,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 951,
															"src": "1837:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 963,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:9"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 983,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 981,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 920,
																"src": "1944:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 984,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 980,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 985,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 986,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 989,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 928,
															"src": "2015:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 987,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:9",
															"typeDescriptions": {}
														}
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 926,
												"id": 991,
												"nodeType": "Return",
												"src": "2001:21:9"
											}
										]
									},
									"documentation": {
										"id": 918,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:9",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "1609:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "1624:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:9"
									},
									"returnParameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "1663:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 924,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:9"
									},
									"scope": 994,
									"src": "1588:441:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 995,
							"src": "146:1885:9",
							"usedErrors": []
						}
					],
					"src": "86:1946:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"MerkleProof": [
							1082
						]
					},
					"id": 1083,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 996,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 997,
								"nodeType": "StructuredDocumentation",
								"src": "128:364:10",
								"text": " @dev These functions deal with verification of Merkle Trees proofs.\n The proofs can be generated using the JavaScript library\n https://github.com/miguelmota/merkletreejs[merkletreejs].\n Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n See `test/utils/cryptography/MerkleProof.test.js` for some examples."
							},
							"fullyImplemented": true,
							"id": 1082,
							"linearizedBaseContracts": [
								1082
							],
							"name": "MerkleProof",
							"nameLocation": "501:11:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1017,
										"nodeType": "Block",
										"src": "974:57:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1011,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1001,
																"src": "1004:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1012,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1005,
																"src": "1011:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1010,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1081,
															"src": "991:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 1013,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "991:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1014,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1003,
														"src": "1020:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "991:33:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1009,
												"id": 1016,
												"nodeType": "Return",
												"src": "984:40:10"
											}
										]
									},
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "519:323:10",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
									},
									"id": 1018,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "856:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "889:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "872:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 999,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "872:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1000,
													"nodeType": "ArrayTypeName",
													"src": "872:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "912:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "904:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1002,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "904:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "934:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "926:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1004,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "862:82:10"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "968:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1007,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "968:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "967:6:10"
									},
									"scope": 1082,
									"src": "847:184:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1080,
										"nodeType": "Block",
										"src": "1475:596:10",
										"statements": [
											{
												"assignments": [
													1030
												],
												"declarations": [
													{
														"constant": false,
														"id": 1030,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "1493:12:10",
														"nodeType": "VariableDeclaration",
														"scope": 1080,
														"src": "1485:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1029,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1485:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1032,
												"initialValue": {
													"id": 1031,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1024,
													"src": "1508:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1485:27:10"
											},
											{
												"body": {
													"id": 1076,
													"nodeType": "Block",
													"src": "1565:471:10",
													"statements": [
														{
															"assignments": [
																1045
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1045,
																	"mutability": "mutable",
																	"name": "proofElement",
																	"nameLocation": "1587:12:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1076,
																	"src": "1579:20:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1044,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1579:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1049,
															"initialValue": {
																"baseExpression": {
																	"id": 1046,
																	"name": "proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1022,
																	"src": "1602:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																"id": 1048,
																"indexExpression": {
																	"id": 1047,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1034,
																	"src": "1608:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1602:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1579:31:10"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 1052,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1050,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1030,
																	"src": "1628:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1051,
																	"name": "proofElement",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1045,
																	"src": "1644:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "1628:28:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1074,
																"nodeType": "Block",
																"src": "1845:181:10",
																"statements": [
																	{
																		"expression": {
																			"id": 1072,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1064,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1030,
																				"src": "1941:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 1068,
																								"name": "proofElement",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1045,
																								"src": "1983:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							{
																								"id": 1069,
																								"name": "computedHash",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1030,
																								"src": "1997:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							],
																							"expression": {
																								"id": 1066,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "1966:3:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 1067,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "encodePacked",
																							"nodeType": "MemberAccess",
																							"src": "1966:16:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																								"typeString": "function () pure returns (bytes memory)"
																							}
																						},
																						"id": 1070,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1966:44:10",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1065,
																					"name": "keccak256",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967288,
																					"src": "1956:9:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																						"typeString": "function (bytes memory) pure returns (bytes32)"
																					}
																				},
																				"id": 1071,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1956:55:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "1941:70:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 1073,
																		"nodeType": "ExpressionStatement",
																		"src": "1941:70:10"
																	}
																]
															},
															"id": 1075,
															"nodeType": "IfStatement",
															"src": "1624:402:10",
															"trueBody": {
																"id": 1063,
																"nodeType": "Block",
																"src": "1658:181:10",
																"statements": [
																	{
																		"expression": {
																			"id": 1061,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1053,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1030,
																				"src": "1754:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 1057,
																								"name": "computedHash",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1030,
																								"src": "1796:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							{
																								"id": 1058,
																								"name": "proofElement",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1045,
																								"src": "1810:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							],
																							"expression": {
																								"id": 1055,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "1779:3:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 1056,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "encodePacked",
																							"nodeType": "MemberAccess",
																							"src": "1779:16:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																								"typeString": "function () pure returns (bytes memory)"
																							}
																						},
																						"id": 1059,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1779:44:10",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1054,
																					"name": "keccak256",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967288,
																					"src": "1769:9:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																						"typeString": "function (bytes memory) pure returns (bytes32)"
																					}
																				},
																				"id": 1060,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1769:55:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "1754:70:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 1062,
																		"nodeType": "ExpressionStatement",
																		"src": "1754:70:10"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1037,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1034,
														"src": "1542:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1038,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1022,
															"src": "1546:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1546:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1542:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1077,
												"initializationExpression": {
													"assignments": [
														1034
													],
													"declarations": [
														{
															"constant": false,
															"id": 1034,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1535:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1077,
															"src": "1527:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1033,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1527:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1036,
													"initialValue": {
														"hexValue": "30",
														"id": 1035,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1539:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1527:13:10"
												},
												"loopExpression": {
													"expression": {
														"id": 1042,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1560:3:10",
														"subExpression": {
															"id": 1041,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "1560:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1043,
													"nodeType": "ExpressionStatement",
													"src": "1560:3:10"
												},
												"nodeType": "ForStatement",
												"src": "1522:514:10"
											},
											{
												"expression": {
													"id": 1078,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1030,
													"src": "2052:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1028,
												"id": 1079,
												"nodeType": "Return",
												"src": "2045:19:10"
											}
										]
									},
									"documentation": {
										"id": 1019,
										"nodeType": "StructuredDocumentation",
										"src": "1037:341:10",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"
									},
									"id": 1081,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "1392:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1422:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "1405:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1020,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1405:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1021,
													"nodeType": "ArrayTypeName",
													"src": "1405:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1437:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "1429:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1023,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1429:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1404:38:10"
									},
									"returnParameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "1466:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1026,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1466:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1465:9:10"
									},
									"scope": 1082,
									"src": "1383:688:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1083,
							"src": "493:1580:10",
							"usedErrors": []
						}
					],
					"src": "103:1971:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							1106
						],
						"IERC165": [
							1118
						]
					},
					"id": 1107,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1084,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 1085,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1107,
							"sourceUnit": 1119,
							"src": "124:23:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1087,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1118,
										"src": "754:7:11"
									},
									"id": 1088,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:11"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1086,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:11",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 1106,
							"linearizedBaseContracts": [
								1106,
								1118
							],
							"name": "ERC165",
							"nameLocation": "744:6:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1117
									],
									"body": {
										"id": 1104,
										"nodeType": "Block",
										"src": "920:64:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1097,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1091,
														"src": "937:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1099,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1118,
																	"src": "957:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1118_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1118_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 1098,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1118",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1096,
												"id": 1103,
												"nodeType": "Return",
												"src": "930:47:11"
											}
										]
									},
									"documentation": {
										"id": 1089,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:11",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1093,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:11"
									},
									"parameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "856:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1090,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:11"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1105,
												"src": "914:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1094,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:11"
									},
									"scope": 1106,
									"src": "829:155:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1107,
							"src": "726:260:11",
							"usedErrors": []
						}
					],
					"src": "99:888:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1118
						]
					},
					"id": 1119,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1108,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1109,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:12",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1118,
							"linearizedBaseContracts": [
								1118
							],
							"name": "IERC165",
							"nameLocation": "415:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1110,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:12",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1117,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "801:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1111,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:12"
									},
									"returnParameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "844:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1114,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:12"
									},
									"scope": 1118,
									"src": "774:76:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1119,
							"src": "405:447:12",
							"usedErrors": []
						}
					],
					"src": "100:753:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol",
					"exportedSymbols": {
						"EnumerableSet": [
							1717
						]
					},
					"id": 1718,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1120,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "EnumerableSet",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1121,
								"nodeType": "StructuredDocumentation",
								"src": "125:686:13",
								"text": " @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported."
							},
							"fullyImplemented": true,
							"id": 1717,
							"linearizedBaseContracts": [
								1717
							],
							"name": "EnumerableSet",
							"nameLocation": "820:13:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EnumerableSet.Set",
									"id": 1129,
									"members": [
										{
											"constant": false,
											"id": 1124,
											"mutability": "mutable",
											"name": "_values",
											"nameLocation": "1344:7:13",
											"nodeType": "VariableDeclaration",
											"scope": 1129,
											"src": "1334:17:13",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
												"typeString": "bytes32[]"
											},
											"typeName": {
												"baseType": {
													"id": 1122,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1123,
												"nodeType": "ArrayTypeName",
												"src": "1334:9:13",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1128,
											"mutability": "mutable",
											"name": "_indexes",
											"nameLocation": "1512:8:13",
											"nodeType": "VariableDeclaration",
											"scope": 1129,
											"src": "1484:36:13",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
												"typeString": "mapping(bytes32 => uint256)"
											},
											"typeName": {
												"id": 1127,
												"keyType": {
													"id": 1125,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1492:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "Mapping",
												"src": "1484:27:13",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
													"typeString": "mapping(bytes32 => uint256)"
												},
												"valueType": {
													"id": 1126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1503:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Set",
									"nameLocation": "1287:3:13",
									"nodeType": "StructDefinition",
									"scope": 1717,
									"src": "1280:247:13",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1170,
										"nodeType": "Block",
										"src": "1766:335:13",
										"statements": [
											{
												"condition": {
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1780:22:13",
													"subExpression": {
														"arguments": [
															{
																"id": 1141,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1133,
																"src": "1791:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															{
																"id": 1142,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1135,
																"src": "1796:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1140,
															"name": "_contains",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1274,
															"src": "1781:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
																"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
															}
														},
														"id": 1143,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1781:21:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1168,
													"nodeType": "Block",
													"src": "2058:37:13",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1166,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2079:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1139,
															"id": 1167,
															"nodeType": "Return",
															"src": "2072:12:13"
														}
													]
												},
												"id": 1169,
												"nodeType": "IfStatement",
												"src": "1776:319:13",
												"trueBody": {
													"id": 1165,
													"nodeType": "Block",
													"src": "1804:248:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1150,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1135,
																		"src": "1835:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 1145,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1133,
																			"src": "1818:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1148,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1124,
																		"src": "1818:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1149,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "1818:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer,bytes32)"
																	}
																},
																"id": 1151,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1818:23:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1152,
															"nodeType": "ExpressionStatement",
															"src": "1818:23:13"
														},
														{
															"expression": {
																"id": 1161,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 1153,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1133,
																			"src": "1976:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1156,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1128,
																		"src": "1976:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1157,
																	"indexExpression": {
																		"id": 1155,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1135,
																		"src": "1989:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1976:19:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1158,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1133,
																			"src": "1998:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1159,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1124,
																		"src": "1998:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "1998:18:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1976:40:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1162,
															"nodeType": "ExpressionStatement",
															"src": "1976:40:13"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1163,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2037:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1139,
															"id": 1164,
															"nodeType": "Return",
															"src": "2030:11:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1130,
										"nodeType": "StructuredDocumentation",
										"src": "1533:159:13",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_add",
									"nameLocation": "1706:4:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "1723:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1711:15:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1132,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1131,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1129,
														"src": "1711:3:13"
													},
													"referencedDeclaration": 1129,
													"src": "1711:3:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1736:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1728:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1134,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1728:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1710:32:13"
									},
									"returnParameters": {
										"id": 1139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1760:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1137,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1760:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1759:6:13"
									},
									"scope": 1717,
									"src": "1697:404:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1254,
										"nodeType": "Block",
										"src": "2341:1316:13",
										"statements": [
											{
												"assignments": [
													1183
												],
												"declarations": [
													{
														"constant": false,
														"id": 1183,
														"mutability": "mutable",
														"name": "valueIndex",
														"nameLocation": "2459:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 1254,
														"src": "2451:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1182,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2451:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1188,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"id": 1184,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "2472:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_indexes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1128,
														"src": "2472:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
															"typeString": "mapping(bytes32 => uint256)"
														}
													},
													"id": 1187,
													"indexExpression": {
														"id": 1186,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1177,
														"src": "2485:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2472:19:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2451:40:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1189,
														"name": "valueIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1183,
														"src": "2506:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1190,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2520:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2506:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1252,
													"nodeType": "Block",
													"src": "3614:37:13",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1250,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3635:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1181,
															"id": 1251,
															"nodeType": "Return",
															"src": "3628:12:13"
														}
													]
												},
												"id": 1253,
												"nodeType": "IfStatement",
												"src": "2502:1149:13",
												"trueBody": {
													"id": 1249,
													"nodeType": "Block",
													"src": "2523:1085:13",
													"statements": [
														{
															"assignments": [
																1193
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1193,
																	"mutability": "mutable",
																	"name": "toDeleteIndex",
																	"nameLocation": "2883:13:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1249,
																	"src": "2875:21:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1192,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2875:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1197,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1194,
																	"name": "valueIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1183,
																	"src": "2899:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2912:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "2899:14:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2875:38:13"
														},
														{
															"assignments": [
																1199
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1199,
																	"mutability": "mutable",
																	"name": "lastIndex",
																	"nameLocation": "2935:9:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1249,
																	"src": "2927:17:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1198,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2927:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1205,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1204,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"expression": {
																			"id": 1200,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1175,
																			"src": "2947:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1201,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1124,
																		"src": "2947:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1202,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "2947:18:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2968:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "2947:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2927:42:13"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1208,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1206,
																	"name": "lastIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1199,
																	"src": "2988:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 1207,
																	"name": "toDeleteIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "3001:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2988:26:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1233,
															"nodeType": "IfStatement",
															"src": "2984:398:13",
															"trueBody": {
																"id": 1232,
																"nodeType": "Block",
																"src": "3016:366:13",
																"statements": [
																	{
																		"assignments": [
																			1210
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1210,
																				"mutability": "mutable",
																				"name": "lastvalue",
																				"nameLocation": "3042:9:13",
																				"nodeType": "VariableDeclaration",
																				"scope": 1232,
																				"src": "3034:17:13",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 1209,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3034:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1215,
																		"initialValue": {
																			"baseExpression": {
																				"expression": {
																					"id": 1211,
																					"name": "set",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1175,
																					"src": "3054:3:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																						"typeString": "struct EnumerableSet.Set storage pointer"
																					}
																				},
																				"id": 1212,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "_values",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1124,
																				"src": "3054:11:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																					"typeString": "bytes32[] storage ref"
																				}
																			},
																			"id": 1214,
																			"indexExpression": {
																				"id": 1213,
																				"name": "lastIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1199,
																				"src": "3066:9:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3054:22:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3034:42:13"
																	},
																	{
																		"expression": {
																			"id": 1222,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1216,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1175,
																						"src": "3176:3:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1219,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_values",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1124,
																					"src": "3176:11:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																						"typeString": "bytes32[] storage ref"
																					}
																				},
																				"id": 1220,
																				"indexExpression": {
																					"id": 1218,
																					"name": "toDeleteIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1193,
																					"src": "3188:13:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3176:26:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1221,
																				"name": "lastvalue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1210,
																				"src": "3205:9:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3176:38:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 1223,
																		"nodeType": "ExpressionStatement",
																		"src": "3176:38:13"
																	},
																	{
																		"expression": {
																			"id": 1230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"expression": {
																						"id": 1224,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1175,
																						"src": "3288:3:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																							"typeString": "struct EnumerableSet.Set storage pointer"
																						}
																					},
																					"id": 1227,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_indexes",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1128,
																					"src": "3288:12:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																						"typeString": "mapping(bytes32 => uint256)"
																					}
																				},
																				"id": 1228,
																				"indexExpression": {
																					"id": 1226,
																					"name": "lastvalue",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1210,
																					"src": "3301:9:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "3288:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 1229,
																				"name": "valueIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1183,
																				"src": "3314:10:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3288:36:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1231,
																		"nodeType": "ExpressionStatement",
																		"src": "3288:36:13"
																	}
																]
															}
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 1234,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1175,
																			"src": "3460:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1237,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1124,
																		"src": "3460:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																			"typeString": "bytes32[] storage ref"
																		}
																	},
																	"id": 1238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "3460:15:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
																		"typeString": "function (bytes32[] storage pointer)"
																	}
																},
																"id": 1239,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3460:17:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1240,
															"nodeType": "ExpressionStatement",
															"src": "3460:17:13"
														},
														{
															"expression": {
																"id": 1245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "3545:26:13",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"id": 1241,
																			"name": "set",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1175,
																			"src": "3552:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																				"typeString": "struct EnumerableSet.Set storage pointer"
																			}
																		},
																		"id": 1242,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "_indexes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1128,
																		"src": "3552:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1244,
																	"indexExpression": {
																		"id": 1243,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1177,
																		"src": "3565:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3552:19:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1246,
															"nodeType": "ExpressionStatement",
															"src": "3545:26:13"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1247,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3593:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1181,
															"id": 1248,
															"nodeType": "Return",
															"src": "3586:11:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1172,
										"nodeType": "StructuredDocumentation",
										"src": "2107:157:13",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_remove",
									"nameLocation": "2278:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "2298:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "2286:15:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1174,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1173,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1129,
														"src": "2286:3:13"
													},
													"referencedDeclaration": 1129,
													"src": "2286:3:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2311:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "2303:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1176,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2303:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2285:32:13"
									},
									"returnParameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "2335:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1179,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2335:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2334:6:13"
									},
									"scope": 1717,
									"src": "2269:1388:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1273,
										"nodeType": "Block",
										"src": "3817:48:13",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"id": 1266,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1259,
																"src": "3834:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																	"typeString": "struct EnumerableSet.Set storage pointer"
																}
															},
															"id": 1267,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_indexes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1128,
															"src": "3834:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1269,
														"indexExpression": {
															"id": 1268,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1261,
															"src": "3847:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3834:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1270,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3857:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3834:24:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1265,
												"id": 1272,
												"nodeType": "Return",
												"src": "3827:31:13"
											}
										]
									},
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "3663:70:13",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contains",
									"nameLocation": "3747:9:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "3769:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "3757:15:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1258,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1257,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1129,
														"src": "3757:3:13"
													},
													"referencedDeclaration": 1129,
													"src": "3757:3:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3782:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "3774:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1260,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3756:32:13"
									},
									"returnParameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "3811:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1263,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3811:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3810:6:13"
									},
									"scope": 1717,
									"src": "3738:127:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1287,
										"nodeType": "Block",
										"src": "4011:42:13",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 1283,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1278,
															"src": "4028:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1284,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1124,
														"src": "4028:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4028:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1282,
												"id": 1286,
												"nodeType": "Return",
												"src": "4021:25:13"
											}
										]
									},
									"documentation": {
										"id": 1275,
										"nodeType": "StructuredDocumentation",
										"src": "3871:70:13",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1288,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_length",
									"nameLocation": "3955:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1278,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "3975:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "3963:15:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1277,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1276,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1129,
														"src": "3963:3:13"
													},
													"referencedDeclaration": 1129,
													"src": "3963:3:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3962:17:13"
									},
									"returnParameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "4002:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4002:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4001:9:13"
									},
									"scope": 1717,
									"src": "3946:107:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1304,
										"nodeType": "Block",
										"src": "4471:42:13",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 1299,
															"name": "set",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1292,
															"src": "4488:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
																"typeString": "struct EnumerableSet.Set storage pointer"
															}
														},
														"id": 1300,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "_values",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1124,
														"src": "4488:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"id": 1302,
													"indexExpression": {
														"id": 1301,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1294,
														"src": "4500:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4488:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1298,
												"id": 1303,
												"nodeType": "Return",
												"src": "4481:25:13"
											}
										]
									},
									"documentation": {
										"id": 1289,
										"nodeType": "StructuredDocumentation",
										"src": "4059:331:13",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_at",
									"nameLocation": "4404:3:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "4420:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "4408:15:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1291,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1290,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1129,
														"src": "4408:3:13"
													},
													"referencedDeclaration": 1129,
													"src": "4408:3:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1294,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "4433:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "4425:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4425:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4407:32:13"
									},
									"returnParameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "4462:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1296,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4462:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4461:9:13"
									},
									"scope": 1717,
									"src": "4395:118:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1318,
										"nodeType": "Block",
										"src": "5127:35:13",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1315,
														"name": "set",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1309,
														"src": "5144:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
															"typeString": "struct EnumerableSet.Set storage pointer"
														}
													},
													"id": 1316,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_values",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1124,
													"src": "5144:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
														"typeString": "bytes32[] storage ref"
													}
												},
												"functionReturnParameters": 1314,
												"id": 1317,
												"nodeType": "Return",
												"src": "5137:18:13"
											}
										]
									},
									"documentation": {
										"id": 1306,
										"nodeType": "StructuredDocumentation",
										"src": "4519:529:13",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_values",
									"nameLocation": "5062:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5082:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1319,
												"src": "5070:15:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												},
												"typeName": {
													"id": 1308,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1307,
														"name": "Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1129,
														"src": "5070:3:13"
													},
													"referencedDeclaration": 1129,
													"src": "5070:3:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
														"typeString": "struct EnumerableSet.Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5069:17:13"
									},
									"returnParameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1319,
												"src": "5109:16:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1311,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5109:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1312,
													"nodeType": "ArrayTypeName",
													"src": "5109:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5108:18:13"
									},
									"scope": 1717,
									"src": "5053:109:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "EnumerableSet.Bytes32Set",
									"id": 1323,
									"members": [
										{
											"constant": false,
											"id": 1322,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "5219:6:13",
											"nodeType": "VariableDeclaration",
											"scope": 1323,
											"src": "5215:10:13",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1321,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1320,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1129,
													"src": "5215:3:13"
												},
												"referencedDeclaration": 1129,
												"src": "5215:3:13",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Set",
									"nameLocation": "5194:10:13",
									"nodeType": "StructDefinition",
									"scope": 1717,
									"src": "5187:45:13",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1340,
										"nodeType": "Block",
										"src": "5478:47:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1335,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1327,
																"src": "5500:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1336,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1322,
															"src": "5500:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1337,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1329,
															"src": "5512:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1334,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1171,
														"src": "5495:4:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5495:23:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1333,
												"id": 1339,
												"nodeType": "Return",
												"src": "5488:30:13"
											}
										]
									},
									"documentation": {
										"id": 1324,
										"nodeType": "StructuredDocumentation",
										"src": "5238:159:13",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "5411:3:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5434:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "5415:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1326,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1325,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1323,
														"src": "5415:10:13"
													},
													"referencedDeclaration": 1323,
													"src": "5415:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5447:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "5439:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1328,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5439:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5414:39:13"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "5472:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1331,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5472:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5471:6:13"
									},
									"scope": 1717,
									"src": "5402:123:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1358,
										"nodeType": "Block",
										"src": "5772:50:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1353,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1345,
																"src": "5797:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1354,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1322,
															"src": "5797:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1355,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1347,
															"src": "5809:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1352,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1255,
														"src": "5789:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5789:26:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1351,
												"id": 1357,
												"nodeType": "Return",
												"src": "5782:33:13"
											}
										]
									},
									"documentation": {
										"id": 1342,
										"nodeType": "StructuredDocumentation",
										"src": "5531:157:13",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "5702:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5728:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "5709:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1344,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1343,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1323,
														"src": "5709:10:13"
													},
													"referencedDeclaration": 1323,
													"src": "5709:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5741:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "5733:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1346,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5733:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5708:39:13"
									},
									"returnParameters": {
										"id": 1351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1350,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "5766:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1349,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5766:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5765:6:13"
									},
									"scope": 1717,
									"src": "5693:129:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1376,
										"nodeType": "Block",
										"src": "5989:52:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1371,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1363,
																"src": "6016:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1372,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1322,
															"src": "6016:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1373,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1365,
															"src": "6028:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1370,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1274,
														"src": "6006:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6006:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1369,
												"id": 1375,
												"nodeType": "Return",
												"src": "5999:35:13"
											}
										]
									},
									"documentation": {
										"id": 1360,
										"nodeType": "StructuredDocumentation",
										"src": "5828:70:13",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "5912:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1363,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "5940:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "5921:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1362,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1361,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1323,
														"src": "5921:10:13"
													},
													"referencedDeclaration": 1323,
													"src": "5921:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5953:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "5945:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1364,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5945:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5920:39:13"
									},
									"returnParameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "5983:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1367,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5983:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5982:6:13"
									},
									"scope": 1717,
									"src": "5903:138:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1391,
										"nodeType": "Block",
										"src": "6194:43:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1387,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1381,
																"src": "6219:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1388,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1322,
															"src": "6219:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1386,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "6211:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6211:19:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1385,
												"id": 1390,
												"nodeType": "Return",
												"src": "6204:26:13"
											}
										]
									},
									"documentation": {
										"id": 1378,
										"nodeType": "StructuredDocumentation",
										"src": "6047:70:13",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1392,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "6131:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6157:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1392,
												"src": "6138:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1380,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1379,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1323,
														"src": "6138:10:13"
													},
													"referencedDeclaration": 1323,
													"src": "6138:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6137:24:13"
									},
									"returnParameters": {
										"id": 1385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1384,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1392,
												"src": "6185:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1383,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6185:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6184:9:13"
									},
									"scope": 1717,
									"src": "6122:115:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1409,
										"nodeType": "Block",
										"src": "6662:46:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1404,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1396,
																"src": "6683:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1405,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1322,
															"src": "6683:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"id": 1406,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1398,
															"src": "6695:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1403,
														"name": "_at",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1305,
														"src": "6679:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
														}
													},
													"id": 1407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6679:22:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1402,
												"id": 1408,
												"nodeType": "Return",
												"src": "6672:29:13"
											}
										]
									},
									"documentation": {
										"id": 1393,
										"nodeType": "StructuredDocumentation",
										"src": "6243:331:13",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "6588:2:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1396,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "6610:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "6591:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1395,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1394,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1323,
														"src": "6591:10:13"
													},
													"referencedDeclaration": 1323,
													"src": "6591:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "6623:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "6615:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6615:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6590:39:13"
									},
									"returnParameters": {
										"id": 1402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "6653:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6653:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:9:13"
									},
									"scope": 1717,
									"src": "6579:129:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1425,
										"nodeType": "Block",
										"src": "7329:43:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1421,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1414,
																"src": "7354:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
																	"typeString": "struct EnumerableSet.Bytes32Set storage pointer"
																}
															},
															"id": 1422,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1322,
															"src": "7354:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1420,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1319,
														"src": "7346:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:19:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"functionReturnParameters": 1419,
												"id": 1424,
												"nodeType": "Return",
												"src": "7339:26:13"
											}
										]
									},
									"documentation": {
										"id": 1411,
										"nodeType": "StructuredDocumentation",
										"src": "6714:529:13",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "7257:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7283:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1426,
												"src": "7264:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
													"typeString": "struct EnumerableSet.Bytes32Set"
												},
												"typeName": {
													"id": 1413,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1412,
														"name": "Bytes32Set",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1323,
														"src": "7264:10:13"
													},
													"referencedDeclaration": 1323,
													"src": "7264:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Set_$1323_storage_ptr",
														"typeString": "struct EnumerableSet.Bytes32Set"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7263:24:13"
									},
									"returnParameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1426,
												"src": "7311:16:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1416,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7311:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1417,
													"nodeType": "ArrayTypeName",
													"src": "7311:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7310:18:13"
									},
									"scope": 1717,
									"src": "7248:124:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.AddressSet",
									"id": 1430,
									"members": [
										{
											"constant": false,
											"id": 1429,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "7429:6:13",
											"nodeType": "VariableDeclaration",
											"scope": 1430,
											"src": "7425:10:13",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1428,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1427,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1129,
													"src": "7425:3:13"
												},
												"referencedDeclaration": 1129,
												"src": "7425:3:13",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSet",
									"nameLocation": "7404:10:13",
									"nodeType": "StructDefinition",
									"scope": 1717,
									"src": "7397:45:13",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1456,
										"nodeType": "Block",
										"src": "7688:74:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1442,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1434,
																"src": "7710:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1443,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1429,
															"src": "7710:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1450,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1436,
																					"src": "7746:5:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1449,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7738:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1448,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "7738:7:13",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1451,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7738:14:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1447,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7730:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1446,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "7730:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7730:23:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1445,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7722:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1444,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "7722:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7722:32:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1441,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1171,
														"src": "7705:4:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7705:50:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1440,
												"id": 1455,
												"nodeType": "Return",
												"src": "7698:57:13"
											}
										]
									},
									"documentation": {
										"id": 1431,
										"nodeType": "StructuredDocumentation",
										"src": "7448:159:13",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1457,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "7621:3:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7644:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "7625:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1433,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1432,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1430,
														"src": "7625:10:13"
													},
													"referencedDeclaration": 1430,
													"src": "7625:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7657:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "7649:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7649:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7624:39:13"
									},
									"returnParameters": {
										"id": 1440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1439,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1457,
												"src": "7682:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1438,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7682:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7681:6:13"
									},
									"scope": 1717,
									"src": "7612:150:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1483,
										"nodeType": "Block",
										"src": "8009:77:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1469,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1461,
																"src": "8034:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1470,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1429,
															"src": "8034:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1477,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1463,
																					"src": "8070:5:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1476,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8062:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1475,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8062:7:13",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1478,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8062:14:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8054:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1473,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8054:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8054:23:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1472,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8046:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1471,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8046:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8046:32:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1468,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1255,
														"src": "8026:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8026:53:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1467,
												"id": 1482,
												"nodeType": "Return",
												"src": "8019:60:13"
											}
										]
									},
									"documentation": {
										"id": 1458,
										"nodeType": "StructuredDocumentation",
										"src": "7768:157:13",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "7939:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "7965:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1484,
												"src": "7946:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1460,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1459,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1430,
														"src": "7946:10:13"
													},
													"referencedDeclaration": 1430,
													"src": "7946:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7978:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1484,
												"src": "7970:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1462,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7970:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7945:39:13"
									},
									"returnParameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1484,
												"src": "8003:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1465,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8003:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8002:6:13"
									},
									"scope": 1717,
									"src": "7930:156:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1510,
										"nodeType": "Block",
										"src": "8253:79:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1496,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1488,
																"src": "8280:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1497,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1429,
															"src": "8280:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1504,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1490,
																					"src": "8316:5:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1503,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8308:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 1502,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "8308:7:13",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1505,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8308:14:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 1501,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8300:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1500,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8300:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8300:23:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1499,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8292:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1498,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "8292:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8292:32:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1495,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1274,
														"src": "8270:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8270:55:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1494,
												"id": 1509,
												"nodeType": "Return",
												"src": "8263:62:13"
											}
										]
									},
									"documentation": {
										"id": 1485,
										"nodeType": "StructuredDocumentation",
										"src": "8092:70:13",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1511,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "8176:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1488,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8204:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8185:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1487,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1486,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1430,
														"src": "8185:10:13"
													},
													"referencedDeclaration": 1430,
													"src": "8185:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8217:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8209:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8209:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8184:39:13"
									},
									"returnParameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1493,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "8247:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1492,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8247:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8246:6:13"
									},
									"scope": 1717,
									"src": "8167:165:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1525,
										"nodeType": "Block",
										"src": "8485:43:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1521,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1515,
																"src": "8510:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1522,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1429,
															"src": "8510:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1520,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "8502:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8502:19:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1519,
												"id": 1524,
												"nodeType": "Return",
												"src": "8495:26:13"
											}
										]
									},
									"documentation": {
										"id": 1512,
										"nodeType": "StructuredDocumentation",
										"src": "8338:70:13",
										"text": " @dev Returns the number of values in the set. O(1)."
									},
									"id": 1526,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "8422:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1515,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8448:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "8429:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1514,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1513,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1430,
														"src": "8429:10:13"
													},
													"referencedDeclaration": 1430,
													"src": "8429:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8428:24:13"
									},
									"returnParameters": {
										"id": 1519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1518,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1526,
												"src": "8476:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8476:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8475:9:13"
									},
									"scope": 1717,
									"src": "8413:115:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1552,
										"nodeType": "Block",
										"src": "8953:73:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 1544,
																						"name": "set",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1530,
																						"src": "8998:3:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
																							"typeString": "struct EnumerableSet.AddressSet storage pointer"
																						}
																					},
																					"id": 1545,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "_inner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1429,
																					"src": "8998:10:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Set_$1129_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					}
																				},
																				{
																					"id": 1546,
																					"name": "index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1532,
																					"src": "9010:5:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Set_$1129_storage",
																						"typeString": "struct EnumerableSet.Set storage ref"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1543,
																				"name": "_at",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1305,
																				"src": "8994:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																					"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																				}
																			},
																			"id": 1547,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8994:22:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8986:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1541,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "8986:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8986:31:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1540,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8978:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 1539,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "8978:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8978:40:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 1538,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8970:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1537,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8970:7:13",
															"typeDescriptions": {}
														}
													},
													"id": 1550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8970:49:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1536,
												"id": 1551,
												"nodeType": "Return",
												"src": "8963:56:13"
											}
										]
									},
									"documentation": {
										"id": 1527,
										"nodeType": "StructuredDocumentation",
										"src": "8534:331:13",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "8879:2:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "8901:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "8882:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1529,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1528,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1430,
														"src": "8882:10:13"
													},
													"referencedDeclaration": 1430,
													"src": "8882:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "8914:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "8906:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8906:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8881:39:13"
									},
									"returnParameters": {
										"id": 1536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1535,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "8944:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8944:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8943:9:13"
									},
									"scope": 1717,
									"src": "8870:156:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1582,
										"nodeType": "Block",
										"src": "9647:176:13",
										"statements": [
											{
												"assignments": [
													1567
												],
												"declarations": [
													{
														"constant": false,
														"id": 1567,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "9674:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1582,
														"src": "9657:22:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1565,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "9657:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1566,
															"nodeType": "ArrayTypeName",
															"src": "9657:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1572,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1569,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1557,
																"src": "9690:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
																	"typeString": "struct EnumerableSet.AddressSet storage pointer"
																}
															},
															"id": 1570,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1429,
															"src": "9690:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1568,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1319,
														"src": "9682:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9682:19:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9657:44:13"
											},
											{
												"assignments": [
													1577
												],
												"declarations": [
													{
														"constant": false,
														"id": 1577,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9728:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 1582,
														"src": "9711:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 1575,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9711:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1576,
															"nodeType": "ArrayTypeName",
															"src": "9711:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1578,
												"nodeType": "VariableDeclarationStatement",
												"src": "9711:23:13"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "9754:39:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9768:15:13",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "9778:5:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "9768:6:13"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1577,
														"isOffset": false,
														"isSlot": false,
														"src": "9768:6:13",
														"valueSize": 1
													},
													{
														"declaration": 1567,
														"isOffset": false,
														"isSlot": false,
														"src": "9778:5:13",
														"valueSize": 1
													}
												],
												"id": 1579,
												"nodeType": "InlineAssembly",
												"src": "9745:48:13"
											},
											{
												"expression": {
													"id": 1580,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1577,
													"src": "9810:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 1562,
												"id": 1581,
												"nodeType": "Return",
												"src": "9803:13:13"
											}
										]
									},
									"documentation": {
										"id": 1554,
										"nodeType": "StructuredDocumentation",
										"src": "9032:529:13",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "9575:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "9601:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "9582:22:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
													"typeString": "struct EnumerableSet.AddressSet"
												},
												"typeName": {
													"id": 1556,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1555,
														"name": "AddressSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1430,
														"src": "9582:10:13"
													},
													"referencedDeclaration": 1430,
													"src": "9582:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSet_$1430_storage_ptr",
														"typeString": "struct EnumerableSet.AddressSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9581:24:13"
									},
									"returnParameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "9629:16:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1559,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "9629:7:13",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1560,
													"nodeType": "ArrayTypeName",
													"src": "9629:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9628:18:13"
									},
									"scope": 1717,
									"src": "9566:257:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"canonicalName": "EnumerableSet.UintSet",
									"id": 1587,
									"members": [
										{
											"constant": false,
											"id": 1586,
											"mutability": "mutable",
											"name": "_inner",
											"nameLocation": "9874:6:13",
											"nodeType": "VariableDeclaration",
											"scope": 1587,
											"src": "9870:10:13",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
												"typeString": "struct EnumerableSet.Set"
											},
											"typeName": {
												"id": 1585,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1584,
													"name": "Set",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1129,
													"src": "9870:3:13"
												},
												"referencedDeclaration": 1129,
												"src": "9870:3:13",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Set_$1129_storage_ptr",
													"typeString": "struct EnumerableSet.Set"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UintSet",
									"nameLocation": "9852:7:13",
									"nodeType": "StructDefinition",
									"scope": 1717,
									"src": "9845:42:13",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1607,
										"nodeType": "Block",
										"src": "10130:56:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1599,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1591,
																"src": "10152:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1600,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1586,
															"src": "10152:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1603,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1593,
																	"src": "10172:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1602,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10164:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1601,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10164:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1604,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10164:14:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1598,
														"name": "_add",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1171,
														"src": "10147:4:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10147:32:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1597,
												"id": 1606,
												"nodeType": "Return",
												"src": "10140:39:13"
											}
										]
									},
									"documentation": {
										"id": 1588,
										"nodeType": "StructuredDocumentation",
										"src": "9893:159:13",
										"text": " @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."
									},
									"id": 1608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "10066:3:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10086:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "10070:19:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1590,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1589,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1587,
														"src": "10070:7:13"
													},
													"referencedDeclaration": 1587,
													"src": "10070:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1593,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10099:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "10091:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10091:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10069:36:13"
									},
									"returnParameters": {
										"id": 1597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1596,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "10124:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1595,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10124:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10123:6:13"
									},
									"scope": 1717,
									"src": "10057:129:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1628,
										"nodeType": "Block",
										"src": "10430:59:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1620,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1612,
																"src": "10455:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1621,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1586,
															"src": "10455:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1624,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1614,
																	"src": "10475:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1623,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10467:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1622,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10467:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10467:14:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1619,
														"name": "_remove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1255,
														"src": "10447:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"
														}
													},
													"id": 1626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10447:35:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1618,
												"id": 1627,
												"nodeType": "Return",
												"src": "10440:42:13"
											}
										]
									},
									"documentation": {
										"id": 1609,
										"nodeType": "StructuredDocumentation",
										"src": "10192:157:13",
										"text": " @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."
									},
									"id": 1629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "remove",
									"nameLocation": "10363:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10386:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "10370:19:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1611,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1610,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1587,
														"src": "10370:7:13"
													},
													"referencedDeclaration": 1587,
													"src": "10370:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10399:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "10391:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10391:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10369:36:13"
									},
									"returnParameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "10424:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1616,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10424:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10423:6:13"
									},
									"scope": 1717,
									"src": "10354:135:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1649,
										"nodeType": "Block",
										"src": "10653:61:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1641,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1633,
																"src": "10680:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1642,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1586,
															"src": "10680:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1645,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1635,
																	"src": "10700:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1644,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10692:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1643,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "10692:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1646,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10692:14:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1640,
														"name": "_contains",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1274,
														"src": "10670:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$_t_bytes32_$returns$_t_bool_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"
														}
													},
													"id": 1647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10670:37:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1639,
												"id": 1648,
												"nodeType": "Return",
												"src": "10663:44:13"
											}
										]
									},
									"documentation": {
										"id": 1630,
										"nodeType": "StructuredDocumentation",
										"src": "10495:70:13",
										"text": " @dev Returns true if the value is in the set. O(1)."
									},
									"id": 1650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contains",
									"nameLocation": "10579:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1633,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10604:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "10588:19:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1632,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1631,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1587,
														"src": "10588:7:13"
													},
													"referencedDeclaration": 1587,
													"src": "10588:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10617:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "10609:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1634,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10609:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10587:36:13"
									},
									"returnParameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "10647:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1637,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10647:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10646:6:13"
									},
									"scope": 1717,
									"src": "10570:144:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1664,
										"nodeType": "Block",
										"src": "10864:43:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1660,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1654,
																"src": "10889:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1661,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1586,
															"src": "10889:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1659,
														"name": "_length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "10881:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (uint256)"
														}
													},
													"id": 1662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10881:19:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1658,
												"id": 1663,
												"nodeType": "Return",
												"src": "10874:26:13"
											}
										]
									},
									"documentation": {
										"id": 1651,
										"nodeType": "StructuredDocumentation",
										"src": "10720:70:13",
										"text": " @dev Returns the number of values on the set. O(1)."
									},
									"id": 1665,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "length",
									"nameLocation": "10804:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "10827:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "10811:19:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1653,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1652,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1587,
														"src": "10811:7:13"
													},
													"referencedDeclaration": 1587,
													"src": "10811:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10810:21:13"
									},
									"returnParameters": {
										"id": 1658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1657,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "10855:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10855:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10854:9:13"
									},
									"scope": 1717,
									"src": "10795:112:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1685,
										"nodeType": "Block",
										"src": "11329:55:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1679,
																		"name": "set",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1669,
																		"src": "11358:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
																			"typeString": "struct EnumerableSet.UintSet storage pointer"
																		}
																	},
																	"id": 1680,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "_inner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1586,
																	"src": "11358:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Set_$1129_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	}
																},
																{
																	"id": 1681,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1671,
																	"src": "11370:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_Set_$1129_storage",
																		"typeString": "struct EnumerableSet.Set storage ref"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1678,
																"name": "_at",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1305,
																"src": "11354:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$_t_uint256_$returns$_t_bytes32_$",
																	"typeString": "function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"
																}
															},
															"id": 1682,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11354:22:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1677,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "11346:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1676,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11346:7:13",
															"typeDescriptions": {}
														}
													},
													"id": 1683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11346:31:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1675,
												"id": 1684,
												"nodeType": "Return",
												"src": "11339:38:13"
											}
										]
									},
									"documentation": {
										"id": 1666,
										"nodeType": "StructuredDocumentation",
										"src": "10913:331:13",
										"text": " @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."
									},
									"id": 1686,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "at",
									"nameLocation": "11258:2:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11277:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1686,
												"src": "11261:19:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1668,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1667,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1587,
														"src": "11261:7:13"
													},
													"referencedDeclaration": 1587,
													"src": "11261:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "11290:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1686,
												"src": "11282:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1670,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11282:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11260:36:13"
									},
									"returnParameters": {
										"id": 1675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1686,
												"src": "11320:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11320:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11319:9:13"
									},
									"scope": 1717,
									"src": "11249:135:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1715,
										"nodeType": "Block",
										"src": "12002:176:13",
										"statements": [
											{
												"assignments": [
													1700
												],
												"declarations": [
													{
														"constant": false,
														"id": 1700,
														"mutability": "mutable",
														"name": "store",
														"nameLocation": "12029:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1715,
														"src": "12012:22:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1698,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "12012:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1699,
															"nodeType": "ArrayTypeName",
															"src": "12012:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1705,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1702,
																"name": "set",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1690,
																"src": "12045:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
																	"typeString": "struct EnumerableSet.UintSet storage pointer"
																}
															},
															"id": 1703,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "_inner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1586,
															"src": "12045:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Set_$1129_storage",
																"typeString": "struct EnumerableSet.Set storage ref"
															}
														],
														"id": 1701,
														"name": "_values",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1319,
														"src": "12037:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Set_$1129_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"
														}
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12037:19:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12012:44:13"
											},
											{
												"assignments": [
													1710
												],
												"declarations": [
													{
														"constant": false,
														"id": 1710,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12083:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 1715,
														"src": "12066:23:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 1708,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12066:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1709,
															"nodeType": "ArrayTypeName",
															"src": "12066:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1711,
												"nodeType": "VariableDeclarationStatement",
												"src": "12066:23:13"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "12109:39:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12123:15:13",
															"value": {
																"name": "store",
																"nodeType": "YulIdentifier",
																"src": "12133:5:13"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "12123:6:13"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1710,
														"isOffset": false,
														"isSlot": false,
														"src": "12123:6:13",
														"valueSize": 1
													},
													{
														"declaration": 1700,
														"isOffset": false,
														"isSlot": false,
														"src": "12133:5:13",
														"valueSize": 1
													}
												],
												"id": 1712,
												"nodeType": "InlineAssembly",
												"src": "12100:48:13"
											},
											{
												"expression": {
													"id": 1713,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1710,
													"src": "12165:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 1695,
												"id": 1714,
												"nodeType": "Return",
												"src": "12158:13:13"
											}
										]
									},
									"documentation": {
										"id": 1687,
										"nodeType": "StructuredDocumentation",
										"src": "11390:529:13",
										"text": " @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
									},
									"id": 1716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "values",
									"nameLocation": "11933:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1690,
												"mutability": "mutable",
												"name": "set",
												"nameLocation": "11956:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "11940:19:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
													"typeString": "struct EnumerableSet.UintSet"
												},
												"typeName": {
													"id": 1689,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1688,
														"name": "UintSet",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1587,
														"src": "11940:7:13"
													},
													"referencedDeclaration": 1587,
													"src": "11940:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UintSet_$1587_storage_ptr",
														"typeString": "struct EnumerableSet.UintSet"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11939:21:13"
									},
									"returnParameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "11984:16:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1692,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11984:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1693,
													"nodeType": "ArrayTypeName",
													"src": "11984:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11983:18:13"
									},
									"scope": 1717,
									"src": "11924:254:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1718,
							"src": "812:11368:13",
							"usedErrors": []
						}
					],
					"src": "100:12081:13"
				},
				"id": 13
			},
			"contracts/manifold/lazyclaim/ERC721LazyClaim.sol": {
				"ast": {
					"absolutePath": "contracts/manifold/lazyclaim/ERC721LazyClaim.sol",
					"exportedSymbols": {
						"AdminControl": [
							575
						],
						"Context": [
							791
						],
						"ERC165": [
							1106
						],
						"ERC721LazyClaim": [
							2868
						],
						"EnumerableSet": [
							1717
						],
						"IAdminControl": [
							621
						],
						"ICreatorCore": [
							277
						],
						"ICreatorExtensionTokenURI": [
							389
						],
						"IERC165": [
							1118
						],
						"IERC721CreatorCore": [
							372
						],
						"IERC721LazyClaim": [
							3046
						],
						"MerkleProof": [
							1082
						],
						"Ownable": [
							726
						],
						"ReentrancyGuard": [
							769
						],
						"Strings": [
							994
						]
					},
					"id": 2869,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1719,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:14"
						},
						{
							"absolutePath": "@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol",
							"file": "@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol",
							"id": 1720,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 373,
							"src": "58:82:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol",
							"file": "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol",
							"id": 1721,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 576,
							"src": "141:75:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
							"file": "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol",
							"id": 1722,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 390,
							"src": "217:95:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 1723,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 770,
							"src": "314:62:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 1724,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 1083,
							"src": "377:68:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
							"file": "@openzeppelin/contracts/interfaces/IERC165.sol",
							"id": 1725,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 730,
							"src": "446:56:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 1726,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 995,
							"src": "503:51:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/manifold/lazyclaim/IERC721LazyClaim.sol",
							"file": "./IERC721LazyClaim.sol",
							"id": 1727,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2869,
							"sourceUnit": 3047,
							"src": "556:32:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1729,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1118,
										"src": "731:7:14"
									},
									"id": 1730,
									"nodeType": "InheritanceSpecifier",
									"src": "731:7:14"
								},
								{
									"baseName": {
										"id": 1731,
										"name": "IERC721LazyClaim",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3046,
										"src": "740:16:14"
									},
									"id": 1732,
									"nodeType": "InheritanceSpecifier",
									"src": "740:16:14"
								},
								{
									"baseName": {
										"id": 1733,
										"name": "ICreatorExtensionTokenURI",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 389,
										"src": "758:25:14"
									},
									"id": 1734,
									"nodeType": "InheritanceSpecifier",
									"src": "758:25:14"
								},
								{
									"baseName": {
										"id": 1735,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 769,
										"src": "785:15:14"
									},
									"id": 1736,
									"nodeType": "InheritanceSpecifier",
									"src": "785:15:14"
								}
							],
							"canonicalName": "ERC721LazyClaim",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1728,
								"nodeType": "StructuredDocumentation",
								"src": "590:112:14",
								"text": " @title Lazy Claim\n @author manifold.xyz\n @notice Lazy claim with optional whitelist ERC721 tokens"
							},
							"fullyImplemented": true,
							"id": 2868,
							"linearizedBaseContracts": [
								2868,
								769,
								389,
								3046,
								1118
							],
							"name": "ERC721LazyClaim",
							"nameLocation": "712:15:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1739,
									"libraryName": {
										"id": 1737,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 994,
										"src": "813:7:14"
									},
									"nodeType": "UsingForDirective",
									"src": "807:26:14",
									"typeName": {
										"id": 1738,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "825:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": true,
									"id": 1742,
									"mutability": "constant",
									"name": "ARWEAVE_PREFIX",
									"nameLocation": "863:14:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "839:63:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_memory_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 1740,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "839:6:14",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "68747470733a2f2f617277656176652e6e65742f",
										"id": 1741,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "880:22:14",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_c6b8bc19702d5602e53bd58d6d8ffee0ad1a48a3bbac6a67d3d76c87f0ffdebc",
											"typeString": "literal_string \"https://arweave.net/\""
										},
										"value": "https://arweave.net/"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1745,
									"mutability": "constant",
									"name": "IPFS_PREFIX",
									"nameLocation": "932:11:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "908:47:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_memory_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 1743,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "908:6:14",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "697066733a2f2f",
										"id": 1744,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "946:9:14",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe",
											"typeString": "literal_string \"ipfs://\""
										},
										"value": "ipfs://"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1748,
									"mutability": "constant",
									"name": "MINT_INDEX_BITMASK",
									"nameLocation": "986:18:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "961:50:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1746,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30784646",
										"id": 1747,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1007:4:14",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0xFF"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1752,
									"mutability": "mutable",
									"name": "_claimCounts",
									"nameLocation": "1240:12:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "1204:48:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint224_$",
										"typeString": "mapping(address => uint224)"
									},
									"typeName": {
										"id": 1751,
										"keyType": {
											"id": 1749,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1204:27:14",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint224_$",
											"typeString": "mapping(address => uint224)"
										},
										"valueType": {
											"id": 1750,
											"name": "uint224",
											"nodeType": "ElementaryTypeName",
											"src": "1223:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_uint224",
												"typeString": "uint224"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1759,
									"mutability": "mutable",
									"name": "_claims",
									"nameLocation": "1426:7:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "1372:61:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
										"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim))"
									},
									"typeName": {
										"id": 1758,
										"keyType": {
											"id": 1753,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1380:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1372:45:14",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
											"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim))"
										},
										"valueType": {
											"id": 1757,
											"keyType": {
												"id": 1754,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1399:7:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1391:25:14",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
												"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim)"
											},
											"valueType": {
												"id": 1756,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1755,
													"name": "Claim",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 2914,
													"src": "1410:5:14"
												},
												"referencedDeclaration": 2914,
												"src": "1410:5:14",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
													"typeString": "struct IERC721LazyClaim.Claim"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1767,
									"mutability": "mutable",
									"name": "_mintsPerWallet",
									"nameLocation": "1719:15:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "1643:91:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$_$",
										"typeString": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
									},
									"typeName": {
										"id": 1766,
										"keyType": {
											"id": 1760,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1651:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1643:67:14",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$_$",
											"typeString": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
										},
										"valueType": {
											"id": 1765,
											"keyType": {
												"id": 1761,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1670:7:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1662:47:14",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
												"typeString": "mapping(uint256 => mapping(address => uint256))"
											},
											"valueType": {
												"id": 1764,
												"keyType": {
													"id": 1762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1689:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1681:27:14",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueType": {
													"id": 1763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1700:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1775,
									"mutability": "mutable",
									"name": "_claimMintIndices",
									"nameLocation": "1973:17:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "1897:93:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$",
										"typeString": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"
									},
									"typeName": {
										"id": 1774,
										"keyType": {
											"id": 1768,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1905:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1897:67:14",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$",
											"typeString": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"
										},
										"valueType": {
											"id": 1773,
											"keyType": {
												"id": 1769,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1924:7:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "1916:47:14",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$",
												"typeString": "mapping(uint256 => mapping(uint256 => uint256))"
											},
											"valueType": {
												"id": 1772,
												"keyType": {
													"id": 1770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1943:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1935:27:14",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
													"typeString": "mapping(uint256 => uint256)"
												},
												"valueType": {
													"id": 1771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1954:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"canonicalName": "ERC721LazyClaim.TokenClaim",
									"id": 1780,
									"members": [
										{
											"constant": false,
											"id": 1777,
											"mutability": "mutable",
											"name": "claimIndex",
											"nameLocation": "2033:10:14",
											"nodeType": "VariableDeclaration",
											"scope": 1780,
											"src": "2025:18:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint224",
												"typeString": "uint224"
											},
											"typeName": {
												"id": 1776,
												"name": "uint224",
												"nodeType": "ElementaryTypeName",
												"src": "2025:7:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint224",
													"typeString": "uint224"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1779,
											"mutability": "mutable",
											"name": "mintOrder",
											"nameLocation": "2060:9:14",
											"nodeType": "VariableDeclaration",
											"scope": 1780,
											"src": "2053:16:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 1778,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "2053:6:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenClaim",
									"nameLocation": "2004:10:14",
									"nodeType": "StructDefinition",
									"scope": 2868,
									"src": "1997:79:14",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1787,
									"mutability": "mutable",
									"name": "_tokenClaims",
									"nameLocation": "2285:12:14",
									"nodeType": "VariableDeclaration",
									"scope": 2868,
									"src": "2226:71:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$_$",
										"typeString": "mapping(address => mapping(uint256 => struct ERC721LazyClaim.TokenClaim))"
									},
									"typeName": {
										"id": 1786,
										"keyType": {
											"id": 1781,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2234:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2226:50:14",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$_$",
											"typeString": "mapping(address => mapping(uint256 => struct ERC721LazyClaim.TokenClaim))"
										},
										"valueType": {
											"id": 1785,
											"keyType": {
												"id": 1782,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2253:7:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "2245:30:14",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$",
												"typeString": "mapping(uint256 => struct ERC721LazyClaim.TokenClaim)"
											},
											"valueType": {
												"id": 1784,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1783,
													"name": "TokenClaim",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1780,
													"src": "2264:10:14"
												},
												"referencedDeclaration": 1780,
												"src": "2264:10:14",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenClaim_$1780_storage_ptr",
													"typeString": "struct ERC721LazyClaim.TokenClaim"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"baseFunctions": [
										1117
									],
									"body": {
										"id": 1817,
										"nodeType": "Block",
										"src": "2404:203:14",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1815,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1808,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1796,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1789,
																"src": "2421:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1798,
																			"name": "IERC721LazyClaim",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3046,
																			"src": "2441:16:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721LazyClaim_$3046_$",
																				"typeString": "type(contract IERC721LazyClaim)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721LazyClaim_$3046_$",
																				"typeString": "type(contract IERC721LazyClaim)"
																			}
																		],
																		"id": 1797,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2436:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1799,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2436:22:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721LazyClaim_$3046",
																		"typeString": "type(contract IERC721LazyClaim)"
																	}
																},
																"id": 1800,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2436:34:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2421:49:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1802,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1789,
																"src": "2486:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1804,
																			"name": "ICreatorExtensionTokenURI",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "2506:25:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_ICreatorExtensionTokenURI_$389_$",
																				"typeString": "type(contract ICreatorExtensionTokenURI)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_ICreatorExtensionTokenURI_$389_$",
																				"typeString": "type(contract ICreatorExtensionTokenURI)"
																			}
																		],
																		"id": 1803,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2501:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:31:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_ICreatorExtensionTokenURI_$389",
																		"typeString": "type(contract ICreatorExtensionTokenURI)"
																	}
																},
																"id": 1806,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2501:43:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2486:58:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "2421:123:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 1814,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1809,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1789,
															"src": "2560:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1811,
																		"name": "IERC165",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1118,
																		"src": "2580:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC165_$1118_$",
																			"typeString": "type(contract IERC165)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IERC165_$1118_$",
																			"typeString": "type(contract IERC165)"
																		}
																	],
																	"id": 1810,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2575:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1812,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2575:13:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1118",
																	"typeString": "type(contract IERC165)"
																}
															},
															"id": 1813,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2575:25:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2560:40:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2421:179:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1795,
												"id": 1816,
												"nodeType": "Return",
												"src": "2414:186:14"
											}
										]
									},
									"functionSelector": "01ffc9a7",
									"id": 1818,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2313:17:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1792,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1791,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1118,
												"src": "2380:7:14"
											}
										],
										"src": "2371:17:14"
									},
									"parameters": {
										"id": 1790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2338:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "2331:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1788,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2331:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2330:20:14"
									},
									"returnParameters": {
										"id": 1795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1818,
												"src": "2398:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1793,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2398:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2397:6:14"
									},
									"scope": 2868,
									"src": "2304:303:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1840,
										"nodeType": "Block",
										"src": "2948:204:14",
										"statements": [
											{
												"assignments": [
													1825
												],
												"declarations": [
													{
														"constant": false,
														"id": 1825,
														"mutability": "mutable",
														"name": "creatorCoreContract",
														"nameLocation": "2971:19:14",
														"nodeType": "VariableDeclaration",
														"scope": 1840,
														"src": "2958:32:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_AdminControl_$575",
															"typeString": "contract AdminControl"
														},
														"typeName": {
															"id": 1824,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1823,
																"name": "AdminControl",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 575,
																"src": "2958:12:14"
															},
															"referencedDeclaration": 575,
															"src": "2958:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_AdminControl_$575",
																"typeString": "contract AdminControl"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1829,
												"initialValue": {
													"arguments": [
														{
															"id": 1827,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1821,
															"src": "3006:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1826,
														"name": "AdminControl",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 575,
														"src": "2993:12:14",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_AdminControl_$575_$",
															"typeString": "type(contract AdminControl)"
														}
													},
													"id": 1828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2993:36:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_AdminControl_$575",
														"typeString": "contract AdminControl"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2958:71:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1833,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3075:3:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1834,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3075:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1831,
																	"name": "creatorCoreContract",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1825,
																	"src": "3047:19:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_AdminControl_$575",
																		"typeString": "contract AdminControl"
																	}
																},
																"id": 1832,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isAdmin",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 574,
																"src": "3047:27:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view external returns (bool)"
																}
															},
															"id": 1835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:39:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "57616c6c6574206973206e6f7420616e2061646d696e6973747261746f7220666f7220636f6e7472616374",
															"id": 1836,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3088:45:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_42b687a6639e652ea37178739a4ab95bb07672c62684b4a62e571c9e1a205775",
																"typeString": "literal_string \"Wallet is not an administrator for contract\""
															},
															"value": "Wallet is not an administrator for contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_42b687a6639e652ea37178739a4ab95bb07672c62684b4a62e571c9e1a205775",
																"typeString": "literal_string \"Wallet is not an administrator for contract\""
															}
														],
														"id": 1830,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3039:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3039:95:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1838,
												"nodeType": "ExpressionStatement",
												"src": "3039:95:14"
											},
											{
												"id": 1839,
												"nodeType": "PlaceholderStatement",
												"src": "3144:1:14"
											}
										]
									},
									"documentation": {
										"id": 1819,
										"nodeType": "StructuredDocumentation",
										"src": "2618:263:14",
										"text": " @notice This extension is shared, not single-creator. So we must ensure\n that a claim's initializer is an admin on the creator contract\n @param creatorContractAddress    the address of the creator contract to check the admin against"
									},
									"id": 1841,
									"name": "creatorAdminRequired",
									"nameLocation": "2895:20:14",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1821,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "2924:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 1841,
												"src": "2916:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1820,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2915:32:14"
									},
									"src": "2886:266:14",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2947
									],
									"body": {
										"id": 1938,
										"nodeType": "Block",
										"src": "3423:1250:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 1861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1857,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "3466:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1858,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2887,
																"src": "3466:31:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 1859,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "3501:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 1860,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "3501:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "3466:58:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f7420696e697469616c697a65207769746820696e76616c69642073746f726167652070726f746f636f6c",
															"id": 1862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3526:49:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_40d3da3f1cf495ca8b1686f660a03e4645cfeec4684d719c5244003a37e1e2de",
																"typeString": "literal_string \"Cannot initialize with invalid storage protocol\""
															},
															"value": "Cannot initialize with invalid storage protocol"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_40d3da3f1cf495ca8b1686f660a03e4645cfeec4684d719c5244003a37e1e2de",
																"typeString": "literal_string \"Cannot initialize with invalid storage protocol\""
															}
														],
														"id": 1856,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3458:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3458:118:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1864,
												"nodeType": "ExpressionStatement",
												"src": "3458:118:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 1869,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1866,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1847,
																		"src": "3594:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 1867,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2884,
																	"src": "3594:23:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1868,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3621:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3594:28:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 1874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1870,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1847,
																		"src": "3626:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 1871,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "startDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2882,
																	"src": "3626:25:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"expression": {
																		"id": 1872,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1847,
																		"src": "3654:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 1873,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2884,
																	"src": "3654:23:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"src": "3626:51:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3594:83:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f742068617665207374617274446174652067726561746572207468616e206f7220657175616c20746f20656e6444617465",
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3679:56:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_146dad66b1b90b66cf08f31cd5f1132fa61f7194c7b13b907b231b2105155f03",
																"typeString": "literal_string \"Cannot have startDate greater than or equal to endDate\""
															},
															"value": "Cannot have startDate greater than or equal to endDate"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_146dad66b1b90b66cf08f31cd5f1132fa61f7194c7b13b907b231b2105155f03",
																"typeString": "literal_string \"Cannot have startDate greater than or equal to endDate\""
															}
														],
														"id": 1865,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3586:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3586:150:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1878,
												"nodeType": "ExpressionStatement",
												"src": "3586:150:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1888,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 1883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1880,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1847,
																		"src": "3754:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 1881,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "merkleRoot",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2891,
																	"src": "3754:26:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "",
																	"id": 1882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3784:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																		"typeString": "literal_string \"\""
																	},
																	"value": ""
																},
																"src": "3754:32:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 1887,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1884,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1847,
																		"src": "3790:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 1885,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "walletMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2880,
																	"src": "3790:25:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3819:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3790:30:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3754:66:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f742070726f7669646520626f7468206d696e747350657257616c6c657420616e64206d65726b6c65526f6f74",
															"id": 1889,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3822:51:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_722bfb9e6f51de2ac25a130ee15ede1c320fb11a5fb4945e68c259606e22d8f9",
																"typeString": "literal_string \"Cannot provide both mintsPerWallet and merkleRoot\""
															},
															"value": "Cannot provide both mintsPerWallet and merkleRoot"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_722bfb9e6f51de2ac25a130ee15ede1c320fb11a5fb4945e68c259606e22d8f9",
																"typeString": "literal_string \"Cannot provide both mintsPerWallet and merkleRoot\""
															}
														],
														"id": 1879,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3746:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3746:128:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1891,
												"nodeType": "ExpressionStatement",
												"src": "3746:128:14"
											},
											{
												"expression": {
													"id": 1895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "++",
													"prefix": false,
													"src": "3932:38:14",
													"subExpression": {
														"baseExpression": {
															"id": 1892,
															"name": "_claimCounts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1752,
															"src": "3932:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint224_$",
																"typeString": "mapping(address => uint224)"
															}
														},
														"id": 1894,
														"indexExpression": {
															"id": 1893,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1844,
															"src": "3945:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3932:36:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint224",
															"typeString": "uint224"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint224",
														"typeString": "uint224"
													}
												},
												"id": 1896,
												"nodeType": "ExpressionStatement",
												"src": "3932:38:14"
											},
											{
												"assignments": [
													1898
												],
												"declarations": [
													{
														"constant": false,
														"id": 1898,
														"mutability": "mutable",
														"name": "newIndex",
														"nameLocation": "3988:8:14",
														"nodeType": "VariableDeclaration",
														"scope": 1938,
														"src": "3980:16:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint224",
															"typeString": "uint224"
														},
														"typeName": {
															"id": 1897,
															"name": "uint224",
															"nodeType": "ElementaryTypeName",
															"src": "3980:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint224",
																"typeString": "uint224"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1902,
												"initialValue": {
													"baseExpression": {
														"id": 1899,
														"name": "_claimCounts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1752,
														"src": "3999:12:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint224_$",
															"typeString": "mapping(address => uint224)"
														}
													},
													"id": 1901,
													"indexExpression": {
														"id": 1900,
														"name": "creatorContractAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1844,
														"src": "4012:22:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3999:36:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint224",
														"typeString": "uint224"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3980:55:14"
											},
											{
												"expression": {
													"id": 1927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1903,
																"name": "_claims",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1759,
																"src": "4074:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																	"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																}
															},
															"id": 1906,
															"indexExpression": {
																"id": 1904,
																"name": "creatorContractAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1844,
																"src": "4082:22:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4074:31:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
															}
														},
														"id": 1907,
														"indexExpression": {
															"id": 1905,
															"name": "newIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1898,
															"src": "4106:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint224",
																"typeString": "uint224"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4074:41:14",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_storage",
															"typeString": "struct IERC721LazyClaim.Claim storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1909,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4145:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"expression": {
																	"id": 1910,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4170:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1911,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "totalMax",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2878,
																"src": "4170:24:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															{
																"expression": {
																	"id": 1912,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4219:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1913,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "walletMax",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2880,
																"src": "4219:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															{
																"expression": {
																	"id": 1914,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4269:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "startDate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2882,
																"src": "4269:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																}
															},
															{
																"expression": {
																	"id": 1916,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4317:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1917,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "endDate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2884,
																"src": "4317:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																}
															},
															{
																"expression": {
																	"id": 1918,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4371:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1919,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2887,
																"src": "4371:31:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															{
																"expression": {
																	"id": 1920,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4427:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1921,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "identical",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2889,
																"src": "4427:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"expression": {
																	"id": 1922,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4478:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "merkleRoot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2891,
																"src": "4478:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"expression": {
																	"id": 1924,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1847,
																	"src": "4528:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1925,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "location",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2893,
																"src": "4528:24:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																{
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																{
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																{
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															],
															"id": 1908,
															"name": "Claim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2914,
															"src": "4118:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Claim_$2914_storage_ptr_$",
																"typeString": "type(struct IERC721LazyClaim.Claim storage pointer)"
															}
														},
														"id": 1926,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [
															"total",
															"totalMax",
															"walletMax",
															"startDate",
															"endDate",
															"storageProtocol",
															"identical",
															"merkleRoot",
															"location"
														],
														"nodeType": "FunctionCall",
														"src": "4118:445:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
															"typeString": "struct IERC721LazyClaim.Claim memory"
														}
													},
													"src": "4074:489:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"id": 1928,
												"nodeType": "ExpressionStatement",
												"src": "4074:489:14"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1930,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1844,
															"src": "4596:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1931,
															"name": "newIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1898,
															"src": "4620:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint224",
																"typeString": "uint224"
															}
														},
														{
															"expression": {
																"id": 1932,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4630:3:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1933,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4630:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint224",
																"typeString": "uint224"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1929,
														"name": "ClaimInitialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2922,
														"src": "4579:16:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint224_$_t_address_$returns$__$",
															"typeString": "function (address,uint224,address)"
														}
													},
													"id": 1934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4579:62:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1935,
												"nodeType": "EmitStatement",
												"src": "4574:67:14"
											},
											{
												"expression": {
													"id": 1936,
													"name": "newIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1898,
													"src": "4658:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint224",
														"typeString": "uint224"
													}
												},
												"functionReturnParameters": 1855,
												"id": 1937,
												"nodeType": "Return",
												"src": "4651:15:14"
											}
										]
									},
									"documentation": {
										"id": 1842,
										"nodeType": "StructuredDocumentation",
										"src": "3158:58:14",
										"text": " See {IERC721LazyClaim-initializeClaim}."
									},
									"functionSelector": "037b79db",
									"id": 1939,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1851,
													"name": "creatorContractAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1844,
													"src": "3381:22:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1852,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1850,
												"name": "creatorAdminRequired",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1841,
												"src": "3360:20:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "3360:44:14"
										}
									],
									"name": "initializeClaim",
									"nameLocation": "3230:15:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1849,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3351:8:14"
									},
									"parameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "3263:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 1939,
												"src": "3255:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1843,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3255:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "claimParameters",
												"nameLocation": "3320:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1939,
												"src": "3295:40:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
													"typeString": "struct IERC721LazyClaim.ClaimParameters"
												},
												"typeName": {
													"id": 1846,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1845,
														"name": "ClaimParameters",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2894,
														"src": "3295:15:14"
													},
													"referencedDeclaration": 2894,
													"src": "3295:15:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ClaimParameters_$2894_storage_ptr",
														"typeString": "struct IERC721LazyClaim.ClaimParameters"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3245:96:14"
									},
									"returnParameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1939,
												"src": "3414:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3414:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3413:9:14"
									},
									"scope": 2868,
									"src": "3221:1452:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2958
									],
									"body": {
										"id": 2065,
										"nodeType": "Block",
										"src": "4946:1409:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 1963,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1955,
																			"name": "_claims",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1759,
																			"src": "4989:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																				"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																			}
																		},
																		"id": 1957,
																		"indexExpression": {
																			"id": 1956,
																			"name": "creatorContractAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1942,
																			"src": "4997:22:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4989:31:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
																		}
																	},
																	"id": 1959,
																	"indexExpression": {
																		"id": 1958,
																		"name": "claimIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1944,
																		"src": "5021:10:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4989:43:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage",
																		"typeString": "struct IERC721LazyClaim.Claim storage ref"
																	}
																},
																"id": 1960,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2907,
																"src": "4989:59:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 1961,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "5052:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 1962,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "5052:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "4989:86:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436c61696d206e6f7420696e697469616c697a6564",
															"id": 1964,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5077:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															},
															"value": "Claim not initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															}
														],
														"id": 1954,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4981:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4981:120:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1966,
												"nodeType": "ExpressionStatement",
												"src": "4981:120:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 1972,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1968,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "5119:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 1969,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2887,
																"src": "5119:31:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 1970,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "5154:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 1971,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "5154:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "5119:58:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f742073657420696e76616c69642073746f726167652070726f746f636f6c",
															"id": 1973,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5179:37:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d0b37c55f628bdb89b05cd566ea32d2ceee5fc940b974ae83f994bcaa49cb067",
																"typeString": "literal_string \"Cannot set invalid storage protocol\""
															},
															"value": "Cannot set invalid storage protocol"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d0b37c55f628bdb89b05cd566ea32d2ceee5fc940b974ae83f994bcaa49cb067",
																"typeString": "literal_string \"Cannot set invalid storage protocol\""
															}
														],
														"id": 1967,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5111:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1974,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5111:106:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1975,
												"nodeType": "ExpressionStatement",
												"src": "5111:106:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 1984,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"baseExpression": {
																				"id": 1977,
																				"name": "_claims",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1759,
																				"src": "5235:7:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																					"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																				}
																			},
																			"id": 1979,
																			"indexExpression": {
																				"id": 1978,
																				"name": "creatorContractAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1942,
																				"src": "5243:22:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5235:31:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																				"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
																			}
																		},
																		"id": 1981,
																		"indexExpression": {
																			"id": 1980,
																			"name": "claimIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1944,
																			"src": "5267:10:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5235:43:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage",
																			"typeString": "struct IERC721LazyClaim.Claim storage ref"
																		}
																	},
																	"id": 1982,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2898,
																	"src": "5235:52:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1983,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5291:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5235:57:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 1993,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"baseExpression": {
																				"id": 1985,
																				"name": "_claims",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1759,
																				"src": "5297:7:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																					"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																				}
																			},
																			"id": 1987,
																			"indexExpression": {
																				"id": 1986,
																				"name": "creatorContractAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1942,
																				"src": "5305:22:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5297:31:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																				"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
																			}
																		},
																		"id": 1989,
																		"indexExpression": {
																			"id": 1988,
																			"name": "claimIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1944,
																			"src": "5329:10:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5297:43:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage",
																			"typeString": "struct IERC721LazyClaim.Claim storage ref"
																		}
																	},
																	"id": 1990,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2898,
																	"src": "5297:52:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"expression": {
																		"id": 1991,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1947,
																		"src": "5353:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 1992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2878,
																	"src": "5353:24:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "5297:80:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5235:142:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f7420646563726561736520746f74616c4d6178",
															"id": 1995,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5379:26:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0dd873da6e54c819da89101e3c7a7edbcf1e0fc965622b329e4e29f1cc77ee05",
																"typeString": "literal_string \"Cannot decrease totalMax\""
															},
															"value": "Cannot decrease totalMax"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0dd873da6e54c819da89101e3c7a7edbcf1e0fc965622b329e4e29f1cc77ee05",
																"typeString": "literal_string \"Cannot decrease totalMax\""
															}
														],
														"id": 1976,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5227:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5227:179:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1997,
												"nodeType": "ExpressionStatement",
												"src": "5227:179:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2016,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2006,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"baseExpression": {
																				"id": 1999,
																				"name": "_claims",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1759,
																				"src": "5424:7:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																					"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																				}
																			},
																			"id": 2001,
																			"indexExpression": {
																				"id": 2000,
																				"name": "creatorContractAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1942,
																				"src": "5432:22:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5424:31:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																				"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
																			}
																		},
																		"id": 2003,
																		"indexExpression": {
																			"id": 2002,
																			"name": "claimIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1944,
																			"src": "5456:10:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5424:43:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage",
																			"typeString": "struct IERC721LazyClaim.Claim storage ref"
																		}
																	},
																	"id": 2004,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "walletMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2900,
																	"src": "5424:53:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2005,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5481:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5424:58:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2015,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"baseExpression": {
																				"id": 2007,
																				"name": "_claims",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1759,
																				"src": "5486:7:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																					"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																				}
																			},
																			"id": 2009,
																			"indexExpression": {
																				"id": 2008,
																				"name": "creatorContractAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1942,
																				"src": "5494:22:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5486:31:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																				"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
																			}
																		},
																		"id": 2011,
																		"indexExpression": {
																			"id": 2010,
																			"name": "claimIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1944,
																			"src": "5518:10:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5486:43:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage",
																			"typeString": "struct IERC721LazyClaim.Claim storage ref"
																		}
																	},
																	"id": 2012,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "walletMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2900,
																	"src": "5486:53:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"expression": {
																		"id": 2013,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1947,
																		"src": "5543:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 2014,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "walletMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2880,
																	"src": "5543:25:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "5486:82:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5424:144:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f742064656372656173652077616c6c65744d6178",
															"id": 2017,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5570:27:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a0dc35c7649c1e335260206285bfe8152a96b0e7f380816b1c7d9a75573461b0",
																"typeString": "literal_string \"Cannot decrease walletMax\""
															},
															"value": "Cannot decrease walletMax"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a0dc35c7649c1e335260206285bfe8152a96b0e7f380816b1c7d9a75573461b0",
																"typeString": "literal_string \"Cannot decrease walletMax\""
															}
														],
														"id": 1998,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5416:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5416:182:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2019,
												"nodeType": "ExpressionStatement",
												"src": "5416:182:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2030,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 2024,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2021,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1947,
																		"src": "5616:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 2022,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2884,
																	"src": "5616:23:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2023,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5643:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5616:28:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 2029,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2025,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1947,
																		"src": "5648:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 2026,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "startDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2882,
																	"src": "5648:25:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"expression": {
																		"id": 2027,
																		"name": "claimParameters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1947,
																		"src": "5676:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																			"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																		}
																	},
																	"id": 2028,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2884,
																	"src": "5676:23:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"src": "5648:51:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5616:83:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f742068617665207374617274446174652067726561746572207468616e206f7220657175616c20746f20656e6444617465",
															"id": 2031,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5701:56:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_146dad66b1b90b66cf08f31cd5f1132fa61f7194c7b13b907b231b2105155f03",
																"typeString": "literal_string \"Cannot have startDate greater than or equal to endDate\""
															},
															"value": "Cannot have startDate greater than or equal to endDate"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_146dad66b1b90b66cf08f31cd5f1132fa61f7194c7b13b907b231b2105155f03",
																"typeString": "literal_string \"Cannot have startDate greater than or equal to endDate\""
															}
														],
														"id": 2020,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5608:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5608:150:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2033,
												"nodeType": "ExpressionStatement",
												"src": "5608:150:14"
											},
											{
												"expression": {
													"id": 2063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 2034,
																"name": "_claims",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1759,
																"src": "5809:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																	"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																}
															},
															"id": 2037,
															"indexExpression": {
																"id": 2035,
																"name": "creatorContractAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1942,
																"src": "5817:22:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5809:31:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
															}
														},
														"id": 2038,
														"indexExpression": {
															"id": 2036,
															"name": "claimIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1944,
															"src": "5841:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5809:43:14",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_storage",
															"typeString": "struct IERC721LazyClaim.Claim storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 2040,
																			"name": "_claims",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1759,
																			"src": "5882:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																				"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																			}
																		},
																		"id": 2042,
																		"indexExpression": {
																			"id": 2041,
																			"name": "creatorContractAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1942,
																			"src": "5890:22:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5882:31:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
																		}
																	},
																	"id": 2044,
																	"indexExpression": {
																		"id": 2043,
																		"name": "claimIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1944,
																		"src": "5914:10:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5882:43:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage",
																		"typeString": "struct IERC721LazyClaim.Claim storage ref"
																	}
																},
																"id": 2045,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "total",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2896,
																"src": "5882:49:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															{
																"expression": {
																	"id": 2046,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "5955:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2047,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "totalMax",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2878,
																"src": "5955:24:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															{
																"expression": {
																	"id": 2048,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "6004:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2049,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "walletMax",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2880,
																"src": "6004:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															{
																"expression": {
																	"id": 2050,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "6054:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "startDate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2882,
																"src": "6054:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																}
															},
															{
																"expression": {
																	"id": 2052,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "6102:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2053,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "endDate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2884,
																"src": "6102:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																}
															},
															{
																"expression": {
																	"id": 2054,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "6156:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2055,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2887,
																"src": "6156:31:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															{
																"expression": {
																	"id": 2056,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "6212:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2057,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "identical",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2889,
																"src": "6212:25:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"expression": {
																	"id": 2058,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "6263:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2059,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "merkleRoot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2891,
																"src": "6263:26:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"expression": {
																	"id": 2060,
																	"name": "claimParameters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1947,
																	"src": "6313:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
																		"typeString": "struct IERC721LazyClaim.ClaimParameters calldata"
																	}
																},
																"id": 2061,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "location",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2893,
																"src": "6313:24:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																{
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																{
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																{
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															],
															"id": 2039,
															"name": "Claim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2914,
															"src": "5855:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Claim_$2914_storage_ptr_$",
																"typeString": "type(struct IERC721LazyClaim.Claim storage pointer)"
															}
														},
														"id": 2062,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [
															"total",
															"totalMax",
															"walletMax",
															"startDate",
															"endDate",
															"storageProtocol",
															"identical",
															"merkleRoot",
															"location"
														],
														"nodeType": "FunctionCall",
														"src": "5855:493:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
															"typeString": "struct IERC721LazyClaim.Claim memory"
														}
													},
													"src": "5809:539:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"id": 2064,
												"nodeType": "ExpressionStatement",
												"src": "5809:539:14"
											}
										]
									},
									"documentation": {
										"id": 1940,
										"nodeType": "StructuredDocumentation",
										"src": "4679:54:14",
										"text": " See {IERC721LazyClaim-udpateClaim}."
									},
									"functionSelector": "1831a643",
									"id": 2066,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1951,
													"name": "creatorContractAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1942,
													"src": "4922:22:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1952,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1950,
												"name": "creatorAdminRequired",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1841,
												"src": "4901:20:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "4901:44:14"
										}
									],
									"name": "updateClaim",
									"nameLocation": "4747:11:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1949,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4892:8:14"
									},
									"parameters": {
										"id": 1948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1942,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "4776:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2066,
												"src": "4768:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4768:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1944,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "4816:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2066,
												"src": "4808:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4808:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1947,
												"mutability": "mutable",
												"name": "claimParameters",
												"nameLocation": "4861:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 2066,
												"src": "4836:40:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
													"typeString": "struct IERC721LazyClaim.ClaimParameters"
												},
												"typeName": {
													"id": 1946,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1945,
														"name": "ClaimParameters",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2894,
														"src": "4836:15:14"
													},
													"referencedDeclaration": 2894,
													"src": "4836:15:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ClaimParameters_$2894_storage_ptr",
														"typeString": "struct IERC721LazyClaim.ClaimParameters"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4758:124:14"
									},
									"returnParameters": {
										"id": 1953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4946:0:14"
									},
									"scope": 2868,
									"src": "4738:1617:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2966
									],
									"body": {
										"id": 2079,
										"nodeType": "Block",
										"src": "6517:60:14",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 2075,
														"name": "_claimCounts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1752,
														"src": "6534:12:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint224_$",
															"typeString": "mapping(address => uint224)"
														}
													},
													"id": 2077,
													"indexExpression": {
														"id": 2076,
														"name": "creatorContractAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2069,
														"src": "6547:22:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6534:36:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint224",
														"typeString": "uint224"
													}
												},
												"functionReturnParameters": 2074,
												"id": 2078,
												"nodeType": "Return",
												"src": "6527:43:14"
											}
										]
									},
									"documentation": {
										"id": 2067,
										"nodeType": "StructuredDocumentation",
										"src": "6361:56:14",
										"text": " See {IERC721LazyClaim-getClaimCount}."
									},
									"functionSelector": "d5fdfe87",
									"id": 2080,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimCount",
									"nameLocation": "6431:13:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2071,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6486:8:14"
									},
									"parameters": {
										"id": 2070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2069,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "6453:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "6445:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6445:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6444:32:14"
									},
									"returnParameters": {
										"id": 2074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2073,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "6508:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2072,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6508:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6507:9:14"
									},
									"scope": 2868,
									"src": "6422:155:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2977
									],
									"body": {
										"id": 2111,
										"nodeType": "Block",
										"src": "6754:197:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 2101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 2093,
																			"name": "_claims",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1759,
																			"src": "6772:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																				"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
																			}
																		},
																		"id": 2095,
																		"indexExpression": {
																			"id": 2094,
																			"name": "creatorContractAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2083,
																			"src": "6780:22:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6772:31:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
																		}
																	},
																	"id": 2097,
																	"indexExpression": {
																		"id": 2096,
																		"name": "claimIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2085,
																		"src": "6804:10:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6772:43:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage",
																		"typeString": "struct IERC721LazyClaim.Claim storage ref"
																	}
																},
																"id": 2098,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2907,
																"src": "6772:59:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 2099,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "6835:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 2100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "6835:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "6772:86:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436c61696d206e6f7420696e697469616c697a6564",
															"id": 2102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6860:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															},
															"value": "Claim not initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															}
														],
														"id": 2092,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6764:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6764:120:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2104,
												"nodeType": "ExpressionStatement",
												"src": "6764:120:14"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 2105,
															"name": "_claims",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "6901:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
															}
														},
														"id": 2107,
														"indexExpression": {
															"id": 2106,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "6909:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6901:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
															"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
														}
													},
													"id": 2109,
													"indexExpression": {
														"id": 2108,
														"name": "claimIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2085,
														"src": "6933:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6901:43:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"functionReturnParameters": 2091,
												"id": 2110,
												"nodeType": "Return",
												"src": "6894:50:14"
											}
										]
									},
									"documentation": {
										"id": 2081,
										"nodeType": "StructuredDocumentation",
										"src": "6583:51:14",
										"text": " See {IERC721LazyClaim-getClaim}."
									},
									"functionSelector": "0f79ab39",
									"id": 2112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getClaim",
									"nameLocation": "6648:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2087,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6718:8:14"
									},
									"parameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2083,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "6665:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2112,
												"src": "6657:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2082,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6657:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "6697:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2112,
												"src": "6689:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6689:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6656:52:14"
									},
									"returnParameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2112,
												"src": "6740:12:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
													"typeString": "struct IERC721LazyClaim.Claim"
												},
												"typeName": {
													"id": 2089,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2088,
														"name": "Claim",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2914,
														"src": "6740:5:14"
													},
													"referencedDeclaration": 2914,
													"src": "6740:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
														"typeString": "struct IERC721LazyClaim.Claim"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6739:14:14"
									},
									"scope": 2868,
									"src": "6639:312:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2989
									],
									"body": {
										"id": 2182,
										"nodeType": "Block",
										"src": "7148:525:14",
										"statements": [
											{
												"assignments": [
													2127
												],
												"declarations": [
													{
														"constant": false,
														"id": 2127,
														"mutability": "mutable",
														"name": "claim",
														"nameLocation": "7172:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2182,
														"src": "7158:19:14",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
															"typeString": "struct IERC721LazyClaim.Claim"
														},
														"typeName": {
															"id": 2126,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2125,
																"name": "Claim",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2914,
																"src": "7158:5:14"
															},
															"referencedDeclaration": 2914,
															"src": "7158:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2133,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 2128,
															"name": "_claims",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "7180:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
															}
														},
														"id": 2130,
														"indexExpression": {
															"id": 2129,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2115,
															"src": "7188:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7180:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
															"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
														}
													},
													"id": 2132,
													"indexExpression": {
														"id": 2131,
														"name": "claimIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2117,
														"src": "7212:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7180:43:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7158:65:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 2139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2135,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2127,
																	"src": "7241:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2136,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2907,
																"src": "7241:21:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 2137,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "7266:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 2138,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "7266:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "7241:48:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436c61696d206e6f7420696e697469616c697a6564",
															"id": 2140,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7291:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															},
															"value": "Claim not initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															}
														],
														"id": 2134,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7233:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7233:82:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2142,
												"nodeType": "ExpressionStatement",
												"src": "7233:82:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 2147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2144,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2127,
																	"src": "7333:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2145,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "merkleRoot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2911,
																"src": "7333:16:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "",
																"id": 2146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7353:2:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"src": "7333:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e206f6e6c7920636865636b206d65726b6c6520636c61696d73",
															"id": 2148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7357:30:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6ae859f4c318934d1c1540d470af55351546754524d10a0c41cf65079e142430",
																"typeString": "literal_string \"Can only check merkle claims\""
															},
															"value": "Can only check merkle claims"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6ae859f4c318934d1c1540d470af55351546754524d10a0c41cf65079e142430",
																"typeString": "literal_string \"Can only check merkle claims\""
															}
														],
														"id": 2143,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7325:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7325:63:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2150,
												"nodeType": "ExpressionStatement",
												"src": "7325:63:14"
											},
											{
												"assignments": [
													2152
												],
												"declarations": [
													{
														"constant": false,
														"id": 2152,
														"mutability": "mutable",
														"name": "claimMintIndex",
														"nameLocation": "7406:14:14",
														"nodeType": "VariableDeclaration",
														"scope": 2182,
														"src": "7398:22:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2151,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7398:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2156,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													},
													"id": 2155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2153,
														"name": "mintIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2119,
														"src": "7423:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">>",
													"rightExpression": {
														"hexValue": "38",
														"id": 2154,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7436:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "7423:14:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7398:39:14"
											},
											{
												"assignments": [
													2158
												],
												"declarations": [
													{
														"constant": false,
														"id": 2158,
														"mutability": "mutable",
														"name": "claimMintTracking",
														"nameLocation": "7455:17:14",
														"nodeType": "VariableDeclaration",
														"scope": 2182,
														"src": "7447:25:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2157,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7447:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2166,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 2159,
																"name": "_claimMintIndices",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1775,
																"src": "7475:17:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$",
																	"typeString": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"
																}
															},
															"id": 2161,
															"indexExpression": {
																"id": 2160,
																"name": "creatorContractAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2115,
																"src": "7493:22:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7475:41:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																"typeString": "mapping(uint256 => mapping(uint256 => uint256))"
															}
														},
														"id": 2163,
														"indexExpression": {
															"id": 2162,
															"name": "claimIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2117,
															"src": "7517:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7475:53:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 2165,
													"indexExpression": {
														"id": 2164,
														"name": "claimMintIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2152,
														"src": "7529:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7475:69:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7447:97:14"
											},
											{
												"assignments": [
													2168
												],
												"declarations": [
													{
														"constant": false,
														"id": 2168,
														"mutability": "mutable",
														"name": "mintBitmask",
														"nameLocation": "7562:11:14",
														"nodeType": "VariableDeclaration",
														"scope": 2182,
														"src": "7554:19:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2167,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7554:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2175,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2169,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7576:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2172,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2170,
																	"name": "mintIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2119,
																	"src": "7582:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2171,
																	"name": "MINT_INDEX_BITMASK",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1748,
																	"src": "7594:18:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7582:30:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2173,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7581:32:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7576:37:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7554:59:14"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2178,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2176,
															"name": "mintBitmask",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2168,
															"src": "7630:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"id": 2177,
															"name": "claimMintTracking",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2158,
															"src": "7644:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "7630:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2179,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7665:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7630:36:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2124,
												"id": 2181,
												"nodeType": "Return",
												"src": "7623:43:14"
											}
										]
									},
									"documentation": {
										"id": 2113,
										"nodeType": "StructuredDocumentation",
										"src": "6957:57:14",
										"text": " See {IERC721LazyClaim-checkMintIndex}."
									},
									"functionSelector": "cda08536",
									"id": 2183,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkMintIndex",
									"nameLocation": "7028:14:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2121,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7120:8:14"
									},
									"parameters": {
										"id": 2120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "7051:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "7043:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7043:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2117,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "7083:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "7075:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7075:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2119,
												"mutability": "mutable",
												"name": "mintIndex",
												"nameLocation": "7102:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "7095:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 2118,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7042:70:14"
									},
									"returnParameters": {
										"id": 2124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2123,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "7142:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2122,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7142:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7141:6:14"
									},
									"scope": 2868,
									"src": "7019:654:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										3003
									],
									"body": {
										"id": 2232,
										"nodeType": "Block",
										"src": "7905:214:14",
										"statements": [
											{
												"expression": {
													"id": 2205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2198,
														"name": "minted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2196,
														"src": "7915:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 2202,
																	"name": "mintIndices",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2191,
																	"src": "7935:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
																		"typeString": "uint32[] calldata"
																	}
																},
																"id": 2203,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "7935:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "7924:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (bool[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 2199,
																	"name": "bool",
																	"nodeType": "ElementaryTypeName",
																	"src": "7928:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 2200,
																"nodeType": "ArrayTypeName",
																"src": "7928:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
																	"typeString": "bool[]"
																}
															}
														},
														"id": 2204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7924:30:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"src": "7915:39:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
														"typeString": "bool[] memory"
													}
												},
												"id": 2206,
												"nodeType": "ExpressionStatement",
												"src": "7915:39:14"
											},
											{
												"body": {
													"id": 2230,
													"nodeType": "Block",
													"src": "8010:103:14",
													"statements": [
														{
															"expression": {
																"id": 2228,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2218,
																		"name": "minted",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2196,
																		"src": "8024:6:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 2220,
																	"indexExpression": {
																		"id": 2219,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2208,
																		"src": "8031:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "8024:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 2222,
																			"name": "creatorContractAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2186,
																			"src": "8051:22:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2223,
																			"name": "claimIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2188,
																			"src": "8075:10:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 2224,
																				"name": "mintIndices",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2191,
																				"src": "8087:11:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
																					"typeString": "uint32[] calldata"
																				}
																			},
																			"id": 2226,
																			"indexExpression": {
																				"id": 2225,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2208,
																				"src": "8099:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "8087:14:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		],
																		"id": 2221,
																		"name": "checkMintIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2183,
																		"src": "8036:14:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint32_$returns$_t_bool_$",
																			"typeString": "function (address,uint256,uint32) view returns (bool)"
																		}
																	},
																	"id": 2227,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8036:66:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "8024:78:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2229,
															"nodeType": "ExpressionStatement",
															"src": "8024:78:14"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2211,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2208,
														"src": "7981:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 2212,
															"name": "mintIndices",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2191,
															"src": "7985:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
																"typeString": "uint32[] calldata"
															}
														},
														"id": 2213,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7985:18:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7981:22:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2231,
												"initializationExpression": {
													"assignments": [
														2208
													],
													"declarations": [
														{
															"constant": false,
															"id": 2208,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "7974:1:14",
															"nodeType": "VariableDeclaration",
															"scope": 2231,
															"src": "7969:6:14",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2207,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "7969:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2210,
													"initialValue": {
														"hexValue": "30",
														"id": 2209,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7978:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "7969:10:14"
												},
												"loopExpression": {
													"expression": {
														"id": 2216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "8005:3:14",
														"subExpression": {
															"id": 2215,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2208,
															"src": "8005:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2217,
													"nodeType": "ExpressionStatement",
													"src": "8005:3:14"
												},
												"nodeType": "ForStatement",
												"src": "7964:149:14"
											}
										]
									},
									"documentation": {
										"id": 2184,
										"nodeType": "StructuredDocumentation",
										"src": "7679:59:14",
										"text": " See {IERC721LazyClaim-checkMintIndices}."
									},
									"functionSelector": "f8a6137b",
									"id": 2233,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkMintIndices",
									"nameLocation": "7752:16:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2193,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7861:8:14"
									},
									"parameters": {
										"id": 2192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2186,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "7777:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "7769:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7769:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2188,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "7809:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "7801:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7801:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2191,
												"mutability": "mutable",
												"name": "mintIndices",
												"nameLocation": "7839:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "7821:29:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2189,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "7821:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 2190,
													"nodeType": "ArrayTypeName",
													"src": "7821:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7768:83:14"
									},
									"returnParameters": {
										"id": 2197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2196,
												"mutability": "mutable",
												"name": "minted",
												"nameLocation": "7897:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "7883:20:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 2194,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "7883:4:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 2195,
													"nodeType": "ArrayTypeName",
													"src": "7883:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7882:22:14"
									},
									"scope": 2868,
									"src": "7743:376:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										3015
									],
									"body": {
										"id": 2283,
										"nodeType": "Block",
										"src": "8316:356:14",
										"statements": [
											{
												"assignments": [
													2248
												],
												"declarations": [
													{
														"constant": false,
														"id": 2248,
														"mutability": "mutable",
														"name": "claim",
														"nameLocation": "8340:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2283,
														"src": "8326:19:14",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
															"typeString": "struct IERC721LazyClaim.Claim"
														},
														"typeName": {
															"id": 2247,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2246,
																"name": "Claim",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2914,
																"src": "8326:5:14"
															},
															"referencedDeclaration": 2914,
															"src": "8326:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2254,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 2249,
															"name": "_claims",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "8348:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
															}
														},
														"id": 2251,
														"indexExpression": {
															"id": 2250,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "8356:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "8348:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
															"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
														}
													},
													"id": 2253,
													"indexExpression": {
														"id": 2252,
														"name": "claimIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2240,
														"src": "8380:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8348:43:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8326:65:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 2260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2256,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2248,
																	"src": "8409:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2257,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2907,
																"src": "8409:21:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 2258,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "8434:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 2259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "8434:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "8409:48:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436c61696d206e6f7420696e697469616c697a6564",
															"id": 2261,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8459:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															},
															"value": "Claim not initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															}
														],
														"id": 2255,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8401:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8401:82:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2263,
												"nodeType": "ExpressionStatement",
												"src": "8401:82:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 2268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2265,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2248,
																	"src": "8501:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2266,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "walletMax",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2900,
																"src": "8501:15:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 2267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8520:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8501:20:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e206f6e6c7920726574726965766520666f72206e6f6e2d6d65726b6c6520636c61696d7320776974682077616c6c65744d6178",
															"id": 2269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8523:56:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_aade674a50c17e6c9b1a3f4b46576d7560de13880fef977bd2209416b8046908",
																"typeString": "literal_string \"Can only retrieve for non-merkle claims with walletMax\""
															},
															"value": "Can only retrieve for non-merkle claims with walletMax"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_aade674a50c17e6c9b1a3f4b46576d7560de13880fef977bd2209416b8046908",
																"typeString": "literal_string \"Can only retrieve for non-merkle claims with walletMax\""
															}
														],
														"id": 2264,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8493:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8493:87:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2271,
												"nodeType": "ExpressionStatement",
												"src": "8493:87:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 2274,
																		"name": "_mintsPerWallet",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1767,
																		"src": "8605:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$_$",
																			"typeString": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
																		}
																	},
																	"id": 2276,
																	"indexExpression": {
																		"id": 2275,
																		"name": "creatorContractAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2238,
																		"src": "8621:22:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8605:39:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																		"typeString": "mapping(uint256 => mapping(address => uint256))"
																	}
																},
																"id": 2278,
																"indexExpression": {
																	"id": 2277,
																	"name": "claimIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2240,
																	"src": "8645:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8605:51:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 2280,
															"indexExpression": {
																"id": 2279,
																"name": "minter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2236,
																"src": "8657:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8605:59:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2273,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8598:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint32_$",
															"typeString": "type(uint32)"
														},
														"typeName": {
															"id": 2272,
															"name": "uint32",
															"nodeType": "ElementaryTypeName",
															"src": "8598:6:14",
															"typeDescriptions": {}
														}
													},
													"id": 2281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8598:67:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"functionReturnParameters": 2245,
												"id": 2282,
												"nodeType": "Return",
												"src": "8590:75:14"
											}
										]
									},
									"documentation": {
										"id": 2234,
										"nodeType": "StructuredDocumentation",
										"src": "8125:56:14",
										"text": " See {IERC721LazyClaim-getTotalMints}."
									},
									"functionSelector": "42f3bef4",
									"id": 2284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalMints",
									"nameLocation": "8195:13:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2242,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8286:8:14"
									},
									"parameters": {
										"id": 2241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "minter",
												"nameLocation": "8217:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2284,
												"src": "8209:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8209:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "8233:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2284,
												"src": "8225:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8225:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2240,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "8265:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2284,
												"src": "8257:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8257:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8208:68:14"
									},
									"returnParameters": {
										"id": 2245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2244,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2284,
												"src": "8308:6:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 2243,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "8308:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8307:8:14"
									},
									"scope": 2868,
									"src": "8186:486:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										3028
									],
									"body": {
										"id": 2441,
										"nodeType": "Block",
										"src": "8864:1542:14",
										"statements": [
											{
												"assignments": [
													2300
												],
												"declarations": [
													{
														"constant": false,
														"id": 2300,
														"mutability": "mutable",
														"name": "claim",
														"nameLocation": "8888:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2441,
														"src": "8874:19:14",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
															"typeString": "struct IERC721LazyClaim.Claim"
														},
														"typeName": {
															"id": 2299,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2298,
																"name": "Claim",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2914,
																"src": "8874:5:14"
															},
															"referencedDeclaration": 2914,
															"src": "8874:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2306,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 2301,
															"name": "_claims",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "8896:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
															}
														},
														"id": 2303,
														"indexExpression": {
															"id": 2302,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2287,
															"src": "8904:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "8896:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
															"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
														}
													},
													"id": 2305,
													"indexExpression": {
														"id": 2304,
														"name": "claimIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2289,
														"src": "8928:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8896:43:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8874:65:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 2312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2308,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2300,
																	"src": "8994:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2309,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2907,
																"src": "8994:21:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 2310,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "9019:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 2311,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "9019:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "8994:48:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436c61696d206e6f7420696e697469616c697a6564",
															"id": 2313,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9044:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															},
															"value": "Claim not initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															}
														],
														"id": 2307,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8986:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8986:82:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2315,
												"nodeType": "ExpressionStatement",
												"src": "8986:82:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2326,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 2320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2317,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9115:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2318,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "startDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2902,
																	"src": "9115:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9134:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9115:20:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2325,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2321,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9139:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2322,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "startDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2902,
																	"src": "9139:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"expression": {
																		"id": 2323,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "9157:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "9157:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9139:33:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9115:57:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e73616374696f6e206265666f72652073746172742064617465",
															"id": 2327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9174:31:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a73c9cbdd36b84e32f3134c03a48a3cb66257f6d282e484e7987fa4b9858350",
																"typeString": "literal_string \"Transaction before start date\""
															},
															"value": "Transaction before start date"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a73c9cbdd36b84e32f3134c03a48a3cb66257f6d282e484e7987fa4b9858350",
																"typeString": "literal_string \"Transaction before start date\""
															}
														],
														"id": 2316,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9107:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9107:99:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2329,
												"nodeType": "ExpressionStatement",
												"src": "9107:99:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2340,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 2334,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2331,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9224:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2332,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2904,
																	"src": "9224:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9241:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9224:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2335,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9246:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2336,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2904,
																	"src": "9246:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"expression": {
																		"id": 2337,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "9263:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "9263:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9246:32:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9224:54:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e73616374696f6e20616674657220656e642064617465",
															"id": 2341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9280:28:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f1e3325b95d8cd383ede03396ff57664e987cafe112e517ad4d28993393d304f",
																"typeString": "literal_string \"Transaction after end date\""
															},
															"value": "Transaction after end date"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f1e3325b95d8cd383ede03396ff57664e987cafe112e517ad4d28993393d304f",
																"typeString": "literal_string \"Transaction after end date\""
															}
														],
														"id": 2330,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9216:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9216:93:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2343,
												"nodeType": "ExpressionStatement",
												"src": "9216:93:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2348,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2345,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9354:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2346,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2898,
																	"src": "9354:14:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2347,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9372:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9354:19:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2353,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2349,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9377:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2350,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "total",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2896,
																	"src": "9377:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"expression": {
																		"id": 2351,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9391:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2352,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2898,
																	"src": "9391:14:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "9377:28:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9354:51:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f72207468697320636c61696d",
															"id": 2355,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9407:46:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ba5e5dec206d197966e9ab456bd2bee43d54c19e2e749c630df6c82053139ca1",
																"typeString": "literal_string \"Maximum tokens already minted for this claim\""
															},
															"value": "Maximum tokens already minted for this claim"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ba5e5dec206d197966e9ab456bd2bee43d54c19e2e749c630df6c82053139ca1",
																"typeString": "literal_string \"Maximum tokens already minted for this claim\""
															}
														],
														"id": 2344,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9346:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9346:108:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2357,
												"nodeType": "ExpressionStatement",
												"src": "9346:108:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 2361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2358,
															"name": "claim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2300,
															"src": "9469:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim storage pointer"
															}
														},
														"id": 2359,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "merkleRoot",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2911,
														"src": "9469:16:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "",
														"id": 2360,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9489:2:14",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"src": "9469:22:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2403,
													"nodeType": "Block",
													"src": "9639:349:14",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2374,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2371,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9688:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2372,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "walletMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2900,
																	"src": "9688:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2373,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9707:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9688:20:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2402,
															"nodeType": "IfStatement",
															"src": "9684:294:14",
															"trueBody": {
																"id": 2401,
																"nodeType": "Block",
																"src": "9710:268:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2386,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"baseExpression": {
																							"baseExpression": {
																								"baseExpression": {
																									"id": 2376,
																									"name": "_mintsPerWallet",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1767,
																									"src": "9736:15:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$_$",
																										"typeString": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
																									}
																								},
																								"id": 2378,
																								"indexExpression": {
																									"id": 2377,
																									"name": "creatorContractAddress",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2287,
																									"src": "9752:22:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "9736:39:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																									"typeString": "mapping(uint256 => mapping(address => uint256))"
																								}
																							},
																							"id": 2380,
																							"indexExpression": {
																								"id": 2379,
																								"name": "claimIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2289,
																								"src": "9776:10:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "9736:51:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 2383,
																						"indexExpression": {
																							"expression": {
																								"id": 2381,
																								"name": "msg",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967281,
																								"src": "9788:3:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_message",
																									"typeString": "msg"
																								}
																							},
																							"id": 2382,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "sender",
																							"nodeType": "MemberAccess",
																							"src": "9788:10:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "9736:63:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<",
																					"rightExpression": {
																						"expression": {
																							"id": 2384,
																							"name": "claim",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2300,
																							"src": "9802:5:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																								"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																							}
																						},
																						"id": 2385,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "walletMax",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2900,
																						"src": "9802:15:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint32",
																							"typeString": "uint32"
																						}
																					},
																					"src": "9736:81:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "4d6178696d756d20746f6b656e7320616c7265616479206d696e74656420666f7220746869732077616c6c6574",
																					"id": 2387,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9819:47:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_c5e312a2cbf4118be2a78426cfed7bc7e02e5fe6558e638fd8ea454df9a21590",
																						"typeString": "literal_string \"Maximum tokens already minted for this wallet\""
																					},
																					"value": "Maximum tokens already minted for this wallet"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_c5e312a2cbf4118be2a78426cfed7bc7e02e5fe6558e638fd8ea454df9a21590",
																						"typeString": "literal_string \"Maximum tokens already minted for this wallet\""
																					}
																				],
																				"id": 2375,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "9728:7:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 2388,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9728:139:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2389,
																		"nodeType": "ExpressionStatement",
																		"src": "9728:139:14"
																	},
																	{
																		"id": 2400,
																		"nodeType": "UncheckedBlock",
																		"src": "9885:79:14",
																		"statements": [
																			{
																				"expression": {
																					"id": 2398,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "9896:65:14",
																					"subExpression": {
																						"baseExpression": {
																							"baseExpression": {
																								"baseExpression": {
																									"id": 2390,
																									"name": "_mintsPerWallet",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1767,
																									"src": "9896:15:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$_$",
																										"typeString": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
																									}
																								},
																								"id": 2395,
																								"indexExpression": {
																									"id": 2391,
																									"name": "creatorContractAddress",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2287,
																									"src": "9912:22:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "9896:39:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																									"typeString": "mapping(uint256 => mapping(address => uint256))"
																								}
																							},
																							"id": 2396,
																							"indexExpression": {
																								"id": 2392,
																								"name": "claimIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2289,
																								"src": "9936:10:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "9896:51:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 2397,
																						"indexExpression": {
																							"expression": {
																								"id": 2393,
																								"name": "msg",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967281,
																								"src": "9948:3:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_message",
																									"typeString": "msg"
																								}
																							},
																							"id": 2394,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "sender",
																							"nodeType": "MemberAccess",
																							"src": "9948:10:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "9896:63:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 2399,
																				"nodeType": "ExpressionStatement",
																				"src": "9896:65:14"
																			}
																		]
																	}
																]
															}
														}
													]
												},
												"id": 2404,
												"nodeType": "IfStatement",
												"src": "9465:523:14",
												"trueBody": {
													"id": 2370,
													"nodeType": "Block",
													"src": "9493:140:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2363,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2300,
																		"src": "9556:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	{
																		"id": 2364,
																		"name": "creatorContractAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2287,
																		"src": "9563:22:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2365,
																		"name": "claimIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2289,
																		"src": "9587:10:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2366,
																		"name": "mintIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2291,
																		"src": "9599:9:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	{
																		"id": 2367,
																		"name": "merkleProof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2294,
																		"src": "9610:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		},
																		{
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	],
																	"id": 2362,
																	"name": "_checkMerkleAndUpdate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2767,
																	"src": "9534:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Claim_$2914_storage_ptr_$_t_address_$_t_uint256_$_t_uint32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$",
																		"typeString": "function (struct IERC721LazyClaim.Claim storage pointer,address,uint256,uint32,bytes32[] memory)"
																	}
																},
																"id": 2368,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9534:88:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2369,
															"nodeType": "ExpressionStatement",
															"src": "9534:88:14"
														}
													]
												}
											},
											{
												"id": 2410,
												"nodeType": "UncheckedBlock",
												"src": "9997:27:14",
												"statements": [
													{
														"expression": {
															"id": 2408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "10008:13:14",
															"subExpression": {
																"expression": {
																	"id": 2405,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2300,
																	"src": "10008:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2407,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "total",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2896,
																"src": "10008:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"id": 2409,
														"nodeType": "ExpressionStatement",
														"src": "10008:13:14"
													}
												]
											},
											{
												"assignments": [
													2412
												],
												"declarations": [
													{
														"constant": false,
														"id": 2412,
														"mutability": "mutable",
														"name": "newTokenId",
														"nameLocation": "10061:10:14",
														"nodeType": "VariableDeclaration",
														"scope": 2441,
														"src": "10053:18:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2411,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10053:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2420,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 2417,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "10131:3:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "10131:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2414,
																	"name": "creatorContractAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2287,
																	"src": "10093:22:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2413,
																"name": "IERC721CreatorCore",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 372,
																"src": "10074:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721CreatorCore_$372_$",
																	"typeString": "type(contract IERC721CreatorCore)"
																}
															},
															"id": 2415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10074:42:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721CreatorCore_$372",
																"typeString": "contract IERC721CreatorCore"
															}
														},
														"id": 2416,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mintExtension",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 332,
														"src": "10074:56:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) external returns (uint256)"
														}
													},
													"id": 2419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10074:68:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10053:89:14"
											},
											{
												"expression": {
													"id": 2434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 2421,
																"name": "_tokenClaims",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1787,
																"src": "10243:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$_$",
																	"typeString": "mapping(address => mapping(uint256 => struct ERC721LazyClaim.TokenClaim storage ref))"
																}
															},
															"id": 2424,
															"indexExpression": {
																"id": 2422,
																"name": "creatorContractAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2287,
																"src": "10256:22:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10243:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$",
																"typeString": "mapping(uint256 => struct ERC721LazyClaim.TokenClaim storage ref)"
															}
														},
														"id": 2425,
														"indexExpression": {
															"id": 2423,
															"name": "newTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2412,
															"src": "10280:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10243:48:14",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenClaim_$1780_storage",
															"typeString": "struct ERC721LazyClaim.TokenClaim storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2429,
																		"name": "claimIndex",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2289,
																		"src": "10313:10:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10305:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint224_$",
																		"typeString": "type(uint224)"
																	},
																	"typeName": {
																		"id": 2427,
																		"name": "uint224",
																		"nodeType": "ElementaryTypeName",
																		"src": "10305:7:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10305:19:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint224",
																	"typeString": "uint224"
																}
															},
															{
																"expression": {
																	"id": 2431,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2300,
																	"src": "10326:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2432,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "total",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2896,
																"src": "10326:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint224",
																	"typeString": "uint224"
																},
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															],
															"id": 2426,
															"name": "TokenClaim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1780,
															"src": "10294:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_TokenClaim_$1780_storage_ptr_$",
																"typeString": "type(struct ERC721LazyClaim.TokenClaim storage pointer)"
															}
														},
														"id": 2433,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10294:44:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenClaim_$1780_memory_ptr",
															"typeString": "struct ERC721LazyClaim.TokenClaim memory"
														}
													},
													"src": "10243:95:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenClaim_$1780_storage",
														"typeString": "struct ERC721LazyClaim.TokenClaim storage ref"
													}
												},
												"id": 2435,
												"nodeType": "ExpressionStatement",
												"src": "10243:95:14"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2437,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2287,
															"src": "10364:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2438,
															"name": "claimIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2289,
															"src": "10388:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2436,
														"name": "ClaimMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2928,
														"src": "10354:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10354:45:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2440,
												"nodeType": "EmitStatement",
												"src": "10349:50:14"
											}
										]
									},
									"documentation": {
										"id": 2285,
										"nodeType": "StructuredDocumentation",
										"src": "8678:47:14",
										"text": " See {IERC721LazyClaim-mint}."
									},
									"functionSelector": "bbf2a8c6",
									"id": 2442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "8739:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2296,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8855:8:14"
									},
									"parameters": {
										"id": 2295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2287,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "8752:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2442,
												"src": "8744:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8744:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2289,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "8784:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2442,
												"src": "8776:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8776:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "mintIndex",
												"nameLocation": "8803:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2442,
												"src": "8796:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 2290,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "8796:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2294,
												"mutability": "mutable",
												"name": "merkleProof",
												"nameLocation": "8833:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2442,
												"src": "8814:30:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2292,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "8814:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2293,
													"nodeType": "ArrayTypeName",
													"src": "8814:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8743:102:14"
									},
									"returnParameters": {
										"id": 2297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8864:0:14"
									},
									"scope": 2868,
									"src": "8730:1676:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										3045
									],
									"body": {
										"id": 2681,
										"nodeType": "Block",
										"src": "10642:2016:14",
										"statements": [
											{
												"assignments": [
													2462
												],
												"declarations": [
													{
														"constant": false,
														"id": 2462,
														"mutability": "mutable",
														"name": "claim",
														"nameLocation": "10666:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2681,
														"src": "10652:19:14",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
															"typeString": "struct IERC721LazyClaim.Claim"
														},
														"typeName": {
															"id": 2461,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2460,
																"name": "Claim",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2914,
																"src": "10652:5:14"
															},
															"referencedDeclaration": 2914,
															"src": "10652:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2468,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 2463,
															"name": "_claims",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "10674:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
															}
														},
														"id": 2465,
														"indexExpression": {
															"id": 2464,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2445,
															"src": "10682:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "10674:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
															"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
														}
													},
													"id": 2467,
													"indexExpression": {
														"id": 2466,
														"name": "claimIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2447,
														"src": "10706:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10674:43:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10652:65:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															},
															"id": 2474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2470,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2462,
																	"src": "10781:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2471,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "storageProtocol",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2907,
																"src": "10781:21:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 2472,
																	"name": "StorageProtocol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2876,
																	"src": "10806:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																		"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																	}
																},
																"id": 2473,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "INVALID",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2872,
																"src": "10806:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																	"typeString": "enum IERC721LazyClaim.StorageProtocol"
																}
															},
															"src": "10781:48:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436c61696d206e6f7420696e697469616c697a6564",
															"id": 2475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10831:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															},
															"value": "Claim not initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8a79c35acd4de6fb2f4e68d2dce8994a95d50cee5673008fdd576d1ba1ae53d9",
																"typeString": "literal_string \"Claim not initialized\""
															}
														],
														"id": 2469,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10773:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10773:82:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2477,
												"nodeType": "ExpressionStatement",
												"src": "10773:82:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2488,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 2482,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2479,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2462,
																		"src": "10902:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2480,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "startDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2902,
																	"src": "10902:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2481,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10921:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10902:20:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2483,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2462,
																		"src": "10926:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2484,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "startDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2902,
																	"src": "10926:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"expression": {
																		"id": 2485,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10944:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10944:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10926:33:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "10902:57:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e73616374696f6e206265666f72652073746172742064617465",
															"id": 2489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10961:31:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a73c9cbdd36b84e32f3134c03a48a3cb66257f6d282e484e7987fa4b9858350",
																"typeString": "literal_string \"Transaction before start date\""
															},
															"value": "Transaction before start date"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a73c9cbdd36b84e32f3134c03a48a3cb66257f6d282e484e7987fa4b9858350",
																"typeString": "literal_string \"Transaction before start date\""
															}
														],
														"id": 2478,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10894:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10894:99:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2491,
												"nodeType": "ExpressionStatement",
												"src": "10894:99:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2502,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																},
																"id": 2496,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2493,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2462,
																		"src": "11011:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2494,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2904,
																	"src": "11011:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11028:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11011:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2497,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2462,
																		"src": "11033:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2498,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "endDate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2904,
																	"src": "11033:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint48",
																		"typeString": "uint48"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"expression": {
																		"id": 2499,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "11050:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2500,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "11050:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "11033:32:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "11011:54:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e73616374696f6e20616674657220656e642064617465",
															"id": 2503,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11067:28:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f1e3325b95d8cd383ede03396ff57664e987cafe112e517ad4d28993393d304f",
																"typeString": "literal_string \"Transaction after end date\""
															},
															"value": "Transaction after end date"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f1e3325b95d8cd383ede03396ff57664e987cafe112e517ad4d28993393d304f",
																"typeString": "literal_string \"Transaction after end date\""
															}
														],
														"id": 2492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11003:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11003:93:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2505,
												"nodeType": "ExpressionStatement",
												"src": "11003:93:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2507,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2462,
																		"src": "11141:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2508,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2898,
																	"src": "11141:14:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2509,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11159:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11141:19:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2517,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	},
																	"id": 2514,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 2511,
																			"name": "claim",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2462,
																			"src": "11164:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																				"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																			}
																		},
																		"id": 2512,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "total",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2896,
																		"src": "11164:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 2513,
																		"name": "mintCount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2449,
																		"src": "11176:9:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint16",
																			"typeString": "uint16"
																		}
																	},
																	"src": "11164:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"expression": {
																		"id": 2515,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2462,
																		"src": "11189:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2516,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "totalMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2898,
																	"src": "11189:14:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"src": "11164:39:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "11141:62:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206d616e792072657175657374656420666f72207468697320636c61696d",
															"id": 2519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11205:35:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6bec182c6648e90b34719fa5b642f9790a766997d7be738e340e7c43012f6516",
																"typeString": "literal_string \"Too many requested for this claim\""
															},
															"value": "Too many requested for this claim"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6bec182c6648e90b34719fa5b642f9790a766997d7be738e340e7c43012f6516",
																"typeString": "literal_string \"Too many requested for this claim\""
															}
														],
														"id": 2506,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11133:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11133:108:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2521,
												"nodeType": "ExpressionStatement",
												"src": "11133:108:14"
											},
											{
												"assignments": [
													2523
												],
												"declarations": [
													{
														"constant": false,
														"id": 2523,
														"mutability": "mutable",
														"name": "newMintIndex",
														"nameLocation": "11268:12:14",
														"nodeType": "VariableDeclaration",
														"scope": 2681,
														"src": "11260:20:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2522,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11260:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2528,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													},
													"id": 2527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2524,
															"name": "claim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2462,
															"src": "11283:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim storage pointer"
															}
														},
														"id": 2525,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "total",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2896,
														"src": "11283:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 2526,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11295:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "11283:13:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11260:36:14"
											},
											{
												"id": 2535,
												"nodeType": "UncheckedBlock",
												"src": "11306:38:14",
												"statements": [
													{
														"expression": {
															"id": 2533,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2529,
																	"name": "claim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2462,
																	"src": "11317:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																		"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																	}
																},
																"id": 2531,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "total",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2896,
																"src": "11317:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 2532,
																"name": "mintCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2449,
																"src": "11332:9:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															"src": "11317:24:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"id": 2534,
														"nodeType": "ExpressionStatement",
														"src": "11317:24:14"
													}
												]
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 2539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2536,
															"name": "claim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2462,
															"src": "11358:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim storage pointer"
															}
														},
														"id": 2537,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "merkleRoot",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2911,
														"src": "11358:16:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "",
														"id": 2538,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11378:2:14",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"src": "11358:22:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2625,
													"nodeType": "Block",
													"src": "11868:373:14",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																"id": 2593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2590,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2462,
																		"src": "11917:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2591,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "walletMax",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2900,
																	"src": "11917:15:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11936:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11917:20:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2624,
															"nodeType": "IfStatement",
															"src": "11913:305:14",
															"trueBody": {
																"id": 2623,
																"nodeType": "Block",
																"src": "11939:279:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2607,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 2604,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"baseExpression": {
																								"baseExpression": {
																									"baseExpression": {
																										"id": 2595,
																										"name": "_mintsPerWallet",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1767,
																										"src": "11965:15:14",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$_$",
																											"typeString": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
																										}
																									},
																									"id": 2597,
																									"indexExpression": {
																										"id": 2596,
																										"name": "creatorContractAddress",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2445,
																										"src": "11981:22:14",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "11965:39:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																										"typeString": "mapping(uint256 => mapping(address => uint256))"
																									}
																								},
																								"id": 2599,
																								"indexExpression": {
																									"id": 2598,
																									"name": "claimIndex",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2447,
																									"src": "12005:10:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "11965:51:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																									"typeString": "mapping(address => uint256)"
																								}
																							},
																							"id": 2602,
																							"indexExpression": {
																								"expression": {
																									"id": 2600,
																									"name": "msg",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967281,
																									"src": "12017:3:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_magic_message",
																										"typeString": "msg"
																									}
																								},
																								"id": 2601,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "sender",
																								"nodeType": "MemberAccess",
																								"src": "12017:10:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "11965:63:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"id": 2603,
																							"name": "mintCount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2449,
																							"src": "12029:9:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint16",
																								"typeString": "uint16"
																							}
																						},
																						"src": "11965:73:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<=",
																					"rightExpression": {
																						"expression": {
																							"id": 2605,
																							"name": "claim",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2462,
																							"src": "12042:5:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																								"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																							}
																						},
																						"id": 2606,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "walletMax",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2900,
																						"src": "12042:15:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint32",
																							"typeString": "uint32"
																						}
																					},
																					"src": "11965:92:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "546f6f206d616e792072657175657374656420666f7220746869732077616c6c6574",
																					"id": 2608,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "12059:36:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_690ad167d9c0d18045f3238b8710ea874d83a5730ad53646f5b32f7026999ef5",
																						"typeString": "literal_string \"Too many requested for this wallet\""
																					},
																					"value": "Too many requested for this wallet"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_690ad167d9c0d18045f3238b8710ea874d83a5730ad53646f5b32f7026999ef5",
																						"typeString": "literal_string \"Too many requested for this wallet\""
																					}
																				],
																				"id": 2594,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "11957:7:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 2609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11957:139:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2610,
																		"nodeType": "ExpressionStatement",
																		"src": "11957:139:14"
																	},
																	{
																		"id": 2622,
																		"nodeType": "UncheckedBlock",
																		"src": "12114:90:14",
																		"statements": [
																			{
																				"expression": {
																					"id": 2620,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"baseExpression": {
																							"baseExpression": {
																								"baseExpression": {
																									"id": 2611,
																									"name": "_mintsPerWallet",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1767,
																									"src": "12125:15:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$_$",
																										"typeString": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
																									}
																								},
																								"id": 2616,
																								"indexExpression": {
																									"id": 2612,
																									"name": "creatorContractAddress",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2445,
																									"src": "12141:22:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "12125:39:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																									"typeString": "mapping(uint256 => mapping(address => uint256))"
																								}
																							},
																							"id": 2617,
																							"indexExpression": {
																								"id": 2613,
																								"name": "claimIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2447,
																								"src": "12165:10:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "12125:51:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																								"typeString": "mapping(address => uint256)"
																							}
																						},
																						"id": 2618,
																						"indexExpression": {
																							"expression": {
																								"id": 2614,
																								"name": "msg",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967281,
																								"src": "12177:3:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_message",
																									"typeString": "msg"
																								}
																							},
																							"id": 2615,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "sender",
																							"nodeType": "MemberAccess",
																							"src": "12177:10:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"nodeType": "IndexAccess",
																						"src": "12125:63:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "+=",
																					"rightHandSide": {
																						"id": 2619,
																						"name": "mintCount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2449,
																						"src": "12192:9:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint16",
																							"typeString": "uint16"
																						}
																					},
																					"src": "12125:76:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 2621,
																				"nodeType": "ExpressionStatement",
																				"src": "12125:76:14"
																			}
																		]
																	}
																]
															}
														}
													]
												},
												"id": 2626,
												"nodeType": "IfStatement",
												"src": "11354:887:14",
												"trueBody": {
													"id": 2589,
													"nodeType": "Block",
													"src": "11382:480:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2549,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2544,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2541,
																				"name": "mintCount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2449,
																				"src": "11404:9:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"expression": {
																					"id": 2542,
																					"name": "mintIndices",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2452,
																					"src": "11417:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
																						"typeString": "uint32[] calldata"
																					}
																				},
																				"id": 2543,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "11417:18:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "11404:31:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2545,
																				"name": "mintCount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2449,
																				"src": "11439:9:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint16",
																					"typeString": "uint16"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"expression": {
																					"id": 2546,
																					"name": "merkleProofs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2456,
																					"src": "11452:12:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr",
																						"typeString": "bytes32[] calldata[] calldata"
																					}
																				},
																				"id": 2547,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "11452:19:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "11439:32:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "11404:67:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e76616c696420696e707574",
																		"id": 2550,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11473:15:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b",
																			"typeString": "literal_string \"Invalid input\""
																		},
																		"value": "Invalid input"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b",
																			"typeString": "literal_string \"Invalid input\""
																		}
																	],
																	"id": 2540,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11396:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11396:93:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2552,
															"nodeType": "ExpressionStatement",
															"src": "11396:93:14"
														},
														{
															"body": {
																"id": 2587,
																"nodeType": "Block",
																"src": "11564:288:14",
																"statements": [
																	{
																		"assignments": [
																			2561
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 2561,
																				"mutability": "mutable",
																				"name": "mintIndex",
																				"nameLocation": "11589:9:14",
																				"nodeType": "VariableDeclaration",
																				"scope": 2587,
																				"src": "11582:16:14",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint32",
																					"typeString": "uint32"
																				},
																				"typeName": {
																					"id": 2560,
																					"name": "uint32",
																					"nodeType": "ElementaryTypeName",
																					"src": "11582:6:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint32",
																						"typeString": "uint32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 2565,
																		"initialValue": {
																			"baseExpression": {
																				"id": 2562,
																				"name": "mintIndices",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2452,
																				"src": "11601:11:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
																					"typeString": "uint32[] calldata"
																				}
																			},
																			"id": 2564,
																			"indexExpression": {
																				"id": 2563,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2554,
																				"src": "11613:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "11601:14:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "11582:33:14"
																	},
																	{
																		"assignments": [
																			2570
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 2570,
																				"mutability": "mutable",
																				"name": "merkleProof",
																				"nameLocation": "11650:11:14",
																				"nodeType": "VariableDeclaration",
																				"scope": 2587,
																				"src": "11633:28:14",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[]"
																				},
																				"typeName": {
																					"baseType": {
																						"id": 2568,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "11633:7:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					"id": 2569,
																					"nodeType": "ArrayTypeName",
																					"src": "11633:9:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																						"typeString": "bytes32[]"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 2574,
																		"initialValue": {
																			"baseExpression": {
																				"id": 2571,
																				"name": "merkleProofs",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2456,
																				"src": "11664:12:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata[] calldata"
																				}
																			},
																			"id": 2573,
																			"indexExpression": {
																				"id": 2572,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2554,
																				"src": "11677:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "11664:15:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																				"typeString": "bytes32[] calldata"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "11633:46:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 2576,
																					"name": "claim",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2462,
																					"src": "11736:5:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																						"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																					}
																				},
																				{
																					"id": 2577,
																					"name": "creatorContractAddress",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2445,
																					"src": "11743:22:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 2578,
																					"name": "claimIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2447,
																					"src": "11767:10:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 2579,
																					"name": "mintIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2561,
																					"src": "11779:9:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint32",
																						"typeString": "uint32"
																					}
																				},
																				{
																					"id": 2580,
																					"name": "merkleProof",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2570,
																					"src": "11790:11:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																						"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint32",
																						"typeString": "uint32"
																					},
																					{
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				],
																				"id": 2575,
																				"name": "_checkMerkleAndUpdate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2767,
																				"src": "11714:21:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Claim_$2914_storage_ptr_$_t_address_$_t_uint256_$_t_uint32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$",
																					"typeString": "function (struct IERC721LazyClaim.Claim storage pointer,address,uint256,uint32,bytes32[] memory)"
																				}
																			},
																			"id": 2581,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11714:88:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2582,
																		"nodeType": "ExpressionStatement",
																		"src": "11714:88:14"
																	},
																	{
																		"id": 2586,
																		"nodeType": "UncheckedBlock",
																		"src": "11820:18:14",
																		"statements": [
																			{
																				"expression": {
																					"id": 2584,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "11832:3:14",
																					"subExpression": {
																						"id": 2583,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2554,
																						"src": "11832:1:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 2585,
																				"nodeType": "ExpressionStatement",
																				"src": "11832:3:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2559,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2557,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2554,
																	"src": "11547:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2558,
																	"name": "mintCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2449,
																	"src": "11551:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	}
																},
																"src": "11547:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2588,
															"initializationExpression": {
																"assignments": [
																	2554
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 2554,
																		"mutability": "mutable",
																		"name": "i",
																		"nameLocation": "11540:1:14",
																		"nodeType": "VariableDeclaration",
																		"scope": 2588,
																		"src": "11535:6:14",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"typeName": {
																			"id": 2553,
																			"name": "uint",
																			"nodeType": "ElementaryTypeName",
																			"src": "11535:4:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 2556,
																"initialValue": {
																	"hexValue": "30",
																	"id": 2555,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11544:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "11535:10:14"
															},
															"nodeType": "ForStatement",
															"src": "11530:322:14"
														}
													]
												}
											},
											{
												"assignments": [
													2631
												],
												"declarations": [
													{
														"constant": false,
														"id": 2631,
														"mutability": "mutable",
														"name": "newTokenIds",
														"nameLocation": "12267:11:14",
														"nodeType": "VariableDeclaration",
														"scope": 2681,
														"src": "12250:28:14",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 2629,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "12250:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2630,
															"nodeType": "ArrayTypeName",
															"src": "12250:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2640,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 2636,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "12343:3:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "12343:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2638,
															"name": "mintCount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2449,
															"src": "12355:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2633,
																	"name": "creatorContractAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2445,
																	"src": "12300:22:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2632,
																"name": "IERC721CreatorCore",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 372,
																"src": "12281:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721CreatorCore_$372_$",
																	"typeString": "type(contract IERC721CreatorCore)"
																}
															},
															"id": 2634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12281:42:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721CreatorCore_$372",
																"typeString": "contract IERC721CreatorCore"
															}
														},
														"id": 2635,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mintExtensionBatch",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 353,
														"src": "12281:61:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint16_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
															"typeString": "function (address,uint16) external returns (uint256[] memory)"
														}
													},
													"id": 2639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12281:84:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12250:115:14"
											},
											{
												"body": {
													"id": 2673,
													"nodeType": "Block",
													"src": "12409:166:14",
													"statements": [
														{
															"expression": {
																"id": 2667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 2648,
																			"name": "_tokenClaims",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1787,
																			"src": "12423:12:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$_$",
																				"typeString": "mapping(address => mapping(uint256 => struct ERC721LazyClaim.TokenClaim storage ref))"
																			}
																		},
																		"id": 2653,
																		"indexExpression": {
																			"id": 2649,
																			"name": "creatorContractAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2445,
																			"src": "12436:22:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "12423:36:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$",
																			"typeString": "mapping(uint256 => struct ERC721LazyClaim.TokenClaim storage ref)"
																		}
																	},
																	"id": 2654,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 2650,
																			"name": "newTokenIds",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2631,
																			"src": "12460:11:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																				"typeString": "uint256[] memory"
																			}
																		},
																		"id": 2652,
																		"indexExpression": {
																			"id": 2651,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2642,
																			"src": "12472:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "12460:14:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "12423:52:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenClaim_$1780_storage",
																		"typeString": "struct ERC721LazyClaim.TokenClaim storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 2658,
																					"name": "claimIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2447,
																					"src": "12497:10:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2657,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "12489:7:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint224_$",
																					"typeString": "type(uint224)"
																				},
																				"typeName": {
																					"id": 2656,
																					"name": "uint224",
																					"nodeType": "ElementaryTypeName",
																					"src": "12489:7:14",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2659,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "12489:19:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint224",
																				"typeString": "uint224"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2664,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2662,
																						"name": "newMintIndex",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2523,
																						"src": "12517:12:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"id": 2663,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2642,
																						"src": "12530:1:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12517:14:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2661,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "12510:6:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint32_$",
																					"typeString": "type(uint32)"
																				},
																				"typeName": {
																					"id": 2660,
																					"name": "uint32",
																					"nodeType": "ElementaryTypeName",
																					"src": "12510:6:14",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2665,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "12510:22:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint224",
																				"typeString": "uint224"
																			},
																			{
																				"typeIdentifier": "t_uint32",
																				"typeString": "uint32"
																			}
																		],
																		"id": 2655,
																		"name": "TokenClaim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1780,
																		"src": "12478:10:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_TokenClaim_$1780_storage_ptr_$",
																			"typeString": "type(struct ERC721LazyClaim.TokenClaim storage pointer)"
																		}
																	},
																	"id": 2666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "12478:55:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenClaim_$1780_memory_ptr",
																		"typeString": "struct ERC721LazyClaim.TokenClaim memory"
																	}
																},
																"src": "12423:110:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenClaim_$1780_storage",
																	"typeString": "struct ERC721LazyClaim.TokenClaim storage ref"
																}
															},
															"id": 2668,
															"nodeType": "ExpressionStatement",
															"src": "12423:110:14"
														},
														{
															"id": 2672,
															"nodeType": "UncheckedBlock",
															"src": "12547:18:14",
															"statements": [
																{
																	"expression": {
																		"id": 2670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "12559:3:14",
																		"subExpression": {
																			"id": 2669,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2642,
																			"src": "12559:1:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2671,
																	"nodeType": "ExpressionStatement",
																	"src": "12559:3:14"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2645,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2642,
														"src": "12392:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2646,
														"name": "mintCount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2449,
														"src": "12396:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint16",
															"typeString": "uint16"
														}
													},
													"src": "12392:13:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2674,
												"initializationExpression": {
													"assignments": [
														2642
													],
													"declarations": [
														{
															"constant": false,
															"id": 2642,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "12385:1:14",
															"nodeType": "VariableDeclaration",
															"scope": 2674,
															"src": "12380:6:14",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2641,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "12380:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2644,
													"initialValue": {
														"hexValue": "30",
														"id": 2643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12389:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "12380:10:14"
												},
												"nodeType": "ForStatement",
												"src": "12375:200:14"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2676,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2445,
															"src": "12605:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2677,
															"name": "claimIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2447,
															"src": "12629:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2678,
															"name": "mintCount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2449,
															"src": "12641:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														],
														"id": 2675,
														"name": "ClaimMintBatch",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2936,
														"src": "12590:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint16_$returns$__$",
															"typeString": "function (address,uint256,uint16)"
														}
													},
													"id": 2679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12590:61:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2680,
												"nodeType": "EmitStatement",
												"src": "12585:66:14"
											}
										]
									},
									"documentation": {
										"id": 2443,
										"nodeType": "StructuredDocumentation",
										"src": "10412:52:14",
										"text": " See {IERC721LazyClaim-mintBatch}."
									},
									"functionSelector": "3512da33",
									"id": 2682,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mintBatch",
									"nameLocation": "10478:9:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2458,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10633:8:14"
									},
									"parameters": {
										"id": 2457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2445,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "10496:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2682,
												"src": "10488:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2444,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10488:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2447,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "10528:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2682,
												"src": "10520:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10520:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2449,
												"mutability": "mutable",
												"name": "mintCount",
												"nameLocation": "10547:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2682,
												"src": "10540:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 2448,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "10540:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2452,
												"mutability": "mutable",
												"name": "mintIndices",
												"nameLocation": "10576:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2682,
												"src": "10558:29:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2450,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "10558:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 2451,
													"nodeType": "ArrayTypeName",
													"src": "10558:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2456,
												"mutability": "mutable",
												"name": "merkleProofs",
												"nameLocation": "10610:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 2682,
												"src": "10589:33:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes32[][]"
												},
												"typeName": {
													"baseType": {
														"baseType": {
															"id": 2453,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "10589:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"id": 2454,
														"nodeType": "ArrayTypeName",
														"src": "10589:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
															"typeString": "bytes32[]"
														}
													},
													"id": 2455,
													"nodeType": "ArrayTypeName",
													"src": "10589:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_array$_t_bytes32_$dyn_storage_$dyn_storage_ptr",
														"typeString": "bytes32[][]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10487:136:14"
									},
									"returnParameters": {
										"id": 2459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10642:0:14"
									},
									"scope": 2868,
									"src": "10469:2189:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2766,
										"nodeType": "Block",
										"src": "12956:670:14",
										"statements": [
											{
												"assignments": [
													2699
												],
												"declarations": [
													{
														"constant": false,
														"id": 2699,
														"mutability": "mutable",
														"name": "leaf",
														"nameLocation": "12997:4:14",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "12989:12:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2698,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "12989:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2708,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2703,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "13031:3:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2704,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "13031:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2705,
																	"name": "mintIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2692,
																	"src": "13043:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																],
																"expression": {
																	"id": 2701,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "13014:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2702,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "13014:16:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13014:39:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2700,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "13004:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13004:50:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12989:65:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2712,
																	"name": "merkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2695,
																	"src": "13091:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																{
																	"expression": {
																		"id": 2713,
																		"name": "claim",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2686,
																		"src": "13104:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																			"typeString": "struct IERC721LazyClaim.Claim storage pointer"
																		}
																	},
																	"id": 2714,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "merkleRoot",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2911,
																	"src": "13104:16:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2715,
																	"name": "leaf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2699,
																	"src": "13122:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 2710,
																	"name": "MerkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1082,
																	"src": "13072:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MerkleProof_$1082_$",
																		"typeString": "type(library MerkleProof)"
																	}
																},
																"id": 2711,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "verify",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1018,
																"src": "13072:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																	"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
																}
															},
															"id": 2716,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13072:55:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756c64206e6f7420766572696679206d65726b6c652070726f6f66",
															"id": 2717,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13129:31:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c04d8c41f3a3839789e85527bb789b661300247e74592dd7d62d3957410112e5",
																"typeString": "literal_string \"Could not verify merkle proof\""
															},
															"value": "Could not verify merkle proof"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c04d8c41f3a3839789e85527bb789b661300247e74592dd7d62d3957410112e5",
																"typeString": "literal_string \"Could not verify merkle proof\""
															}
														],
														"id": 2709,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13064:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13064:97:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2719,
												"nodeType": "ExpressionStatement",
												"src": "13064:97:14"
											},
											{
												"assignments": [
													2721
												],
												"declarations": [
													{
														"constant": false,
														"id": 2721,
														"mutability": "mutable",
														"name": "claimMintIndex",
														"nameLocation": "13226:14:14",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "13218:22:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2720,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13218:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2725,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													},
													"id": 2724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2722,
														"name": "mintIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2692,
														"src": "13243:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">>",
													"rightExpression": {
														"hexValue": "38",
														"id": 2723,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13256:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "13243:14:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13218:39:14"
											},
											{
												"assignments": [
													2727
												],
												"declarations": [
													{
														"constant": false,
														"id": 2727,
														"mutability": "mutable",
														"name": "claimMintTracking",
														"nameLocation": "13275:17:14",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "13267:25:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2726,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13267:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2735,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 2728,
																"name": "_claimMintIndices",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1775,
																"src": "13295:17:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$",
																	"typeString": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"
																}
															},
															"id": 2730,
															"indexExpression": {
																"id": 2729,
																"name": "creatorContractAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2688,
																"src": "13313:22:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "13295:41:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																"typeString": "mapping(uint256 => mapping(uint256 => uint256))"
															}
														},
														"id": 2732,
														"indexExpression": {
															"id": 2731,
															"name": "claimIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2690,
															"src": "13337:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "13295:53:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 2734,
													"indexExpression": {
														"id": 2733,
														"name": "claimMintIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2721,
														"src": "13349:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "13295:69:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13267:97:14"
											},
											{
												"assignments": [
													2737
												],
												"declarations": [
													{
														"constant": false,
														"id": 2737,
														"mutability": "mutable",
														"name": "mintBitmask",
														"nameLocation": "13382:11:14",
														"nodeType": "VariableDeclaration",
														"scope": 2766,
														"src": "13374:19:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2736,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13374:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2744,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2738,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13396:1:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2741,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2739,
																	"name": "mintIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2692,
																	"src": "13402:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2740,
																	"name": "MINT_INDEX_BITMASK",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1748,
																	"src": "13414:18:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "13402:30:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2742,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "13401:32:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13396:37:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13374:59:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2748,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2746,
																	"name": "mintBitmask",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2737,
																	"src": "13451:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2747,
																	"name": "claimMintTracking",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2727,
																	"src": "13465:17:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "13451:31:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2749,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13486:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13451:36:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c7265616479206d696e746564",
															"id": 2751,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13489:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_07a393aaecec82831fb8eedd24a09ceedd55f6988f2ff034d4b7c484567c4a59",
																"typeString": "literal_string \"Already minted\""
															},
															"value": "Already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_07a393aaecec82831fb8eedd24a09ceedd55f6988f2ff034d4b7c484567c4a59",
																"typeString": "literal_string \"Already minted\""
															}
														],
														"id": 2745,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13443:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13443:63:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2753,
												"nodeType": "ExpressionStatement",
												"src": "13443:63:14"
											},
											{
												"expression": {
													"id": 2764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"baseExpression": {
																	"id": 2754,
																	"name": "_claimMintIndices",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1775,
																	"src": "13516:17:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$",
																		"typeString": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"
																	}
																},
																"id": 2758,
																"indexExpression": {
																	"id": 2755,
																	"name": "creatorContractAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2688,
																	"src": "13534:22:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "13516:41:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(uint256 => mapping(uint256 => uint256))"
																}
															},
															"id": 2759,
															"indexExpression": {
																"id": 2756,
																"name": "claimIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2690,
																"src": "13558:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "13516:53:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 2760,
														"indexExpression": {
															"id": 2757,
															"name": "claimMintIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2721,
															"src": "13570:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13516:69:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2763,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2761,
															"name": "claimMintTracking",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2727,
															"src": "13588:17:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "|",
														"rightExpression": {
															"id": 2762,
															"name": "mintBitmask",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2737,
															"src": "13608:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "13588:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13516:103:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2765,
												"nodeType": "ExpressionStatement",
												"src": "13516:103:14"
											}
										]
									},
									"documentation": {
										"id": 2683,
										"nodeType": "StructuredDocumentation",
										"src": "12664:127:14",
										"text": " Helper to check merkle proof and whether or not the mintIndex was consumed. Also updates the consumed counts"
									},
									"id": 2767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkMerkleAndUpdate",
									"nameLocation": "12805:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2686,
												"mutability": "mutable",
												"name": "claim",
												"nameLocation": "12841:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "12827:19:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
													"typeString": "struct IERC721LazyClaim.Claim"
												},
												"typeName": {
													"id": 2685,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2684,
														"name": "Claim",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2914,
														"src": "12827:5:14"
													},
													"referencedDeclaration": 2914,
													"src": "12827:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
														"typeString": "struct IERC721LazyClaim.Claim"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2688,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "12856:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "12848:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2687,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12848:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2690,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "12888:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "12880:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2689,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12880:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2692,
												"mutability": "mutable",
												"name": "mintIndex",
												"nameLocation": "12907:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "12900:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 2691,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "12900:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2695,
												"mutability": "mutable",
												"name": "merkleProof",
												"nameLocation": "12935:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2767,
												"src": "12918:28:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2693,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "12918:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2694,
													"nodeType": "ArrayTypeName",
													"src": "12918:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12826:121:14"
									},
									"returnParameters": {
										"id": 2697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12956:0:14"
									},
									"scope": 2868,
									"src": "12796:830:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										388
									],
									"body": {
										"id": 2866,
										"nodeType": "Block",
										"src": "13814:773:14",
										"statements": [
											{
												"assignments": [
													2780
												],
												"declarations": [
													{
														"constant": false,
														"id": 2780,
														"mutability": "mutable",
														"name": "tokenClaim",
														"nameLocation": "13842:10:14",
														"nodeType": "VariableDeclaration",
														"scope": 2866,
														"src": "13824:28:14",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenClaim_$1780_memory_ptr",
															"typeString": "struct ERC721LazyClaim.TokenClaim"
														},
														"typeName": {
															"id": 2779,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2778,
																"name": "TokenClaim",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1780,
																"src": "13824:10:14"
															},
															"referencedDeclaration": 1780,
															"src": "13824:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenClaim_$1780_storage_ptr",
																"typeString": "struct ERC721LazyClaim.TokenClaim"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2786,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 2781,
															"name": "_tokenClaims",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1787,
															"src": "13855:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$_$",
																"typeString": "mapping(address => mapping(uint256 => struct ERC721LazyClaim.TokenClaim storage ref))"
															}
														},
														"id": 2783,
														"indexExpression": {
															"id": 2782,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2770,
															"src": "13868:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "13855:36:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenClaim_$1780_storage_$",
															"typeString": "mapping(uint256 => struct ERC721LazyClaim.TokenClaim storage ref)"
														}
													},
													"id": 2785,
													"indexExpression": {
														"id": 2784,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2772,
														"src": "13892:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "13855:45:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenClaim_$1780_storage",
														"typeString": "struct ERC721LazyClaim.TokenClaim storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13824:76:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint224",
																"typeString": "uint224"
															},
															"id": 2791,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2788,
																	"name": "tokenClaim",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2780,
																	"src": "13918:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenClaim_$1780_memory_ptr",
																		"typeString": "struct ERC721LazyClaim.TokenClaim memory"
																	}
																},
																"id": 2789,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "claimIndex",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1777,
																"src": "13918:21:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint224",
																	"typeString": "uint224"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2790,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13942:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13918:25:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6b656e20646f6573206e6f74206578697374",
															"id": 2792,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13945:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_547be7f5ed2d17cca91d35e8212265e350385ed13daeee07722cf3e686dd6726",
																"typeString": "literal_string \"Token does not exist\""
															},
															"value": "Token does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_547be7f5ed2d17cca91d35e8212265e350385ed13daeee07722cf3e686dd6726",
																"typeString": "literal_string \"Token does not exist\""
															}
														],
														"id": 2787,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13910:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13910:58:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2794,
												"nodeType": "ExpressionStatement",
												"src": "13910:58:14"
											},
											{
												"assignments": [
													2797
												],
												"declarations": [
													{
														"constant": false,
														"id": 2797,
														"mutability": "mutable",
														"name": "claim",
														"nameLocation": "13991:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2866,
														"src": "13978:18:14",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
															"typeString": "struct IERC721LazyClaim.Claim"
														},
														"typeName": {
															"id": 2796,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2795,
																"name": "Claim",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2914,
																"src": "13978:5:14"
															},
															"referencedDeclaration": 2914,
															"src": "13978:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
																"typeString": "struct IERC721LazyClaim.Claim"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2804,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 2798,
															"name": "_claims",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1759,
															"src": "13999:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$_$",
																"typeString": "mapping(address => mapping(uint256 => struct IERC721LazyClaim.Claim storage ref))"
															}
														},
														"id": 2800,
														"indexExpression": {
															"id": 2799,
															"name": "creatorContractAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2770,
															"src": "14007:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "13999:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Claim_$2914_storage_$",
															"typeString": "mapping(uint256 => struct IERC721LazyClaim.Claim storage ref)"
														}
													},
													"id": 2803,
													"indexExpression": {
														"expression": {
															"id": 2801,
															"name": "tokenClaim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2780,
															"src": "14031:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenClaim_$1780_memory_ptr",
																"typeString": "struct ERC721LazyClaim.TokenClaim memory"
															}
														},
														"id": 2802,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "claimIndex",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1777,
														"src": "14031:21:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint224",
															"typeString": "uint224"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "13999:54:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage",
														"typeString": "struct IERC721LazyClaim.Claim storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13978:75:14"
											},
											{
												"assignments": [
													2806
												],
												"declarations": [
													{
														"constant": false,
														"id": 2806,
														"mutability": "mutable",
														"name": "prefix",
														"nameLocation": "14078:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2866,
														"src": "14064:20:14",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 2805,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "14064:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2808,
												"initialValue": {
													"hexValue": "",
													"id": 2807,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14087:2:14",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14064:25:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_StorageProtocol_$2876",
														"typeString": "enum IERC721LazyClaim.StorageProtocol"
													},
													"id": 2813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2809,
															"name": "claim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2797,
															"src": "14103:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
																"typeString": "struct IERC721LazyClaim.Claim memory"
															}
														},
														"id": 2810,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "storageProtocol",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2907,
														"src": "14103:21:14",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_StorageProtocol_$2876",
															"typeString": "enum IERC721LazyClaim.StorageProtocol"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 2811,
															"name": "StorageProtocol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2876,
															"src": "14128:15:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
															}
														},
														"id": 2812,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "ARWEAVE",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2874,
														"src": "14128:23:14",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_StorageProtocol_$2876",
															"typeString": "enum IERC721LazyClaim.StorageProtocol"
														}
													},
													"src": "14103:48:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_StorageProtocol_$2876",
															"typeString": "enum IERC721LazyClaim.StorageProtocol"
														},
														"id": 2823,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2819,
																"name": "claim",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2797,
																"src": "14211:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
																	"typeString": "struct IERC721LazyClaim.Claim memory"
																}
															},
															"id": 2820,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "storageProtocol",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2907,
															"src": "14211:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2821,
																"name": "StorageProtocol",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2876,
																"src": "14236:15:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_StorageProtocol_$2876_$",
																	"typeString": "type(enum IERC721LazyClaim.StorageProtocol)"
																}
															},
															"id": 2822,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "IPFS",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2875,
															"src": "14236:20:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_StorageProtocol_$2876",
																"typeString": "enum IERC721LazyClaim.StorageProtocol"
															}
														},
														"src": "14211:45:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 2829,
													"nodeType": "IfStatement",
													"src": "14207:96:14",
													"trueBody": {
														"id": 2828,
														"nodeType": "Block",
														"src": "14258:45:14",
														"statements": [
															{
																"expression": {
																	"id": 2826,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2824,
																		"name": "prefix",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2806,
																		"src": "14272:6:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"id": 2825,
																		"name": "IPFS_PREFIX",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1745,
																		"src": "14281:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	"src": "14272:20:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"id": 2827,
																"nodeType": "ExpressionStatement",
																"src": "14272:20:14"
															}
														]
													}
												},
												"id": 2830,
												"nodeType": "IfStatement",
												"src": "14099:204:14",
												"trueBody": {
													"id": 2818,
													"nodeType": "Block",
													"src": "14153:48:14",
													"statements": [
														{
															"expression": {
																"id": 2816,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2814,
																	"name": "prefix",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2806,
																	"src": "14167:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 2815,
																	"name": "ARWEAVE_PREFIX",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1742,
																	"src": "14176:14:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "14167:23:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2817,
															"nodeType": "ExpressionStatement",
															"src": "14167:23:14"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2831,
														"name": "uri",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2776,
														"src": "14312:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2836,
																		"name": "prefix",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2806,
																		"src": "14342:6:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"expression": {
																			"id": 2837,
																			"name": "claim",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "14350:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
																				"typeString": "struct IERC721LazyClaim.Claim memory"
																			}
																		},
																		"id": 2838,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "location",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2913,
																		"src": "14350:14:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 2834,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "14325:3:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 2835,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "14325:16:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 2839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14325:40:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2833,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "14318:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 2832,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "14318:6:14",
																"typeDescriptions": {}
															}
														},
														"id": 2840,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14318:48:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "14312:54:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"id": 2842,
												"nodeType": "ExpressionStatement",
												"src": "14312:54:14"
											},
											{
												"condition": {
													"id": 2845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "14456:16:14",
													"subExpression": {
														"expression": {
															"id": 2843,
															"name": "claim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2797,
															"src": "14457:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
																"typeString": "struct IERC721LazyClaim.Claim memory"
															}
														},
														"id": 2844,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "identical",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2909,
														"src": "14457:15:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2865,
												"nodeType": "IfStatement",
												"src": "14452:129:14",
												"trueBody": {
													"id": 2864,
													"nodeType": "Block",
													"src": "14474:107:14",
													"statements": [
														{
															"expression": {
																"id": 2862,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2846,
																	"name": "uri",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2776,
																	"src": "14488:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 2851,
																					"name": "uri",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2776,
																					"src": "14518:3:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				},
																				{
																					"hexValue": "2f",
																					"id": 2852,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "14523:3:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527",
																						"typeString": "literal_string \"/\""
																					},
																					"value": "/"
																				},
																				{
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"expression": {
																							"arguments": [
																								{
																									"expression": {
																										"id": 2855,
																										"name": "tokenClaim",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 2780,
																										"src": "14536:10:14",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenClaim_$1780_memory_ptr",
																											"typeString": "struct ERC721LazyClaim.TokenClaim memory"
																										}
																									},
																									"id": 2856,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "mintOrder",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1779,
																									"src": "14536:20:14",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint32",
																										"typeString": "uint32"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_uint32",
																										"typeString": "uint32"
																									}
																								],
																								"id": 2854,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "14528:7:14",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint256_$",
																									"typeString": "type(uint256)"
																								},
																								"typeName": {
																									"id": 2853,
																									"name": "uint256",
																									"nodeType": "ElementaryTypeName",
																									"src": "14528:7:14",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 2857,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "14528:29:14",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 2858,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "toString",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 876,
																						"src": "14528:38:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256) pure returns (string memory)"
																						}
																					},
																					"id": 2859,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "14528:40:14",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527",
																						"typeString": "literal_string \"/\""
																					},
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"expression": {
																					"id": 2849,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "14501:3:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2850,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "encodePacked",
																				"nodeType": "MemberAccess",
																				"src": "14501:16:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 2860,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "14501:68:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 2848,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "14494:6:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																			"typeString": "type(string storage pointer)"
																		},
																		"typeName": {
																			"id": 2847,
																			"name": "string",
																			"nodeType": "ElementaryTypeName",
																			"src": "14494:6:14",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "14494:76:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "14488:82:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2863,
															"nodeType": "ExpressionStatement",
															"src": "14488:82:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2768,
										"nodeType": "StructuredDocumentation",
										"src": "13632:60:14",
										"text": " See {ICreatorExtensionTokenURI-tokenURI}."
									},
									"functionSelector": "e9dc6375",
									"id": 2867,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "13706:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2774,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "13773:8:14"
									},
									"parameters": {
										"id": 2773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2770,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "13723:22:14",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "13715:30:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13715:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2772,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13755:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "13747:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13747:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13714:49:14"
									},
									"returnParameters": {
										"id": 2777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2776,
												"mutability": "mutable",
												"name": "uri",
												"nameLocation": "13809:3:14",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "13795:17:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2775,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "13795:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13794:19:14"
									},
									"scope": 2868,
									"src": "13697:890:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2869,
							"src": "703:13886:14",
							"usedErrors": []
						}
					],
					"src": "33:14557:14"
				},
				"id": 14
			},
			"contracts/manifold/lazyclaim/IERC721LazyClaim.sol": {
				"ast": {
					"absolutePath": "contracts/manifold/lazyclaim/IERC721LazyClaim.sol",
					"exportedSymbols": {
						"IERC721LazyClaim": [
							3046
						]
					},
					"id": 3047,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2870,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721LazyClaim",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2871,
								"nodeType": "StructuredDocumentation",
								"src": "85:31:15",
								"text": " Lazy Claim interface"
							},
							"fullyImplemented": false,
							"id": 3046,
							"linearizedBaseContracts": [
								3046
							],
							"name": "IERC721LazyClaim",
							"nameLocation": "127:16:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IERC721LazyClaim.StorageProtocol",
									"id": 2876,
									"members": [
										{
											"id": 2872,
											"name": "INVALID",
											"nameLocation": "173:7:15",
											"nodeType": "EnumValue",
											"src": "173:7:15"
										},
										{
											"id": 2873,
											"name": "NONE",
											"nameLocation": "182:4:15",
											"nodeType": "EnumValue",
											"src": "182:4:15"
										},
										{
											"id": 2874,
											"name": "ARWEAVE",
											"nameLocation": "188:7:15",
											"nodeType": "EnumValue",
											"src": "188:7:15"
										},
										{
											"id": 2875,
											"name": "IPFS",
											"nameLocation": "197:4:15",
											"nodeType": "EnumValue",
											"src": "197:4:15"
										}
									],
									"name": "StorageProtocol",
									"nameLocation": "155:15:15",
									"nodeType": "EnumDefinition",
									"src": "150:53:15"
								},
								{
									"canonicalName": "IERC721LazyClaim.ClaimParameters",
									"id": 2894,
									"members": [
										{
											"constant": false,
											"id": 2878,
											"mutability": "mutable",
											"name": "totalMax",
											"nameLocation": "249:8:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "242:15:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2877,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "242:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2880,
											"mutability": "mutable",
											"name": "walletMax",
											"nameLocation": "274:9:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "267:16:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2879,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "267:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2882,
											"mutability": "mutable",
											"name": "startDate",
											"nameLocation": "300:9:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "293:16:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 2881,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "293:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2884,
											"mutability": "mutable",
											"name": "endDate",
											"nameLocation": "326:7:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "319:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 2883,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "319:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2887,
											"mutability": "mutable",
											"name": "storageProtocol",
											"nameLocation": "359:15:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "343:31:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_StorageProtocol_$2876",
												"typeString": "enum IERC721LazyClaim.StorageProtocol"
											},
											"typeName": {
												"id": 2886,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2885,
													"name": "StorageProtocol",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 2876,
													"src": "343:15:15"
												},
												"referencedDeclaration": 2876,
												"src": "343:15:15",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_StorageProtocol_$2876",
													"typeString": "enum IERC721LazyClaim.StorageProtocol"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2889,
											"mutability": "mutable",
											"name": "identical",
											"nameLocation": "389:9:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "384:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2888,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "384:4:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2891,
											"mutability": "mutable",
											"name": "merkleRoot",
											"nameLocation": "416:10:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "408:18:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 2890,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "408:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2893,
											"mutability": "mutable",
											"name": "location",
											"nameLocation": "443:8:15",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "436:15:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 2892,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "436:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ClaimParameters",
									"nameLocation": "216:15:15",
									"nodeType": "StructDefinition",
									"scope": 3046,
									"src": "209:249:15",
									"visibility": "public"
								},
								{
									"canonicalName": "IERC721LazyClaim.Claim",
									"id": 2914,
									"members": [
										{
											"constant": false,
											"id": 2896,
											"mutability": "mutable",
											"name": "total",
											"nameLocation": "494:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "487:12:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2895,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "487:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2898,
											"mutability": "mutable",
											"name": "totalMax",
											"nameLocation": "516:8:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "509:15:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2897,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "509:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2900,
											"mutability": "mutable",
											"name": "walletMax",
											"nameLocation": "541:9:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "534:16:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2899,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "534:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2902,
											"mutability": "mutable",
											"name": "startDate",
											"nameLocation": "567:9:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "560:16:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 2901,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "560:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2904,
											"mutability": "mutable",
											"name": "endDate",
											"nameLocation": "593:7:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "586:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 2903,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "586:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2907,
											"mutability": "mutable",
											"name": "storageProtocol",
											"nameLocation": "626:15:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "610:31:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_StorageProtocol_$2876",
												"typeString": "enum IERC721LazyClaim.StorageProtocol"
											},
											"typeName": {
												"id": 2906,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2905,
													"name": "StorageProtocol",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 2876,
													"src": "610:15:15"
												},
												"referencedDeclaration": 2876,
												"src": "610:15:15",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_StorageProtocol_$2876",
													"typeString": "enum IERC721LazyClaim.StorageProtocol"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2909,
											"mutability": "mutable",
											"name": "identical",
											"nameLocation": "656:9:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "651:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2908,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "651:4:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2911,
											"mutability": "mutable",
											"name": "merkleRoot",
											"nameLocation": "683:10:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "675:18:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 2910,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "675:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2913,
											"mutability": "mutable",
											"name": "location",
											"nameLocation": "710:8:15",
											"nodeType": "VariableDeclaration",
											"scope": 2914,
											"src": "703:15:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 2912,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "703:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Claim",
									"nameLocation": "471:5:15",
									"nodeType": "StructDefinition",
									"scope": 3046,
									"src": "464:261:15",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "cf76e1beb8dcf887c917933e1d0970eafadb9a69b82cfd5f44740a0dce6f45a6",
									"id": 2922,
									"name": "ClaimInitialized",
									"nameLocation": "737:16:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2916,
												"indexed": true,
												"mutability": "mutable",
												"name": "creatorContract",
												"nameLocation": "770:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2922,
												"src": "754:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2915,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "754:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2918,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "803:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2922,
												"src": "787:26:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint224",
													"typeString": "uint224"
												},
												"typeName": {
													"id": 2917,
													"name": "uint224",
													"nodeType": "ElementaryTypeName",
													"src": "787:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint224",
														"typeString": "uint224"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2920,
												"indexed": false,
												"mutability": "mutable",
												"name": "initializer",
												"nameLocation": "823:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 2922,
												"src": "815:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2919,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "815:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "753:82:15"
									},
									"src": "731:105:15"
								},
								{
									"anonymous": false,
									"eventSelector": "5d404f369772cfab2b65717fca9bc2077efeab89a0dbec036bf0c13783154eb1",
									"id": 2928,
									"name": "ClaimMint",
									"nameLocation": "847:9:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2924,
												"indexed": true,
												"mutability": "mutable",
												"name": "creatorContract",
												"nameLocation": "873:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2928,
												"src": "857:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "857:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2926,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "906:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2928,
												"src": "890:26:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "856:61:15"
									},
									"src": "841:77:15"
								},
								{
									"anonymous": false,
									"eventSelector": "74f5d3254dfa39a7b1217a27d5d9b3e061eafe11720eca1cf499da2dc1eb1259",
									"id": 2936,
									"name": "ClaimMintBatch",
									"nameLocation": "929:14:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2930,
												"indexed": true,
												"mutability": "mutable",
												"name": "creatorContract",
												"nameLocation": "960:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2936,
												"src": "944:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2929,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "944:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2932,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "993:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2936,
												"src": "977:26:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2931,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "977:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2934,
												"indexed": false,
												"mutability": "mutable",
												"name": "mintCount",
												"nameLocation": "1012:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 2936,
												"src": "1005:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 2933,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1005:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "943:79:15"
									},
									"src": "923:100:15"
								},
								{
									"documentation": {
										"id": 2937,
										"nodeType": "StructuredDocumentation",
										"src": "1029:384:15",
										"text": " @notice initialize a new claim, emit initialize event, and return the newly created index\n @param creatorContractAddress    the creator contract the claim will mint tokens for\n @param claimParameters           the parameters which will affect the minting behavior of the claim\n @return                          the index of the newly created claim"
									},
									"functionSelector": "037b79db",
									"id": 2947,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializeClaim",
									"nameLocation": "1427:15:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2939,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "1451:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 2947,
												"src": "1443:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1443:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "claimParameters",
												"nameLocation": "1500:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2947,
												"src": "1475:40:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
													"typeString": "struct IERC721LazyClaim.ClaimParameters"
												},
												"typeName": {
													"id": 2941,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2940,
														"name": "ClaimParameters",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2894,
														"src": "1475:15:15"
													},
													"referencedDeclaration": 2894,
													"src": "1475:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ClaimParameters_$2894_storage_ptr",
														"typeString": "struct IERC721LazyClaim.ClaimParameters"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1442:74:15"
									},
									"returnParameters": {
										"id": 2946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2945,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2947,
												"src": "1534:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1534:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1533:9:15"
									},
									"scope": 3046,
									"src": "1418:125:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2948,
										"nodeType": "StructuredDocumentation",
										"src": "1549:370:15",
										"text": " @notice update an existing claim at claimIndex\n @param creatorContractAddress    the creator contract corresponding to the claim\n @param claimIndex                the index of the claim in the list of creatorContractAddress' _claims\n @param claimParameters           the parameters which will affect the minting behavior of the claim"
									},
									"functionSelector": "1831a643",
									"id": 2958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateClaim",
									"nameLocation": "1933:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2950,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "1953:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "1945:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2949,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2952,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "1985:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "1977:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2951,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1977:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2955,
												"mutability": "mutable",
												"name": "claimParameters",
												"nameLocation": "2022:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "1997:40:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ClaimParameters_$2894_calldata_ptr",
													"typeString": "struct IERC721LazyClaim.ClaimParameters"
												},
												"typeName": {
													"id": 2954,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2953,
														"name": "ClaimParameters",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2894,
														"src": "1997:15:15"
													},
													"referencedDeclaration": 2894,
													"src": "1997:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ClaimParameters_$2894_storage_ptr",
														"typeString": "struct IERC721LazyClaim.ClaimParameters"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:94:15"
									},
									"returnParameters": {
										"id": 2957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2047:0:15"
									},
									"scope": 3046,
									"src": "1924:124:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2959,
										"nodeType": "StructuredDocumentation",
										"src": "2050:269:15",
										"text": " @notice get the number of _claims initialized for a given creator contract\n @param creatorContractAddress    the address of the creator contract\n @return                          the number of _claims initialized for this creator contract"
									},
									"functionSelector": "d5fdfe87",
									"id": 2966,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimCount",
									"nameLocation": "2333:13:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2961,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "2355:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 2966,
												"src": "2347:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2347:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2346:32:15"
									},
									"returnParameters": {
										"id": 2965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2964,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2966,
												"src": "2401:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2963,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2401:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2400:9:15"
									},
									"scope": 3046,
									"src": "2324:86:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2967,
										"nodeType": "StructuredDocumentation",
										"src": "2416:280:15",
										"text": " @notice get a claim corresponding to a creator contract and index\n @param creatorContractAddress    the address of the creator contract\n @param claimIndex                the index of the claim\n @return                          the claim object"
									},
									"functionSelector": "0f79ab39",
									"id": 2977,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaim",
									"nameLocation": "2710:8:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2969,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "2727:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 2977,
												"src": "2719:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2968,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2971,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "2759:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2977,
												"src": "2751:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2970,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2751:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2718:52:15"
									},
									"returnParameters": {
										"id": 2976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2975,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2977,
												"src": "2793:12:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Claim_$2914_memory_ptr",
													"typeString": "struct IERC721LazyClaim.Claim"
												},
												"typeName": {
													"id": 2974,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2973,
														"name": "Claim",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2914,
														"src": "2793:5:15"
													},
													"referencedDeclaration": 2914,
													"src": "2793:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Claim_$2914_storage_ptr",
														"typeString": "struct IERC721LazyClaim.Claim"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2792:14:15"
									},
									"scope": 3046,
									"src": "2701:106:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2978,
										"nodeType": "StructuredDocumentation",
										"src": "2813:409:15",
										"text": " @notice check if a mint index has been consumed or not (only for merkle claims)\n @param creatorContractAddress    the address of the creator contract for the claim\n @param claimIndex                the index of the claim\n @param mintIndex                 the mint index of the claim\n @return                          whether or not the mint index was consumed"
									},
									"functionSelector": "cda08536",
									"id": 2989,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "checkMintIndex",
									"nameLocation": "3236:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2980,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "3259:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 2989,
												"src": "3251:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3251:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2982,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "3291:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2989,
												"src": "3283:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2981,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3283:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2984,
												"mutability": "mutable",
												"name": "mintIndex",
												"nameLocation": "3310:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 2989,
												"src": "3303:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 2983,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "3303:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3250:70:15"
									},
									"returnParameters": {
										"id": 2988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2987,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2989,
												"src": "3343:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2986,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3343:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3342:6:15"
									},
									"scope": 3046,
									"src": "3227:122:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2990,
										"nodeType": "StructuredDocumentation",
										"src": "3355:418:15",
										"text": " @notice check if multiple mint indices has been consumed or not (only for merkle claims)\n @param creatorContractAddress    the address of the creator contract for the claim\n @param claimIndex                the index of the claim\n @param mintIndices               the mint index of the claim\n @return                          whether or not the mint index was consumed"
									},
									"functionSelector": "f8a6137b",
									"id": 3003,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "checkMintIndices",
									"nameLocation": "3787:16:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2992,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "3812:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 3003,
												"src": "3804:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2991,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3804:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2994,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "3844:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 3003,
												"src": "3836:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3836:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2997,
												"mutability": "mutable",
												"name": "mintIndices",
												"nameLocation": "3874:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 3003,
												"src": "3856:29:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2995,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "3856:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 2996,
													"nodeType": "ArrayTypeName",
													"src": "3856:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3803:83:15"
									},
									"returnParameters": {
										"id": 3002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3001,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3003,
												"src": "3909:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 2999,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "3909:4:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 3000,
													"nodeType": "ArrayTypeName",
													"src": "3909:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3908:15:15"
									},
									"scope": 3046,
									"src": "3778:146:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3004,
										"nodeType": "StructuredDocumentation",
										"src": "3930:408:15",
										"text": " @notice get mints made for a wallet (only for non-merkle claims with walletMax)\n @param minter                    the address of the minting address\n @param creatorContractAddress    the address of the creator contract for the claim\n @param claimIndex                the index of the claim\n @return                          how many mints the minter has made"
									},
									"functionSelector": "42f3bef4",
									"id": 3015,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalMints",
									"nameLocation": "4352:13:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3006,
												"mutability": "mutable",
												"name": "minter",
												"nameLocation": "4374:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 3015,
												"src": "4366:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4366:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3008,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "4390:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 3015,
												"src": "4382:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4382:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3010,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "4422:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 3015,
												"src": "4414:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4414:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:68:15"
									},
									"returnParameters": {
										"id": 3014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3013,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3015,
												"src": "4456:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 3012,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4456:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4455:8:15"
									},
									"scope": 3046,
									"src": "4343:121:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3016,
										"nodeType": "StructuredDocumentation",
										"src": "4470:517:15",
										"text": " @notice allow a wallet to lazily claim a token according to parameters\n @param creatorContractAddress    the creator contract address\n @param claimIndex                the index of the claim for which we will mint\n @param mintIndex                 the mint index (only needed for merkle claims)\n @param merkleProof               if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)"
									},
									"functionSelector": "bbf2a8c6",
									"id": 3028,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "5001:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3018,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "5014:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 3028,
												"src": "5006:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5006:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3020,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "5046:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 3028,
												"src": "5038:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3019,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5038:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3022,
												"mutability": "mutable",
												"name": "mintIndex",
												"nameLocation": "5065:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 3028,
												"src": "5058:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 3021,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "5058:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3025,
												"mutability": "mutable",
												"name": "merkleProof",
												"nameLocation": "5095:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 3028,
												"src": "5076:30:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 3023,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5076:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 3024,
													"nodeType": "ArrayTypeName",
													"src": "5076:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5005:102:15"
									},
									"returnParameters": {
										"id": 3027,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5116:0:15"
									},
									"scope": 3046,
									"src": "4992:125:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3029,
										"nodeType": "StructuredDocumentation",
										"src": "5123:586:15",
										"text": " @notice allow a wallet to lazily claim a token according to parameters\n @param creatorContractAddress    the creator contract address\n @param claimIndex                the index of the claim for which we will mint\n @param mintCount                 the number of claims to mint\n @param mintIndices               the mint index (only needed for merkle claims)\n @param merkleProofs              if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it  (only needed for merkle claims)"
									},
									"functionSelector": "3512da33",
									"id": 3045,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintBatch",
									"nameLocation": "5723:9:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3031,
												"mutability": "mutable",
												"name": "creatorContractAddress",
												"nameLocation": "5741:22:15",
												"nodeType": "VariableDeclaration",
												"scope": 3045,
												"src": "5733:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3030,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5733:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3033,
												"mutability": "mutable",
												"name": "claimIndex",
												"nameLocation": "5773:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 3045,
												"src": "5765:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5765:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3035,
												"mutability": "mutable",
												"name": "mintCount",
												"nameLocation": "5792:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 3045,
												"src": "5785:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 3034,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "5785:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3038,
												"mutability": "mutable",
												"name": "mintIndices",
												"nameLocation": "5821:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 3045,
												"src": "5803:29:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 3036,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "5803:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 3037,
													"nodeType": "ArrayTypeName",
													"src": "5803:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3042,
												"mutability": "mutable",
												"name": "merkleProofs",
												"nameLocation": "5855:12:15",
												"nodeType": "VariableDeclaration",
												"scope": 3045,
												"src": "5834:33:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_array$_t_bytes32_$dyn_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes32[][]"
												},
												"typeName": {
													"baseType": {
														"baseType": {
															"id": 3039,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5834:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"id": 3040,
														"nodeType": "ArrayTypeName",
														"src": "5834:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
															"typeString": "bytes32[]"
														}
													},
													"id": 3041,
													"nodeType": "ArrayTypeName",
													"src": "5834:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_array$_t_bytes32_$dyn_storage_$dyn_storage_ptr",
														"typeString": "bytes32[][]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5732:136:15"
									},
									"returnParameters": {
										"id": 3044,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5877:0:15"
									},
									"scope": 3046,
									"src": "5714:164:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3047,
							"src": "117:5763:15",
							"usedErrors": []
						}
					],
					"src": "33:5848:15"
				},
				"id": 15
			}
		}
	}
}