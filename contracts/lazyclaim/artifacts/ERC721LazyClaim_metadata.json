{
	"compiler": {
		"version": "0.8.0+commit.c7dfd78e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creatorContract",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "claimIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "initializer",
						"type": "address"
					}
				],
				"name": "ClaimInitialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creatorContract",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "claimIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "claimer",
						"type": "address"
					}
				],
				"name": "Mint",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "claimCounts",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "claims",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "total",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "totalMax",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "walletMax",
						"type": "uint32"
					},
					{
						"internalType": "uint48",
						"name": "startDate",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "endDate",
						"type": "uint48"
					},
					{
						"internalType": "enum IERC721LazyClaim.StorageProtocol",
						"name": "storageProtocol",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "identical",
						"type": "bool"
					},
					{
						"internalType": "bytes32",
						"name": "merkleRoot",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "location",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "claimIndex",
						"type": "uint256"
					}
				],
				"name": "getClaim",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "total",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "totalMax",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "walletMax",
								"type": "uint32"
							},
							{
								"internalType": "uint48",
								"name": "startDate",
								"type": "uint48"
							},
							{
								"internalType": "uint48",
								"name": "endDate",
								"type": "uint48"
							},
							{
								"internalType": "enum IERC721LazyClaim.StorageProtocol",
								"name": "storageProtocol",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "identical",
								"type": "bool"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "string",
								"name": "location",
								"type": "string"
							}
						],
						"internalType": "struct IERC721LazyClaim.Claim",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					}
				],
				"name": "getClaimCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getTokenClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "claimIndex",
						"type": "uint256"
					}
				],
				"name": "getWalletMinted",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "totalMax",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "walletMax",
								"type": "uint32"
							},
							{
								"internalType": "uint48",
								"name": "startDate",
								"type": "uint48"
							},
							{
								"internalType": "uint48",
								"name": "endDate",
								"type": "uint48"
							},
							{
								"internalType": "enum IERC721LazyClaim.StorageProtocol",
								"name": "storageProtocol",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "identical",
								"type": "bool"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "string",
								"name": "location",
								"type": "string"
							}
						],
						"internalType": "struct IERC721LazyClaim.ClaimParameters",
						"name": "claimParameters",
						"type": "tuple"
					}
				],
				"name": "initializeClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "claimIndex",
						"type": "uint256"
					},
					{
						"internalType": "bytes32[]",
						"name": "merkleProof",
						"type": "bytes32[]"
					},
					{
						"internalType": "uint32",
						"name": "minterValue",
						"type": "uint32"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "mintsPerWallet",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "claimIndex",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "totalMax",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "walletMax",
								"type": "uint32"
							},
							{
								"internalType": "uint48",
								"name": "startDate",
								"type": "uint48"
							},
							{
								"internalType": "uint48",
								"name": "endDate",
								"type": "uint48"
							},
							{
								"internalType": "enum IERC721LazyClaim.StorageProtocol",
								"name": "storageProtocol",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "identical",
								"type": "bool"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "string",
								"name": "location",
								"type": "string"
							}
						],
						"internalType": "struct IERC721LazyClaim.ClaimParameters",
						"name": "claimParameters",
						"type": "tuple"
					}
				],
				"name": "overwriteClaim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "tokenClaims",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "start",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "count",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creatorContractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "manifold.xyz",
			"kind": "dev",
			"methods": {
				"getClaim(address,uint256)": {
					"params": {
						"claimIndex": "the index of the claim",
						"creatorContractAddress": "the address of the creator contract"
					},
					"returns": {
						"_0": "the claim object"
					}
				},
				"getClaimCount(address)": {
					"params": {
						"creatorContractAddress": "the address of the creator contract"
					},
					"returns": {
						"_0": "the number of claims initialized for this creator contract"
					}
				},
				"getTokenClaim(address,uint256)": {
					"params": {
						"creatorContractAddress": "the address of the creator contract",
						"tokenId": "the token id"
					},
					"returns": {
						"_0": "the index of the claim"
					}
				},
				"getWalletMinted(address,uint256)": {
					"params": {
						"claimIndex": "the index of the claim",
						"creatorContractAddress": "the address of the creator contract for the claim"
					},
					"returns": {
						"_0": "the number of tokens minted for the current wallet"
					}
				},
				"mint(address,uint256,bytes32[],uint32)": {
					"params": {
						"claimIndex": "the index of the claim for which we will mint",
						"creatorContractAddress": "the creator contract address",
						"merkleProof": "if the claim has a merkleRoot, verifying merkleProof ensures that address + minterValue was used to construct it",
						"minterValue": "the value portion which combines with msg.sender to form the merkle leaf corresponding to merkleProof"
					},
					"returns": {
						"_0": "the tokenId of the newly minted token"
					}
				},
				"overwriteClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
					"params": {
						"claimIndex": "the index of the claim in the list of creatorContractAddress' claims",
						"claimParameters": "the parameters which will affect the minting behavior of the claim",
						"creatorContractAddress": "the creator contract corresponding to the claim"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"tokenURI(address,uint256)": {
					"params": {
						"creatorContractAddress": "the creator contract address",
						"tokenId": "the token id to construct the uri for"
					},
					"returns": {
						"_0": "the uri constructed according to the params of the claim corresponding to tokenId"
					}
				}
			},
			"title": "Lazy Claim",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claimCounts(address)": {
					"notice": "stores the size of the mapping in claims, since we can have multiple claims per creator contract { contractAddress => claimCount }"
				},
				"claims(address,uint256)": {
					"notice": "stores the claim data structure, including params and total supply { contractAddress => { claimIndex => Claim } }"
				},
				"getClaim(address,uint256)": {
					"notice": "get a claim corresponding to a creator contract and index"
				},
				"getClaimCount(address)": {
					"notice": "get the number of claims initialized for a given creator contract"
				},
				"getTokenClaim(address,uint256)": {
					"notice": "get the claim index corresponding to a creator contract and tokenId"
				},
				"getWalletMinted(address,uint256)": {
					"notice": "get the number of tokens minted for the current wallet for a given claim"
				},
				"mint(address,uint256,bytes32[],uint32)": {
					"notice": "allow a wallet to lazily claim a token according to parameters"
				},
				"mintsPerWallet(address,uint256,address)": {
					"notice": "stores the number of tokens minted per wallet per claim, in order to limit maximum { contractAddress => { claimIndex => { walletAddress => walletMints } } }"
				},
				"overwriteClaim(address,uint256,(uint32,uint32,uint48,uint48,uint8,bool,bytes32,string))": {
					"notice": "update an existing claim at claimIndex"
				},
				"tokenClaims(address,uint256,uint256)": {
					"notice": "stores which claim corresponds to which tokenId, used to generate token uris { contractAddress => { tokenId => indexRanges } }"
				},
				"tokenURI(address,uint256)": {
					"notice": "construct the uri for the erc721 token metadata"
				}
			},
			"notice": "Lazy claim with optional whitelist ERC721 tokens",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/lazyclaim/ERC721LazyClaim.sol": "ERC721LazyClaim"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol": {
			"keccak256": "0x2dc54667c7182b70fbfcb5c0775b098d9b6b652cbebdd55d2ef7e4676b84af4b",
			"license": "MIT",
			"urls": [
				"bzz-raw://383cef86be81bc48af21a27e945b82dcbb5ed1c1771a7bb68179538c6f8d6b71",
				"dweb:/ipfs/QmV345QPgtbZTqui7YQeA95QB3YCDnG7bX4H5RyUhTd4CX"
			]
		},
		"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol": {
			"keccak256": "0xf4f06a129d0081c2d6b2decc23ef16dccf4b723822ca64ab520f56b71fd16f6c",
			"license": "MIT",
			"urls": [
				"bzz-raw://3245738f14c48cd85b268394e540fc3b611926240d3eaaf5e5b917a26b36120c",
				"dweb:/ipfs/QmRWLPJ72CWgNnq6THvhp427gNjSS5yUTtSkGwLXQDBeUJ"
			]
		},
		"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol": {
			"keccak256": "0x6c8ca804ee7dea9d78f0dacdd9233b1b75ca2b2fa517f52f0fdf6beb34780a51",
			"license": "MIT",
			"urls": [
				"bzz-raw://4a04a6f0cce2bbdb022a8125e147519c7fbaa89692c8f0cfee69a67a2956316f",
				"dweb:/ipfs/QmdUxwBEnFshm1j5FEcJctC7DbFWUznis2LaPcKR7FEZX7"
			]
		},
		"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol": {
			"keccak256": "0xaed5e7784e33745ab1b16f1d87b22084a8b25d531c1dcb8dc41fc2a89e2617da",
			"license": "MIT",
			"urls": [
				"bzz-raw://44837a9cc639062b2d7424a10e9d579b8d3a9bc1cefede2cfbb917bee8f452ae",
				"dweb:/ipfs/QmburkqmRDZYWjKPRUynhdfkAfP5QDKcXH4WCbH1JC8UDq"
			]
		},
		"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol": {
			"keccak256": "0x7cc2e4e7d9052532f445e62ec1fa2f05cc0f5d1d8ee1fea913b43a132277bf2f",
			"license": "MIT",
			"urls": [
				"bzz-raw://266618317d0654fe209b5450b8b5afa3a4a8d41294a2b37ddbae540099859887",
				"dweb:/ipfs/QmYksDqoxhachoqZquXGtjfiuAWJ1rxAKLtUYPL3YboBkE"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad0fb4425453220f15bdb8c4e009052839804bb725797b6d8c02ee2271bc3c23",
				"dweb:/ipfs/QmPtjdMxzEifPUEUa6cKX1yfTWjaZV6QtdwMdN6bEL9FBM"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0x1c03990345fa1982a0bfb5b222cf14fcd2b7a1a396144e0856c84474031a0138",
			"license": "MIT",
			"urls": [
				"bzz-raw://0b57b859bcff05010c78dafa106aca4901d3529bc7fb6e36a1bd11afff1110a0",
				"dweb:/ipfs/QmYUPuLQnm3WZ3JfnUsSi79RFo5axTsCJG3aaz8XcuyBu7"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://1d8016f7e49bd65a14769d2c846a7e589603e51c4bf82da94315cc59f54fe2e4",
				"dweb:/ipfs/Qmd92BAbMLEbYYfRWwN1yqDTxEuguenmQ35YFbPh3KEFuP"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://4fd625dca17657403af518cc6c8ab5c54c58898cf6e912ca2e1b0f3194ad0405",
				"dweb:/ipfs/QmQVv7YeeKmaS11bg7YDTeeGDk6i7sV8LMMfohaLM4SiRu"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0x972240f593e01b2fae2e90c5b94260f4971f03076363a38a3f4fff105efbba8b",
			"license": "MIT",
			"urls": [
				"bzz-raw://b30e18f10f56b137384de1430e8dfea0756dc9ec226e9c1aba1cc2e6fccd11ec",
				"dweb:/ipfs/QmWiRwro1rdrnRWZVdXcofSV1YhaopMF53pnZyU4FYCmGn"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dd1601fcd370546d8c06ea1902d7e7364fc490fbf0ebc3004230ef1f5db473c",
				"dweb:/ipfs/Qmb8zbC3TjWFtcuyP3KEEaegMkPcfeKAcPrwzvkAoMR3cZ"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9",
			"license": "MIT",
			"urls": [
				"bzz-raw://100f8d367b5e94eb9cb991914f1de133cf272654c0708faa893bbc17a5b35b93",
				"dweb:/ipfs/QmZeBojmgXq821dL1TJKFb58B1FogM9jL3u7hXQ8hTEBKT"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0xfac19be5f0d198ac556731a5589a4ae1c0c1622437d0b6b53b2cf3f317071acd",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c0f5ca56c1bfe37e9a9911140681e98c360f9fd225d06fcf2c607169ac76b3b",
				"dweb:/ipfs/QmZYRcvZqTiLcgGRx66RceXNwWqeUS5bDQGNo1gS3hhwec"
			]
		},
		"contracts/lazyclaim/ERC721LazyClaim.sol": {
			"keccak256": "0x78c823196438e3f24d733df2ac95f155127350eae3f9086a1ad04e541abb1429",
			"license": "MIT",
			"urls": [
				"bzz-raw://8f658d9f5d923cb98a440493e55810739750ab1c04041d5b9d148b686f40f969",
				"dweb:/ipfs/QmW3pHJLnsqZXJMjc3vKhg2LH9xVprepw9YZBnjf3US6ct"
			]
		},
		"contracts/lazyclaim/IERC721LazyClaim.sol": {
			"keccak256": "0x717d6ebd55b7600606531f08500bd5cbf4bb5c832320a9d27a3efc8b111096b6",
			"license": "MIT",
			"urls": [
				"bzz-raw://03f6a28855baa53cce3b7d69ead5b9bf7027c16a4c8b3a846c4ed933158b2053",
				"dweb:/ipfs/QmeVrbF3aA1fVakgJWSsgkyZfQCQrVA9n6Rg1M1ECt5rm6"
			]
		}
	},
	"version": 1
}